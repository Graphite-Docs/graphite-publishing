{"version":3,"file":"DropboxTeam-sdk.js","sources":["../src/utils.js","../src/download-request.js","../src/upload-request.js","../src/rpc-request.js","../src/routes.js","../src/constants.js","../src/dropbox-base.js","../src/dropbox.js","../src/routes-team.js","../src/team/dropbox-team.js","../src/team/index.js"],"sourcesContent":["function getSafeUnicode(c) {\n  const unicode = `000${c.charCodeAt(0).toString(16)}`.slice(-4);\n  return `\\\\u${unicode}`;\n}\n\n\n/* global WorkerGlobalScope */\nexport function isWindowOrWorker() {\n  return (\n    (\n      typeof WorkerGlobalScope !== 'undefined' &&\n      self instanceof WorkerGlobalScope\n    ) || (\n      typeof module === 'undefined'\n    )\n  );\n}\n\nexport function getBaseURL(host) {\n  return `https://${host}.dropboxapi.com/2/`;\n}\n\n// source https://www.dropboxforum.com/t5/API-support/HTTP-header-quot-Dropbox-API-Arg-quot-could-not-decode-input-as/m-p/173823/highlight/true#M6786\nexport function httpHeaderSafeJson(args) {\n  return JSON.stringify(args).replace(/[\\u007f-\\uffff]/g, getSafeUnicode);\n}\n","import { getBaseURL, httpHeaderSafeJson, isWindowOrWorker } from './utils';\n\nfunction getDataFromConsumer(res) {\n  if (!res.ok) {\n    return res.text();\n  }\n\n  return (isWindowOrWorker()) ? res.blob() : res.buffer();\n}\n\nfunction responseHandler(res, data) {\n  if (!res.ok) {\n    // eslint-disable-next-line no-throw-literal\n    throw {\n      error: data,\n      response: res,\n      status: res.status,\n    };\n  }\n\n  const result = JSON.parse(res.headers.get('dropbox-api-result'));\n\n  if (isWindowOrWorker()) {\n    result.fileBlob = data;\n  } else {\n    result.fileBinary = data.toString();\n  }\n\n  return result;\n}\n\nexport function downloadRequest(path, args, auth, host, accessToken, options) {\n  if (auth !== 'user') {\n    throw new Error(`Unexpected auth type: ${auth}`);\n  }\n\n  const fetchOptions = {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      'Dropbox-API-Arg': httpHeaderSafeJson(args),\n    },\n  };\n\n  if (options) {\n    if (options.selectUser) {\n      fetchOptions.headers['Dropbox-API-Select-User'] = options.selectUser;\n    }\n    if (options.selectAdmin) {\n      fetchOptions.headers['Dropbox-API-Select-Admin'] = options.selectAdmin;\n    }\n  }\n\n\n  return fetch(getBaseURL(host) + path, fetchOptions)\n    .then(res => getDataFromConsumer(res).then(data => [res, data]))\n    .then(([res, data]) => responseHandler(res, data));\n}\n","import { getBaseURL, httpHeaderSafeJson } from './utils';\n\nfunction parseBodyToType(res) {\n  const clone = res.clone();\n  return new Promise((resolve) => {\n    res.json()\n      .then(data => resolve(data))\n      .catch(() => clone.text().then(data => resolve(data)));\n  }).then(data => [res, data]);\n}\n\nexport function uploadRequest(path, args, auth, host, accessToken, options) {\n  if (auth !== 'user') {\n    throw new Error(`Unexpected auth type: ${auth}`);\n  }\n\n  const { contents } = args;\n  delete args.contents;\n\n  const fetchOptions = {\n    body: contents,\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      'Content-Type': 'application/octet-stream',\n      'Dropbox-API-Arg': httpHeaderSafeJson(args),\n    },\n  };\n\n  if (options) {\n    if (options.selectUser) {\n      fetchOptions.headers['Dropbox-API-Select-User'] = options.selectUser;\n    }\n    if (options.selectAdmin) {\n      fetchOptions.headers['Dropbox-API-Select-Admin'] = options.selectAdmin;\n    }\n  }\n\n  return fetch(getBaseURL(host) + path, fetchOptions)\n    .then(res => parseBodyToType(res))\n    .then(([res, data]) => {\n      // maintaining existing API for error codes not equal to 200 range\n      if (!res.ok) {\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          error: data,\n          response: res,\n          status: res.status,\n        };\n      }\n\n      return data;\n    });\n}\n","import { getBaseURL } from './utils';\n\nfunction parseBodyToType(res) {\n  const clone = res.clone();\n  return new Promise((resolve) => {\n    res.json()\n      .then(data => resolve(data))\n      .catch(() => clone.text().then(data => resolve(data)));\n  }).then(data => [res, data]);\n}\n\nexport function rpcRequest(path, body, auth, host, accessToken, options) {\n  const fetchOptions = {\n    method: 'POST',\n    body: (body) ? JSON.stringify(body) : null,\n  };\n\n  const headers = { 'Content-Type': 'application/json' };\n\n  switch (auth) {\n    case 'team':\n    case 'user':\n      headers.Authorization = `Bearer ${accessToken}`;\n      break;\n    case 'noauth':\n      break;\n    default:\n      throw new Error(`Unhandled auth type: ${auth}`);\n  }\n\n  if (options) {\n    if (options.selectUser) {\n      headers['Dropbox-API-Select-User'] = options.selectUser;\n    }\n    if (options.selectAdmin) {\n      headers['Dropbox-API-Select-Admin'] = options.selectAdmin;\n    }\n  }\n\n  fetchOptions.headers = headers;\n  return fetch(getBaseURL(host) + path, fetchOptions)\n    .then(res => parseBodyToType(res))\n    .then(([res, data]) => {\n      // maintaining existing API for error codes not equal to 200 range\n      if (!res.ok) {\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          error: data,\n          response: res,\n          status: res.status,\n        };\n      }\n\n      return data;\n    });\n}\n","// Auto-generated by Stone, do not modify.\nvar routes = {};\n\n/**\n * Creates an OAuth 2.0 access token from the supplied OAuth 1.0 access token.\n * @function Dropbox#authTokenFromOauth1\n * @arg {AuthTokenFromOAuth1Arg} arg - The request parameters.\n * @returns {Promise.<AuthTokenFromOAuth1Result, Error.<AuthTokenFromOAuth1Error>>}\n */\nroutes.authTokenFromOauth1 = function (arg) {\n  return this.request('auth/token/from_oauth1', arg, 'app', 'api', 'rpc');\n};\n\n/**\n * Disables the access token used to authenticate the call.\n * @function Dropbox#authTokenRevoke\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<void, Error.<void>>}\n */\nroutes.authTokenRevoke = function (arg) {\n  return this.request('auth/token/revoke', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Add property groups to a Dropbox file. See templates/add_for_user or\n * templates/add_for_team to create new templates.\n * @function Dropbox#filePropertiesPropertiesAdd\n * @arg {FilePropertiesAddPropertiesArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesAddPropertiesError>>}\n */\nroutes.filePropertiesPropertiesAdd = function (arg) {\n  return this.request('file_properties/properties/add', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Overwrite property groups associated with a file. This endpoint should be\n * used instead of properties/update when property groups are being updated via\n * a \"snapshot\" instead of via a \"delta\". In other words, this endpoint will\n * delete all omitted fields from a property group, whereas properties/update\n * will only delete fields that are explicitly marked for deletion.\n * @function Dropbox#filePropertiesPropertiesOverwrite\n * @arg {FilePropertiesOverwritePropertyGroupArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesInvalidPropertyGroupError>>}\n */\nroutes.filePropertiesPropertiesOverwrite = function (arg) {\n  return this.request('file_properties/properties/overwrite', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Permanently removes the specified property group from the file. To remove\n * specific property field key value pairs, see properties/update. To update a\n * template, see templates/update_for_user or templates/update_for_team.\n * Templates can't be removed once created.\n * @function Dropbox#filePropertiesPropertiesRemove\n * @arg {FilePropertiesRemovePropertiesArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesRemovePropertiesError>>}\n */\nroutes.filePropertiesPropertiesRemove = function (arg) {\n  return this.request('file_properties/properties/remove', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Search across property templates for particular property field values.\n * @function Dropbox#filePropertiesPropertiesSearch\n * @arg {FilePropertiesPropertiesSearchArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesPropertiesSearchResult, Error.<FilePropertiesPropertiesSearchError>>}\n */\nroutes.filePropertiesPropertiesSearch = function (arg) {\n  return this.request('file_properties/properties/search', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from properties/search, use this to paginate\n * through all search results.\n * @function Dropbox#filePropertiesPropertiesSearchContinue\n * @arg {FilePropertiesPropertiesSearchContinueArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesPropertiesSearchResult, Error.<FilePropertiesPropertiesSearchContinueError>>}\n */\nroutes.filePropertiesPropertiesSearchContinue = function (arg) {\n  return this.request('file_properties/properties/search/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Add, update or remove properties associated with the supplied file and\n * templates. This endpoint should be used instead of properties/overwrite when\n * property groups are being updated via a \"delta\" instead of via a \"snapshot\" .\n * In other words, this endpoint will not delete any omitted fields from a\n * property group, whereas properties/overwrite will delete any fields that are\n * omitted from a property group.\n * @function Dropbox#filePropertiesPropertiesUpdate\n * @arg {FilePropertiesUpdatePropertiesArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesUpdatePropertiesError>>}\n */\nroutes.filePropertiesPropertiesUpdate = function (arg) {\n  return this.request('file_properties/properties/update', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Add a template associated with a team. See properties/add to add properties\n * to a file or folder. Note: this endpoint will create team-owned templates.\n * @function Dropbox#filePropertiesTemplatesAddForTeam\n * @arg {FilePropertiesAddTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesAddTemplateResult, Error.<FilePropertiesModifyTemplateError>>}\n */\nroutes.filePropertiesTemplatesAddForTeam = function (arg) {\n  return this.request('file_properties/templates/add_for_team', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Add a template associated with a user. See properties/add to add properties\n * to a file. This endpoint can't be called on a team member or admin's behalf.\n * @function Dropbox#filePropertiesTemplatesAddForUser\n * @arg {FilePropertiesAddTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesAddTemplateResult, Error.<FilePropertiesModifyTemplateError>>}\n */\nroutes.filePropertiesTemplatesAddForUser = function (arg) {\n  return this.request('file_properties/templates/add_for_user', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get the schema for a specified template.\n * @function Dropbox#filePropertiesTemplatesGetForTeam\n * @arg {FilePropertiesGetTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesGetTemplateResult, Error.<FilePropertiesTemplateError>>}\n */\nroutes.filePropertiesTemplatesGetForTeam = function (arg) {\n  return this.request('file_properties/templates/get_for_team', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Get the schema for a specified template. This endpoint can't be called on a\n * team member or admin's behalf.\n * @function Dropbox#filePropertiesTemplatesGetForUser\n * @arg {FilePropertiesGetTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesGetTemplateResult, Error.<FilePropertiesTemplateError>>}\n */\nroutes.filePropertiesTemplatesGetForUser = function (arg) {\n  return this.request('file_properties/templates/get_for_user', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get the template identifiers for a team. To get the schema of each template\n * use templates/get_for_team.\n * @function Dropbox#filePropertiesTemplatesListForTeam\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<FilePropertiesListTemplateResult, Error.<FilePropertiesTemplateError>>}\n */\nroutes.filePropertiesTemplatesListForTeam = function (arg) {\n  return this.request('file_properties/templates/list_for_team', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Get the template identifiers for a team. To get the schema of each template\n * use templates/get_for_user. This endpoint can't be called on a team member or\n * admin's behalf.\n * @function Dropbox#filePropertiesTemplatesListForUser\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<FilePropertiesListTemplateResult, Error.<FilePropertiesTemplateError>>}\n */\nroutes.filePropertiesTemplatesListForUser = function (arg) {\n  return this.request('file_properties/templates/list_for_user', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Permanently removes the specified template created from\n * templates/add_for_user. All properties associated with the template will also\n * be removed. This action cannot be undone.\n * @function Dropbox#filePropertiesTemplatesRemoveForTeam\n * @arg {FilePropertiesRemoveTemplateArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesTemplateError>>}\n */\nroutes.filePropertiesTemplatesRemoveForTeam = function (arg) {\n  return this.request('file_properties/templates/remove_for_team', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Permanently removes the specified template created from\n * templates/add_for_user. All properties associated with the template will also\n * be removed. This action cannot be undone.\n * @function Dropbox#filePropertiesTemplatesRemoveForUser\n * @arg {FilePropertiesRemoveTemplateArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesTemplateError>>}\n */\nroutes.filePropertiesTemplatesRemoveForUser = function (arg) {\n  return this.request('file_properties/templates/remove_for_user', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Update a template associated with a team. This route can update the template\n * name, the template description and add optional properties to templates.\n * @function Dropbox#filePropertiesTemplatesUpdateForTeam\n * @arg {FilePropertiesUpdateTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesUpdateTemplateResult, Error.<FilePropertiesModifyTemplateError>>}\n */\nroutes.filePropertiesTemplatesUpdateForTeam = function (arg) {\n  return this.request('file_properties/templates/update_for_team', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Update a template associated with a user. This route can update the template\n * name, the template description and add optional properties to templates. This\n * endpoint can't be called on a team member or admin's behalf.\n * @function Dropbox#filePropertiesTemplatesUpdateForUser\n * @arg {FilePropertiesUpdateTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesUpdateTemplateResult, Error.<FilePropertiesModifyTemplateError>>}\n */\nroutes.filePropertiesTemplatesUpdateForUser = function (arg) {\n  return this.request('file_properties/templates/update_for_user', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Creates a file request for this user.\n * @function Dropbox#fileRequestsCreate\n * @arg {FileRequestsCreateFileRequestArgs} arg - The request parameters.\n * @returns {Promise.<FileRequestsFileRequest, Error.<FileRequestsCreateFileRequestError>>}\n */\nroutes.fileRequestsCreate = function (arg) {\n  return this.request('file_requests/create', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the specified file request.\n * @function Dropbox#fileRequestsGet\n * @arg {FileRequestsGetFileRequestArgs} arg - The request parameters.\n * @returns {Promise.<FileRequestsFileRequest, Error.<FileRequestsGetFileRequestError>>}\n */\nroutes.fileRequestsGet = function (arg) {\n  return this.request('file_requests/get', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns a list of file requests owned by this user. For apps with the app\n * folder permission, this will only return file requests with destinations in\n * the app folder.\n * @function Dropbox#fileRequestsList\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<FileRequestsListFileRequestsResult, Error.<FileRequestsListFileRequestsError>>}\n */\nroutes.fileRequestsList = function (arg) {\n  return this.request('file_requests/list', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Update a file request.\n * @function Dropbox#fileRequestsUpdate\n * @arg {FileRequestsUpdateFileRequestArgs} arg - The request parameters.\n * @returns {Promise.<FileRequestsFileRequest, Error.<FileRequestsUpdateFileRequestError>>}\n */\nroutes.fileRequestsUpdate = function (arg) {\n  return this.request('file_requests/update', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the metadata for a file or folder. This is an alpha endpoint\n * compatible with the properties API. Note: Metadata for the root folder is\n * unsupported.\n * @function Dropbox#filesAlphaGetMetadata\n * @deprecated\n * @arg {FilesAlphaGetMetadataArg} arg - The request parameters.\n * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesAlphaGetMetadataError>>}\n */\nroutes.filesAlphaGetMetadata = function (arg) {\n  return this.request('files/alpha/get_metadata', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Create a new file with the contents provided in the request. Note that this\n * endpoint is part of the properties API alpha and is slightly different from\n * upload. Do not use this to upload a file larger than 150 MB. Instead, create\n * an upload session with upload_session/start.\n * @function Dropbox#filesAlphaUpload\n * @deprecated\n * @arg {FilesCommitInfoWithProperties} arg - The request parameters.\n * @returns {Promise.<FilesFileMetadata, Error.<FilesUploadErrorWithProperties>>}\n */\nroutes.filesAlphaUpload = function (arg) {\n  return this.request('files/alpha/upload', arg, 'user', 'content', 'upload');\n};\n\n/**\n * Copy a file or folder to a different location in the user's Dropbox. If the\n * source path is a folder all its contents will be copied.\n * @function Dropbox#filesCopy\n * @deprecated\n * @arg {FilesRelocationArg} arg - The request parameters.\n * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesRelocationError>>}\n */\nroutes.filesCopy = function (arg) {\n  return this.request('files/copy', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Copy multiple files or folders to different locations at once in the user's\n * Dropbox. If RelocationBatchArg.allow_shared_folder is false, this route is\n * atomic. If on entry failes, the whole transaction will abort. If\n * RelocationBatchArg.allow_shared_folder is true, not atomicity is guaranteed,\n * but you will be able to copy the contents of shared folders to new locations.\n * This route will return job ID immediately and do the async copy job in\n * background. Please use copy_batch/check to check the job status.\n * @function Dropbox#filesCopyBatch\n * @arg {FilesRelocationBatchArg} arg - The request parameters.\n * @returns {Promise.<FilesRelocationBatchLaunch, Error.<void>>}\n */\nroutes.filesCopyBatch = function (arg) {\n  return this.request('files/copy_batch', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the status of an asynchronous job for copy_batch. If success, it\n * returns list of results for each entry.\n * @function Dropbox#filesCopyBatchCheck\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<FilesRelocationBatchJobStatus, Error.<AsyncPollError>>}\n */\nroutes.filesCopyBatchCheck = function (arg) {\n  return this.request('files/copy_batch/check', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get a copy reference to a file or folder. This reference string can be used\n * to save that file or folder to another user's Dropbox by passing it to\n * copy_reference/save.\n * @function Dropbox#filesCopyReferenceGet\n * @arg {FilesGetCopyReferenceArg} arg - The request parameters.\n * @returns {Promise.<FilesGetCopyReferenceResult, Error.<FilesGetCopyReferenceError>>}\n */\nroutes.filesCopyReferenceGet = function (arg) {\n  return this.request('files/copy_reference/get', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Save a copy reference returned by copy_reference/get to the user's Dropbox.\n * @function Dropbox#filesCopyReferenceSave\n * @arg {FilesSaveCopyReferenceArg} arg - The request parameters.\n * @returns {Promise.<FilesSaveCopyReferenceResult, Error.<FilesSaveCopyReferenceError>>}\n */\nroutes.filesCopyReferenceSave = function (arg) {\n  return this.request('files/copy_reference/save', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Copy a file or folder to a different location in the user's Dropbox. If the\n * source path is a folder all its contents will be copied.\n * @function Dropbox#filesCopyV2\n * @arg {FilesRelocationArg} arg - The request parameters.\n * @returns {Promise.<FilesRelocationResult, Error.<FilesRelocationError>>}\n */\nroutes.filesCopyV2 = function (arg) {\n  return this.request('files/copy_v2', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Create a folder at a given path.\n * @function Dropbox#filesCreateFolder\n * @deprecated\n * @arg {FilesCreateFolderArg} arg - The request parameters.\n * @returns {Promise.<FilesFolderMetadata, Error.<FilesCreateFolderError>>}\n */\nroutes.filesCreateFolder = function (arg) {\n  return this.request('files/create_folder', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Create a folder at a given path.\n * @function Dropbox#filesCreateFolderV2\n * @arg {FilesCreateFolderArg} arg - The request parameters.\n * @returns {Promise.<FilesCreateFolderResult, Error.<FilesCreateFolderError>>}\n */\nroutes.filesCreateFolderV2 = function (arg) {\n  return this.request('files/create_folder_v2', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Delete the file or folder at a given path. If the path is a folder, all its\n * contents will be deleted too. A successful response indicates that the file\n * or folder was deleted. The returned metadata will be the corresponding\n * FileMetadata or FolderMetadata for the item at time of deletion, and not a\n * DeletedMetadata object.\n * @function Dropbox#filesDelete\n * @deprecated\n * @arg {FilesDeleteArg} arg - The request parameters.\n * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesDeleteError>>}\n */\nroutes.filesDelete = function (arg) {\n  return this.request('files/delete', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Delete multiple files/folders at once. This route is asynchronous, which\n * returns a job ID immediately and runs the delete batch asynchronously. Use\n * delete_batch/check to check the job status.\n * @function Dropbox#filesDeleteBatch\n * @arg {FilesDeleteBatchArg} arg - The request parameters.\n * @returns {Promise.<FilesDeleteBatchLaunch, Error.<void>>}\n */\nroutes.filesDeleteBatch = function (arg) {\n  return this.request('files/delete_batch', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the status of an asynchronous job for delete_batch. If success, it\n * returns list of result for each entry.\n * @function Dropbox#filesDeleteBatchCheck\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<FilesDeleteBatchJobStatus, Error.<AsyncPollError>>}\n */\nroutes.filesDeleteBatchCheck = function (arg) {\n  return this.request('files/delete_batch/check', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Delete the file or folder at a given path. If the path is a folder, all its\n * contents will be deleted too. A successful response indicates that the file\n * or folder was deleted. The returned metadata will be the corresponding\n * FileMetadata or FolderMetadata for the item at time of deletion, and not a\n * DeletedMetadata object.\n * @function Dropbox#filesDeleteV2\n * @arg {FilesDeleteArg} arg - The request parameters.\n * @returns {Promise.<FilesDeleteResult, Error.<FilesDeleteError>>}\n */\nroutes.filesDeleteV2 = function (arg) {\n  return this.request('files/delete_v2', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Download a file from a user's Dropbox.\n * @function Dropbox#filesDownload\n * @arg {FilesDownloadArg} arg - The request parameters.\n * @returns {Promise.<FilesFileMetadata, Error.<FilesDownloadError>>}\n */\nroutes.filesDownload = function (arg) {\n  return this.request('files/download', arg, 'user', 'content', 'download');\n};\n\n/**\n * Returns the metadata for a file or folder. Note: Metadata for the root folder\n * is unsupported.\n * @function Dropbox#filesGetMetadata\n * @arg {FilesGetMetadataArg} arg - The request parameters.\n * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesGetMetadataError>>}\n */\nroutes.filesGetMetadata = function (arg) {\n  return this.request('files/get_metadata', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get a preview for a file. Currently, PDF previews are generated for files\n * with the following extensions: .ai, .doc, .docm, .docx, .eps, .odp, .odt,\n * .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf. HTML previews are generated for\n * files with the following extensions: .csv, .ods, .xls, .xlsm, .xlsx. Other\n * formats will return an unsupported extension error.\n * @function Dropbox#filesGetPreview\n * @arg {FilesPreviewArg} arg - The request parameters.\n * @returns {Promise.<FilesFileMetadata, Error.<FilesPreviewError>>}\n */\nroutes.filesGetPreview = function (arg) {\n  return this.request('files/get_preview', arg, 'user', 'content', 'download');\n};\n\n/**\n * Get a temporary link to stream content of a file. This link will expire in\n * four hours and afterwards you will get 410 Gone. Content-Type of the link is\n * determined automatically by the file's mime type.\n * @function Dropbox#filesGetTemporaryLink\n * @arg {FilesGetTemporaryLinkArg} arg - The request parameters.\n * @returns {Promise.<FilesGetTemporaryLinkResult, Error.<FilesGetTemporaryLinkError>>}\n */\nroutes.filesGetTemporaryLink = function (arg) {\n  return this.request('files/get_temporary_link', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get a thumbnail for an image. This method currently supports files with the\n * following file extensions: jpg, jpeg, png, tiff, tif, gif and bmp. Photos\n * that are larger than 20MB in size won't be converted to a thumbnail.\n * @function Dropbox#filesGetThumbnail\n * @arg {FilesThumbnailArg} arg - The request parameters.\n * @returns {Promise.<FilesFileMetadata, Error.<FilesThumbnailError>>}\n */\nroutes.filesGetThumbnail = function (arg) {\n  return this.request('files/get_thumbnail', arg, 'user', 'content', 'download');\n};\n\n/**\n * Get thumbnails for a list of images. We allow up to 25 thumbnails in a single\n * batch. This method currently supports files with the following file\n * extensions: jpg, jpeg, png, tiff, tif, gif and bmp. Photos that are larger\n * than 20MB in size won't be converted to a thumbnail.\n * @function Dropbox#filesGetThumbnailBatch\n * @arg {FilesGetThumbnailBatchArg} arg - The request parameters.\n * @returns {Promise.<FilesGetThumbnailBatchResult, Error.<FilesGetThumbnailBatchError>>}\n */\nroutes.filesGetThumbnailBatch = function (arg) {\n  return this.request('files/get_thumbnail_batch', arg, 'user', 'content', 'rpc');\n};\n\n/**\n * Starts returning the contents of a folder. If the result's\n * ListFolderResult.has_more field is true, call list_folder/continue with the\n * returned ListFolderResult.cursor to retrieve more entries. If you're using\n * ListFolderArg.recursive set to true to keep a local cache of the contents of\n * a Dropbox account, iterate through each entry in order and process them as\n * follows to keep your local state in sync: For each FileMetadata, store the\n * new entry at the given path in your local state. If the required parent\n * folders don't exist yet, create them. If there's already something else at\n * the given path, replace it and remove all its children. For each\n * FolderMetadata, store the new entry at the given path in your local state. If\n * the required parent folders don't exist yet, create them. If there's already\n * something else at the given path, replace it but leave the children as they\n * are. Check the new entry's FolderSharingInfo.read_only and set all its\n * children's read-only statuses to match. For each DeletedMetadata, if your\n * local state has something at the given path, remove it and all its children.\n * If there's nothing at the given path, ignore this entry. Note:\n * auth.RateLimitError may be returned if multiple list_folder or\n * list_folder/continue calls with same parameters are made simultaneously by\n * same API app for same user. If your app implements retry logic, please hold\n * off the retry until the previous request finishes.\n * @function Dropbox#filesListFolder\n * @arg {FilesListFolderArg} arg - The request parameters.\n * @returns {Promise.<FilesListFolderResult, Error.<FilesListFolderError>>}\n */\nroutes.filesListFolder = function (arg) {\n  return this.request('files/list_folder', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from list_folder, use this to paginate\n * through all files and retrieve updates to the folder, following the same\n * rules as documented for list_folder.\n * @function Dropbox#filesListFolderContinue\n * @arg {FilesListFolderContinueArg} arg - The request parameters.\n * @returns {Promise.<FilesListFolderResult, Error.<FilesListFolderContinueError>>}\n */\nroutes.filesListFolderContinue = function (arg) {\n  return this.request('files/list_folder/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * A way to quickly get a cursor for the folder's state. Unlike list_folder,\n * list_folder/get_latest_cursor doesn't return any entries. This endpoint is\n * for app which only needs to know about new files and modifications and\n * doesn't need to know about files that already exist in Dropbox.\n * @function Dropbox#filesListFolderGetLatestCursor\n * @arg {FilesListFolderArg} arg - The request parameters.\n * @returns {Promise.<FilesListFolderGetLatestCursorResult, Error.<FilesListFolderError>>}\n */\nroutes.filesListFolderGetLatestCursor = function (arg) {\n  return this.request('files/list_folder/get_latest_cursor', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * A longpoll endpoint to wait for changes on an account. In conjunction with\n * list_folder/continue, this call gives you a low-latency way to monitor an\n * account for file changes. The connection will block until there are changes\n * available or a timeout occurs. This endpoint is useful mostly for client-side\n * apps. If you're looking for server-side notifications, check out our webhooks\n * documentation https://www.dropbox.com/developers/reference/webhooks.\n * @function Dropbox#filesListFolderLongpoll\n * @arg {FilesListFolderLongpollArg} arg - The request parameters.\n * @returns {Promise.<FilesListFolderLongpollResult, Error.<FilesListFolderLongpollError>>}\n */\nroutes.filesListFolderLongpoll = function (arg) {\n  return this.request('files/list_folder/longpoll', arg, 'noauth', 'notify', 'rpc');\n};\n\n/**\n * Returns revisions for files based on a file path or a file id. The file path\n * or file id is identified from the latest file entry at the given file path or\n * id. This end point allows your app to query either by file path or file id by\n * setting the mode parameter appropriately. In the ListRevisionsMode.path\n * (default) mode, all revisions at the same file path as the latest file entry\n * are returned. If revisions with the same file id are desired, then mode must\n * be set to ListRevisionsMode.id. The ListRevisionsMode.id mode is useful to\n * retrieve revisions for a given file across moves or renames.\n * @function Dropbox#filesListRevisions\n * @arg {FilesListRevisionsArg} arg - The request parameters.\n * @returns {Promise.<FilesListRevisionsResult, Error.<FilesListRevisionsError>>}\n */\nroutes.filesListRevisions = function (arg) {\n  return this.request('files/list_revisions', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Move a file or folder to a different location in the user's Dropbox. If the\n * source path is a folder all its contents will be moved.\n * @function Dropbox#filesMove\n * @deprecated\n * @arg {FilesRelocationArg} arg - The request parameters.\n * @returns {Promise.<(FilesFileMetadata|FilesFolderMetadata|FilesDeletedMetadata), Error.<FilesRelocationError>>}\n */\nroutes.filesMove = function (arg) {\n  return this.request('files/move', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Move multiple files or folders to different locations at once in the user's\n * Dropbox. This route is 'all or nothing', which means if one entry fails, the\n * whole transaction will abort. This route will return job ID immediately and\n * do the async moving job in background. Please use move_batch/check to check\n * the job status.\n * @function Dropbox#filesMoveBatch\n * @arg {FilesRelocationBatchArg} arg - The request parameters.\n * @returns {Promise.<FilesRelocationBatchLaunch, Error.<void>>}\n */\nroutes.filesMoveBatch = function (arg) {\n  return this.request('files/move_batch', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the status of an asynchronous job for move_batch. If success, it\n * returns list of results for each entry.\n * @function Dropbox#filesMoveBatchCheck\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<FilesRelocationBatchJobStatus, Error.<AsyncPollError>>}\n */\nroutes.filesMoveBatchCheck = function (arg) {\n  return this.request('files/move_batch/check', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Move a file or folder to a different location in the user's Dropbox. If the\n * source path is a folder all its contents will be moved.\n * @function Dropbox#filesMoveV2\n * @arg {FilesRelocationArg} arg - The request parameters.\n * @returns {Promise.<FilesRelocationResult, Error.<FilesRelocationError>>}\n */\nroutes.filesMoveV2 = function (arg) {\n  return this.request('files/move_v2', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Permanently delete the file or folder at a given path (see\n * https://www.dropbox.com/en/help/40). Note: This endpoint is only available\n * for Dropbox Business apps.\n * @function Dropbox#filesPermanentlyDelete\n * @arg {FilesDeleteArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilesDeleteError>>}\n */\nroutes.filesPermanentlyDelete = function (arg) {\n  return this.request('files/permanently_delete', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * @function Dropbox#filesPropertiesAdd\n * @deprecated\n * @arg {FilePropertiesAddPropertiesArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesAddPropertiesError>>}\n */\nroutes.filesPropertiesAdd = function (arg) {\n  return this.request('files/properties/add', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * @function Dropbox#filesPropertiesOverwrite\n * @deprecated\n * @arg {FilePropertiesOverwritePropertyGroupArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesInvalidPropertyGroupError>>}\n */\nroutes.filesPropertiesOverwrite = function (arg) {\n  return this.request('files/properties/overwrite', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * @function Dropbox#filesPropertiesRemove\n * @deprecated\n * @arg {FilePropertiesRemovePropertiesArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesRemovePropertiesError>>}\n */\nroutes.filesPropertiesRemove = function (arg) {\n  return this.request('files/properties/remove', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * @function Dropbox#filesPropertiesTemplateGet\n * @deprecated\n * @arg {FilePropertiesGetTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesGetTemplateResult, Error.<FilePropertiesTemplateError>>}\n */\nroutes.filesPropertiesTemplateGet = function (arg) {\n  return this.request('files/properties/template/get', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * @function Dropbox#filesPropertiesTemplateList\n * @deprecated\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<FilePropertiesListTemplateResult, Error.<FilePropertiesTemplateError>>}\n */\nroutes.filesPropertiesTemplateList = function (arg) {\n  return this.request('files/properties/template/list', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * @function Dropbox#filesPropertiesUpdate\n * @deprecated\n * @arg {FilePropertiesUpdatePropertiesArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilePropertiesUpdatePropertiesError>>}\n */\nroutes.filesPropertiesUpdate = function (arg) {\n  return this.request('files/properties/update', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Restore a file to a specific revision.\n * @function Dropbox#filesRestore\n * @arg {FilesRestoreArg} arg - The request parameters.\n * @returns {Promise.<FilesFileMetadata, Error.<FilesRestoreError>>}\n */\nroutes.filesRestore = function (arg) {\n  return this.request('files/restore', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Save a specified URL into a file in user's Dropbox. If the given path already\n * exists, the file will be renamed to avoid the conflict (e.g. myfile (1).txt).\n * @function Dropbox#filesSaveUrl\n * @arg {FilesSaveUrlArg} arg - The request parameters.\n * @returns {Promise.<FilesSaveUrlResult, Error.<FilesSaveUrlError>>}\n */\nroutes.filesSaveUrl = function (arg) {\n  return this.request('files/save_url', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Check the status of a save_url job.\n * @function Dropbox#filesSaveUrlCheckJobStatus\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<FilesSaveUrlJobStatus, Error.<AsyncPollError>>}\n */\nroutes.filesSaveUrlCheckJobStatus = function (arg) {\n  return this.request('files/save_url/check_job_status', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Searches for files and folders. Note: Recent changes may not immediately be\n * reflected in search results due to a short delay in indexing.\n * @function Dropbox#filesSearch\n * @arg {FilesSearchArg} arg - The request parameters.\n * @returns {Promise.<FilesSearchResult, Error.<FilesSearchError>>}\n */\nroutes.filesSearch = function (arg) {\n  return this.request('files/search', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Create a new file with the contents provided in the request. Do not use this\n * to upload a file larger than 150 MB. Instead, create an upload session with\n * upload_session/start.\n * @function Dropbox#filesUpload\n * @arg {FilesCommitInfo} arg - The request parameters.\n * @returns {Promise.<FilesFileMetadata, Error.<FilesUploadError>>}\n */\nroutes.filesUpload = function (arg) {\n  return this.request('files/upload', arg, 'user', 'content', 'upload');\n};\n\n/**\n * Append more data to an upload session. A single request should not upload\n * more than 150 MB.\n * @function Dropbox#filesUploadSessionAppend\n * @deprecated\n * @arg {FilesUploadSessionCursor} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilesUploadSessionLookupError>>}\n */\nroutes.filesUploadSessionAppend = function (arg) {\n  return this.request('files/upload_session/append', arg, 'user', 'content', 'upload');\n};\n\n/**\n * Append more data to an upload session. When the parameter close is set, this\n * call will close the session. A single request should not upload more than 150\n * MB.\n * @function Dropbox#filesUploadSessionAppendV2\n * @arg {FilesUploadSessionAppendArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<FilesUploadSessionLookupError>>}\n */\nroutes.filesUploadSessionAppendV2 = function (arg) {\n  return this.request('files/upload_session/append_v2', arg, 'user', 'content', 'upload');\n};\n\n/**\n * Finish an upload session and save the uploaded data to the given file path. A\n * single request should not upload more than 150 MB.\n * @function Dropbox#filesUploadSessionFinish\n * @arg {FilesUploadSessionFinishArg} arg - The request parameters.\n * @returns {Promise.<FilesFileMetadata, Error.<FilesUploadSessionFinishError>>}\n */\nroutes.filesUploadSessionFinish = function (arg) {\n  return this.request('files/upload_session/finish', arg, 'user', 'content', 'upload');\n};\n\n/**\n * This route helps you commit many files at once into a user's Dropbox. Use\n * upload_session/start and upload_session/append_v2 to upload file contents. We\n * recommend uploading many files in parallel to increase throughput. Once the\n * file contents have been uploaded, rather than calling upload_session/finish,\n * use this route to finish all your upload sessions in a single request.\n * UploadSessionStartArg.close or UploadSessionAppendArg.close needs to be true\n * for the last upload_session/start or upload_session/append_v2 call. This\n * route will return a job_id immediately and do the async commit job in\n * background. Use upload_session/finish_batch/check to check the job status.\n * For the same account, this route should be executed serially. That means you\n * should not start the next job before current job finishes. We allow up to\n * 1000 entries in a single request.\n * @function Dropbox#filesUploadSessionFinishBatch\n * @arg {FilesUploadSessionFinishBatchArg} arg - The request parameters.\n * @returns {Promise.<FilesUploadSessionFinishBatchLaunch, Error.<void>>}\n */\nroutes.filesUploadSessionFinishBatch = function (arg) {\n  return this.request('files/upload_session/finish_batch', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the status of an asynchronous job for upload_session/finish_batch. If\n * success, it returns list of result for each entry.\n * @function Dropbox#filesUploadSessionFinishBatchCheck\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<FilesUploadSessionFinishBatchJobStatus, Error.<AsyncPollError>>}\n */\nroutes.filesUploadSessionFinishBatchCheck = function (arg) {\n  return this.request('files/upload_session/finish_batch/check', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Upload sessions allow you to upload a single file in one or more requests,\n * for example where the size of the file is greater than 150 MB.  This call\n * starts a new upload session with the given data. You can then use\n * upload_session/append_v2 to add more data and upload_session/finish to save\n * all the data to a file in Dropbox. A single request should not upload more\n * than 150 MB. An upload session can be used for a maximum of 48 hours.\n * Attempting to use an UploadSessionStartResult.session_id with\n * upload_session/append_v2 or upload_session/finish more than 48 hours after\n * its creation will return a UploadSessionLookupError.not_found.\n * @function Dropbox#filesUploadSessionStart\n * @arg {FilesUploadSessionStartArg} arg - The request parameters.\n * @returns {Promise.<FilesUploadSessionStartResult, Error.<void>>}\n */\nroutes.filesUploadSessionStart = function (arg) {\n  return this.request('files/upload_session/start', arg, 'user', 'content', 'upload');\n};\n\n/**\n * Marks the given Paper doc as archived. Note: This action can be performed or\n * undone by anyone with edit permissions to the doc.\n * @function Dropbox#paperDocsArchive\n * @arg {PaperRefPaperDoc} arg - The request parameters.\n * @returns {Promise.<void, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsArchive = function (arg) {\n  return this.request('paper/docs/archive', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Creates a new Paper doc with the provided content.\n * @function Dropbox#paperDocsCreate\n * @arg {PaperPaperDocCreateArgs} arg - The request parameters.\n * @returns {Promise.<PaperPaperDocCreateUpdateResult, Error.<PaperPaperDocCreateError>>}\n */\nroutes.paperDocsCreate = function (arg) {\n  return this.request('paper/docs/create', arg, 'user', 'api', 'upload');\n};\n\n/**\n * Exports and downloads Paper doc either as HTML or markdown.\n * @function Dropbox#paperDocsDownload\n * @arg {PaperPaperDocExport} arg - The request parameters.\n * @returns {Promise.<PaperPaperDocExportResult, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsDownload = function (arg) {\n  return this.request('paper/docs/download', arg, 'user', 'api', 'download');\n};\n\n/**\n * Lists the users who are explicitly invited to the Paper folder in which the\n * Paper doc is contained. For private folders all users (including owner)\n * shared on the folder are listed and for team folders all non-team users\n * shared on the folder are returned.\n * @function Dropbox#paperDocsFolderUsersList\n * @arg {PaperListUsersOnFolderArgs} arg - The request parameters.\n * @returns {Promise.<PaperListUsersOnFolderResponse, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsFolderUsersList = function (arg) {\n  return this.request('paper/docs/folder_users/list', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from docs/folder_users/list, use this to\n * paginate through all users on the Paper folder.\n * @function Dropbox#paperDocsFolderUsersListContinue\n * @arg {PaperListUsersOnFolderContinueArgs} arg - The request parameters.\n * @returns {Promise.<PaperListUsersOnFolderResponse, Error.<PaperListUsersCursorError>>}\n */\nroutes.paperDocsFolderUsersListContinue = function (arg) {\n  return this.request('paper/docs/folder_users/list/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Retrieves folder information for the given Paper doc. This includes:   -\n * folder sharing policy; permissions for subfolders are set by the top-level\n * folder.   - full 'filepath', i.e. the list of folders (both folderId and\n * folderName) from the root folder to the folder directly containing the Paper\n * doc.  Note: If the Paper doc is not in any folder (aka unfiled) the response\n * will be empty.\n * @function Dropbox#paperDocsGetFolderInfo\n * @arg {PaperRefPaperDoc} arg - The request parameters.\n * @returns {Promise.<PaperFoldersContainingPaperDoc, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsGetFolderInfo = function (arg) {\n  return this.request('paper/docs/get_folder_info', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Return the list of all Paper docs according to the argument specifications.\n * To iterate over through the full pagination, pass the cursor to\n * docs/list/continue.\n * @function Dropbox#paperDocsList\n * @arg {PaperListPaperDocsArgs} arg - The request parameters.\n * @returns {Promise.<PaperListPaperDocsResponse, Error.<void>>}\n */\nroutes.paperDocsList = function (arg) {\n  return this.request('paper/docs/list', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from docs/list, use this to paginate through\n * all Paper doc.\n * @function Dropbox#paperDocsListContinue\n * @arg {PaperListPaperDocsContinueArgs} arg - The request parameters.\n * @returns {Promise.<PaperListPaperDocsResponse, Error.<PaperListDocsCursorError>>}\n */\nroutes.paperDocsListContinue = function (arg) {\n  return this.request('paper/docs/list/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Permanently deletes the given Paper doc. This operation is final as the doc\n * cannot be recovered.  Note: This action can be performed only by the doc\n * owner.\n * @function Dropbox#paperDocsPermanentlyDelete\n * @arg {PaperRefPaperDoc} arg - The request parameters.\n * @returns {Promise.<void, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsPermanentlyDelete = function (arg) {\n  return this.request('paper/docs/permanently_delete', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Gets the default sharing policy for the given Paper doc.\n * @function Dropbox#paperDocsSharingPolicyGet\n * @arg {PaperRefPaperDoc} arg - The request parameters.\n * @returns {Promise.<PaperSharingPolicy, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsSharingPolicyGet = function (arg) {\n  return this.request('paper/docs/sharing_policy/get', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Sets the default sharing policy for the given Paper doc. The default\n * 'team_sharing_policy' can be changed only by teams, omit this field for\n * personal accounts.  Note: 'public_sharing_policy' cannot be set to the value\n * 'disabled' because this setting can be changed only via the team admin\n * console.\n * @function Dropbox#paperDocsSharingPolicySet\n * @arg {PaperPaperDocSharingPolicy} arg - The request parameters.\n * @returns {Promise.<void, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsSharingPolicySet = function (arg) {\n  return this.request('paper/docs/sharing_policy/set', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Updates an existing Paper doc with the provided content.\n * @function Dropbox#paperDocsUpdate\n * @arg {PaperPaperDocUpdateArgs} arg - The request parameters.\n * @returns {Promise.<PaperPaperDocCreateUpdateResult, Error.<PaperPaperDocUpdateError>>}\n */\nroutes.paperDocsUpdate = function (arg) {\n  return this.request('paper/docs/update', arg, 'user', 'api', 'upload');\n};\n\n/**\n * Allows an owner or editor to add users to a Paper doc or change their\n * permissions using their email address or Dropbox account ID.  Note: The Doc\n * owner's permissions cannot be changed.\n * @function Dropbox#paperDocsUsersAdd\n * @arg {PaperAddPaperDocUser} arg - The request parameters.\n * @returns {Promise.<Array.<PaperAddPaperDocUserMemberResult>, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsUsersAdd = function (arg) {\n  return this.request('paper/docs/users/add', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Lists all users who visited the Paper doc or users with explicit access. This\n * call excludes users who have been removed. The list is sorted by the date of\n * the visit or the share date. The list will include both users, the explicitly\n * shared ones as well as those who came in using the Paper url link.\n * @function Dropbox#paperDocsUsersList\n * @arg {PaperListUsersOnPaperDocArgs} arg - The request parameters.\n * @returns {Promise.<PaperListUsersOnPaperDocResponse, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsUsersList = function (arg) {\n  return this.request('paper/docs/users/list', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from docs/users/list, use this to paginate\n * through all users on the Paper doc.\n * @function Dropbox#paperDocsUsersListContinue\n * @arg {PaperListUsersOnPaperDocContinueArgs} arg - The request parameters.\n * @returns {Promise.<PaperListUsersOnPaperDocResponse, Error.<PaperListUsersCursorError>>}\n */\nroutes.paperDocsUsersListContinue = function (arg) {\n  return this.request('paper/docs/users/list/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Allows an owner or editor to remove users from a Paper doc using their email\n * address or Dropbox account ID.  Note: Doc owner cannot be removed.\n * @function Dropbox#paperDocsUsersRemove\n * @arg {PaperRemovePaperDocUser} arg - The request parameters.\n * @returns {Promise.<void, Error.<PaperDocLookupError>>}\n */\nroutes.paperDocsUsersRemove = function (arg) {\n  return this.request('paper/docs/users/remove', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Adds specified members to a file.\n * @function Dropbox#sharingAddFileMember\n * @arg {SharingAddFileMemberArgs} arg - The request parameters.\n * @returns {Promise.<Array.<SharingFileMemberActionResult>, Error.<SharingAddFileMemberError>>}\n */\nroutes.sharingAddFileMember = function (arg) {\n  return this.request('sharing/add_file_member', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Allows an owner or editor (if the ACL update policy allows) of a shared\n * folder to add another member. For the new member to get access to all the\n * functionality for this folder, you will need to call mount_folder on their\n * behalf. Apps must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingAddFolderMember\n * @arg {SharingAddFolderMemberArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<SharingAddFolderMemberError>>}\n */\nroutes.sharingAddFolderMember = function (arg) {\n  return this.request('sharing/add_folder_member', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Identical to update_file_member but with less information returned.\n * @function Dropbox#sharingChangeFileMemberAccess\n * @deprecated\n * @arg {SharingChangeFileMemberAccessArgs} arg - The request parameters.\n * @returns {Promise.<SharingFileMemberActionResult, Error.<SharingFileMemberActionError>>}\n */\nroutes.sharingChangeFileMemberAccess = function (arg) {\n  return this.request('sharing/change_file_member_access', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the status of an asynchronous job. Apps must have full Dropbox access\n * to use this endpoint.\n * @function Dropbox#sharingCheckJobStatus\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<SharingJobStatus, Error.<AsyncPollError>>}\n */\nroutes.sharingCheckJobStatus = function (arg) {\n  return this.request('sharing/check_job_status', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the status of an asynchronous job for sharing a folder. Apps must\n * have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingCheckRemoveMemberJobStatus\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<SharingRemoveMemberJobStatus, Error.<AsyncPollError>>}\n */\nroutes.sharingCheckRemoveMemberJobStatus = function (arg) {\n  return this.request('sharing/check_remove_member_job_status', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns the status of an asynchronous job for sharing a folder. Apps must\n * have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingCheckShareJobStatus\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<SharingShareFolderJobStatus, Error.<AsyncPollError>>}\n */\nroutes.sharingCheckShareJobStatus = function (arg) {\n  return this.request('sharing/check_share_job_status', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Create a shared link. If a shared link already exists for the given path,\n * that link is returned. Note that in the returned PathLinkMetadata, the\n * PathLinkMetadata.url field is the shortened URL if\n * CreateSharedLinkArg.short_url argument is set to true. Previously, it was\n * technically possible to break a shared link by moving or renaming the\n * corresponding file or folder. In the future, this will no longer be the case,\n * so your app shouldn't rely on this behavior. Instead, if your app needs to\n * revoke a shared link, use revoke_shared_link.\n * @function Dropbox#sharingCreateSharedLink\n * @deprecated\n * @arg {SharingCreateSharedLinkArg} arg - The request parameters.\n * @returns {Promise.<SharingPathLinkMetadata, Error.<SharingCreateSharedLinkError>>}\n */\nroutes.sharingCreateSharedLink = function (arg) {\n  return this.request('sharing/create_shared_link', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Create a shared link with custom settings. If no settings are given then the\n * default visibility is RequestedVisibility.public (The resolved visibility,\n * though, may depend on other aspects such as team and shared folder settings).\n * @function Dropbox#sharingCreateSharedLinkWithSettings\n * @arg {SharingCreateSharedLinkWithSettingsArg} arg - The request parameters.\n * @returns {Promise.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata), Error.<SharingCreateSharedLinkWithSettingsError>>}\n */\nroutes.sharingCreateSharedLinkWithSettings = function (arg) {\n  return this.request('sharing/create_shared_link_with_settings', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns shared file metadata.\n * @function Dropbox#sharingGetFileMetadata\n * @arg {SharingGetFileMetadataArg} arg - The request parameters.\n * @returns {Promise.<SharingSharedFileMetadata, Error.<SharingGetFileMetadataError>>}\n */\nroutes.sharingGetFileMetadata = function (arg) {\n  return this.request('sharing/get_file_metadata', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns shared file metadata.\n * @function Dropbox#sharingGetFileMetadataBatch\n * @arg {SharingGetFileMetadataBatchArg} arg - The request parameters.\n * @returns {Promise.<Array.<SharingGetFileMetadataBatchResult>, Error.<SharingSharingUserError>>}\n */\nroutes.sharingGetFileMetadataBatch = function (arg) {\n  return this.request('sharing/get_file_metadata/batch', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns shared folder metadata by its folder ID. Apps must have full Dropbox\n * access to use this endpoint.\n * @function Dropbox#sharingGetFolderMetadata\n * @arg {SharingGetMetadataArgs} arg - The request parameters.\n * @returns {Promise.<SharingSharedFolderMetadata, Error.<SharingSharedFolderAccessError>>}\n */\nroutes.sharingGetFolderMetadata = function (arg) {\n  return this.request('sharing/get_folder_metadata', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Download the shared link's file from a user's Dropbox.\n * @function Dropbox#sharingGetSharedLinkFile\n * @arg {Object} arg - The request parameters.\n * @returns {Promise.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata), Error.<SharingGetSharedLinkFileError>>}\n */\nroutes.sharingGetSharedLinkFile = function (arg) {\n  return this.request('sharing/get_shared_link_file', arg, 'user', 'content', 'download');\n};\n\n/**\n * Get the shared link's metadata.\n * @function Dropbox#sharingGetSharedLinkMetadata\n * @arg {SharingGetSharedLinkMetadataArg} arg - The request parameters.\n * @returns {Promise.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata), Error.<SharingSharedLinkError>>}\n */\nroutes.sharingGetSharedLinkMetadata = function (arg) {\n  return this.request('sharing/get_shared_link_metadata', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns a list of LinkMetadata objects for this user, including collection\n * links. If no path is given, returns a list of all shared links for the\n * current user, including collection links, up to a maximum of 1000 links. If a\n * non-empty path is given, returns a list of all shared links that allow access\n * to the given path.  Collection links are never returned in this case. Note\n * that the url field in the response is never the shortened URL.\n * @function Dropbox#sharingGetSharedLinks\n * @deprecated\n * @arg {SharingGetSharedLinksArg} arg - The request parameters.\n * @returns {Promise.<SharingGetSharedLinksResult, Error.<SharingGetSharedLinksError>>}\n */\nroutes.sharingGetSharedLinks = function (arg) {\n  return this.request('sharing/get_shared_links', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Use to obtain the members who have been invited to a file, both inherited and\n * uninherited members.\n * @function Dropbox#sharingListFileMembers\n * @arg {SharingListFileMembersArg} arg - The request parameters.\n * @returns {Promise.<SharingSharedFileMembers, Error.<SharingListFileMembersError>>}\n */\nroutes.sharingListFileMembers = function (arg) {\n  return this.request('sharing/list_file_members', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get members of multiple files at once. The arguments to this route are more\n * limited, and the limit on query result size per file is more strict. To\n * customize the results more, use the individual file endpoint. Inherited users\n * and groups are not included in the result, and permissions are not returned\n * for this endpoint.\n * @function Dropbox#sharingListFileMembersBatch\n * @arg {SharingListFileMembersBatchArg} arg - The request parameters.\n * @returns {Promise.<Array.<SharingListFileMembersBatchResult>, Error.<SharingSharingUserError>>}\n */\nroutes.sharingListFileMembersBatch = function (arg) {\n  return this.request('sharing/list_file_members/batch', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from list_file_members or\n * list_file_members/batch, use this to paginate through all shared file\n * members.\n * @function Dropbox#sharingListFileMembersContinue\n * @arg {SharingListFileMembersContinueArg} arg - The request parameters.\n * @returns {Promise.<SharingSharedFileMembers, Error.<SharingListFileMembersContinueError>>}\n */\nroutes.sharingListFileMembersContinue = function (arg) {\n  return this.request('sharing/list_file_members/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns shared folder membership by its folder ID. Apps must have full\n * Dropbox access to use this endpoint.\n * @function Dropbox#sharingListFolderMembers\n * @arg {SharingListFolderMembersArgs} arg - The request parameters.\n * @returns {Promise.<SharingSharedFolderMembers, Error.<SharingSharedFolderAccessError>>}\n */\nroutes.sharingListFolderMembers = function (arg) {\n  return this.request('sharing/list_folder_members', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from list_folder_members, use this to\n * paginate through all shared folder members. Apps must have full Dropbox\n * access to use this endpoint.\n * @function Dropbox#sharingListFolderMembersContinue\n * @arg {SharingListFolderMembersContinueArg} arg - The request parameters.\n * @returns {Promise.<SharingSharedFolderMembers, Error.<SharingListFolderMembersContinueError>>}\n */\nroutes.sharingListFolderMembersContinue = function (arg) {\n  return this.request('sharing/list_folder_members/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Return the list of all shared folders the current user has access to. Apps\n * must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingListFolders\n * @arg {SharingListFoldersArgs} arg - The request parameters.\n * @returns {Promise.<SharingListFoldersResult, Error.<void>>}\n */\nroutes.sharingListFolders = function (arg) {\n  return this.request('sharing/list_folders', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from list_folders, use this to paginate\n * through all shared folders. The cursor must come from a previous call to\n * list_folders or list_folders/continue. Apps must have full Dropbox access to\n * use this endpoint.\n * @function Dropbox#sharingListFoldersContinue\n * @arg {SharingListFoldersContinueArg} arg - The request parameters.\n * @returns {Promise.<SharingListFoldersResult, Error.<SharingListFoldersContinueError>>}\n */\nroutes.sharingListFoldersContinue = function (arg) {\n  return this.request('sharing/list_folders/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Return the list of all shared folders the current user can mount or unmount.\n * Apps must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingListMountableFolders\n * @arg {SharingListFoldersArgs} arg - The request parameters.\n * @returns {Promise.<SharingListFoldersResult, Error.<void>>}\n */\nroutes.sharingListMountableFolders = function (arg) {\n  return this.request('sharing/list_mountable_folders', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from list_mountable_folders, use this to\n * paginate through all mountable shared folders. The cursor must come from a\n * previous call to list_mountable_folders or list_mountable_folders/continue.\n * Apps must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingListMountableFoldersContinue\n * @arg {SharingListFoldersContinueArg} arg - The request parameters.\n * @returns {Promise.<SharingListFoldersResult, Error.<SharingListFoldersContinueError>>}\n */\nroutes.sharingListMountableFoldersContinue = function (arg) {\n  return this.request('sharing/list_mountable_folders/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Returns a list of all files shared with current user.  Does not include files\n * the user has received via shared folders, and does  not include unclaimed\n * invitations.\n * @function Dropbox#sharingListReceivedFiles\n * @arg {SharingListFilesArg} arg - The request parameters.\n * @returns {Promise.<SharingListFilesResult, Error.<SharingSharingUserError>>}\n */\nroutes.sharingListReceivedFiles = function (arg) {\n  return this.request('sharing/list_received_files', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get more results with a cursor from list_received_files.\n * @function Dropbox#sharingListReceivedFilesContinue\n * @arg {SharingListFilesContinueArg} arg - The request parameters.\n * @returns {Promise.<SharingListFilesResult, Error.<SharingListFilesContinueError>>}\n */\nroutes.sharingListReceivedFilesContinue = function (arg) {\n  return this.request('sharing/list_received_files/continue', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * List shared links of this user. If no path is given, returns a list of all\n * shared links for the current user. If a non-empty path is given, returns a\n * list of all shared links that allow access to the given path - direct links\n * to the given path and links to parent folders of the given path. Links to\n * parent folders can be suppressed by setting direct_only to true.\n * @function Dropbox#sharingListSharedLinks\n * @arg {SharingListSharedLinksArg} arg - The request parameters.\n * @returns {Promise.<SharingListSharedLinksResult, Error.<SharingListSharedLinksError>>}\n */\nroutes.sharingListSharedLinks = function (arg) {\n  return this.request('sharing/list_shared_links', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Modify the shared link's settings. If the requested visibility conflict with\n * the shared links policy of the team or the shared folder (in case the linked\n * file is part of a shared folder) then the LinkPermissions.resolved_visibility\n * of the returned SharedLinkMetadata will reflect the actual visibility of the\n * shared link and the LinkPermissions.requested_visibility will reflect the\n * requested visibility.\n * @function Dropbox#sharingModifySharedLinkSettings\n * @arg {SharingModifySharedLinkSettingsArgs} arg - The request parameters.\n * @returns {Promise.<(SharingFileLinkMetadata|SharingFolderLinkMetadata|SharingSharedLinkMetadata), Error.<SharingModifySharedLinkSettingsError>>}\n */\nroutes.sharingModifySharedLinkSettings = function (arg) {\n  return this.request('sharing/modify_shared_link_settings', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * The current user mounts the designated folder. Mount a shared folder for a\n * user after they have been added as a member. Once mounted, the shared folder\n * will appear in their Dropbox. Apps must have full Dropbox access to use this\n * endpoint.\n * @function Dropbox#sharingMountFolder\n * @arg {SharingMountFolderArg} arg - The request parameters.\n * @returns {Promise.<SharingSharedFolderMetadata, Error.<SharingMountFolderError>>}\n */\nroutes.sharingMountFolder = function (arg) {\n  return this.request('sharing/mount_folder', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * The current user relinquishes their membership in the designated file. Note\n * that the current user may still have inherited access to this file through\n * the parent folder. Apps must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingRelinquishFileMembership\n * @arg {SharingRelinquishFileMembershipArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<SharingRelinquishFileMembershipError>>}\n */\nroutes.sharingRelinquishFileMembership = function (arg) {\n  return this.request('sharing/relinquish_file_membership', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * The current user relinquishes their membership in the designated shared\n * folder and will no longer have access to the folder.  A folder owner cannot\n * relinquish membership in their own folder. This will run synchronously if\n * leave_a_copy is false, and asynchronously if leave_a_copy is true. Apps must\n * have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingRelinquishFolderMembership\n * @arg {SharingRelinquishFolderMembershipArg} arg - The request parameters.\n * @returns {Promise.<AsyncLaunchEmptyResult, Error.<SharingRelinquishFolderMembershipError>>}\n */\nroutes.sharingRelinquishFolderMembership = function (arg) {\n  return this.request('sharing/relinquish_folder_membership', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Identical to remove_file_member_2 but with less information returned.\n * @function Dropbox#sharingRemoveFileMember\n * @deprecated\n * @arg {SharingRemoveFileMemberArg} arg - The request parameters.\n * @returns {Promise.<SharingFileMemberActionIndividualResult, Error.<SharingRemoveFileMemberError>>}\n */\nroutes.sharingRemoveFileMember = function (arg) {\n  return this.request('sharing/remove_file_member', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Removes a specified member from the file.\n * @function Dropbox#sharingRemoveFileMember2\n * @arg {SharingRemoveFileMemberArg} arg - The request parameters.\n * @returns {Promise.<SharingFileMemberRemoveActionResult, Error.<SharingRemoveFileMemberError>>}\n */\nroutes.sharingRemoveFileMember2 = function (arg) {\n  return this.request('sharing/remove_file_member_2', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Allows an owner or editor (if the ACL update policy allows) of a shared\n * folder to remove another member. Apps must have full Dropbox access to use\n * this endpoint.\n * @function Dropbox#sharingRemoveFolderMember\n * @arg {SharingRemoveFolderMemberArg} arg - The request parameters.\n * @returns {Promise.<AsyncLaunchResultBase, Error.<SharingRemoveFolderMemberError>>}\n */\nroutes.sharingRemoveFolderMember = function (arg) {\n  return this.request('sharing/remove_folder_member', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Revoke a shared link. Note that even after revoking a shared link to a file,\n * the file may be accessible if there are shared links leading to any of the\n * file parent folders. To list all shared links that enable access to a\n * specific file, you can use the list_shared_links with the file as the\n * ListSharedLinksArg.path argument.\n * @function Dropbox#sharingRevokeSharedLink\n * @arg {SharingRevokeSharedLinkArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<SharingRevokeSharedLinkError>>}\n */\nroutes.sharingRevokeSharedLink = function (arg) {\n  return this.request('sharing/revoke_shared_link', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Share a folder with collaborators. Most sharing will be completed\n * synchronously. Large folders will be completed asynchronously. To make\n * testing the async case repeatable, set `ShareFolderArg.force_async`. If a\n * ShareFolderLaunch.async_job_id is returned, you'll need to call\n * check_share_job_status until the action completes to get the metadata for the\n * folder. Apps must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingShareFolder\n * @arg {SharingShareFolderArg} arg - The request parameters.\n * @returns {Promise.<SharingShareFolderLaunch, Error.<SharingShareFolderError>>}\n */\nroutes.sharingShareFolder = function (arg) {\n  return this.request('sharing/share_folder', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Transfer ownership of a shared folder to a member of the shared folder. User\n * must have AccessLevel.owner access to the shared folder to perform a\n * transfer. Apps must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingTransferFolder\n * @arg {SharingTransferFolderArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<SharingTransferFolderError>>}\n */\nroutes.sharingTransferFolder = function (arg) {\n  return this.request('sharing/transfer_folder', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * The current user unmounts the designated folder. They can re-mount the folder\n * at a later time using mount_folder. Apps must have full Dropbox access to use\n * this endpoint.\n * @function Dropbox#sharingUnmountFolder\n * @arg {SharingUnmountFolderArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<SharingUnmountFolderError>>}\n */\nroutes.sharingUnmountFolder = function (arg) {\n  return this.request('sharing/unmount_folder', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Remove all members from this file. Does not remove inherited members.\n * @function Dropbox#sharingUnshareFile\n * @arg {SharingUnshareFileArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<SharingUnshareFileError>>}\n */\nroutes.sharingUnshareFile = function (arg) {\n  return this.request('sharing/unshare_file', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Allows a shared folder owner to unshare the folder. You'll need to call\n * check_job_status to determine if the action has completed successfully. Apps\n * must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingUnshareFolder\n * @arg {SharingUnshareFolderArg} arg - The request parameters.\n * @returns {Promise.<AsyncLaunchEmptyResult, Error.<SharingUnshareFolderError>>}\n */\nroutes.sharingUnshareFolder = function (arg) {\n  return this.request('sharing/unshare_folder', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Changes a member's access on a shared file.\n * @function Dropbox#sharingUpdateFileMember\n * @arg {SharingUpdateFileMemberArgs} arg - The request parameters.\n * @returns {Promise.<SharingMemberAccessLevelResult, Error.<SharingFileMemberActionError>>}\n */\nroutes.sharingUpdateFileMember = function (arg) {\n  return this.request('sharing/update_file_member', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Allows an owner or editor of a shared folder to update another member's\n * permissions. Apps must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingUpdateFolderMember\n * @arg {SharingUpdateFolderMemberArg} arg - The request parameters.\n * @returns {Promise.<SharingMemberAccessLevelResult, Error.<SharingUpdateFolderMemberError>>}\n */\nroutes.sharingUpdateFolderMember = function (arg) {\n  return this.request('sharing/update_folder_member', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Update the sharing policies for a shared folder. User must have\n * AccessLevel.owner access to the shared folder to update its policies. Apps\n * must have full Dropbox access to use this endpoint.\n * @function Dropbox#sharingUpdateFolderPolicy\n * @arg {SharingUpdateFolderPolicyArg} arg - The request parameters.\n * @returns {Promise.<SharingSharedFolderMetadata, Error.<SharingUpdateFolderPolicyError>>}\n */\nroutes.sharingUpdateFolderPolicy = function (arg) {\n  return this.request('sharing/update_folder_policy', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Retrieves team events. Permission : Team Auditing.\n * @function Dropbox#teamLogGetEvents\n * @arg {TeamLogGetTeamEventsArg} arg - The request parameters.\n * @returns {Promise.<TeamLogGetTeamEventsResult, Error.<TeamLogGetTeamEventsError>>}\n */\nroutes.teamLogGetEvents = function (arg) {\n  return this.request('team_log/get_events', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from get_events, use this to paginate\n * through all events. Permission : Team Auditing.\n * @function Dropbox#teamLogGetEventsContinue\n * @arg {TeamLogGetTeamEventsContinueArg} arg - The request parameters.\n * @returns {Promise.<TeamLogGetTeamEventsResult, Error.<TeamLogGetTeamEventsContinueError>>}\n */\nroutes.teamLogGetEventsContinue = function (arg) {\n  return this.request('team_log/get_events/continue', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Get information about a user's account.\n * @function Dropbox#usersGetAccount\n * @arg {UsersGetAccountArg} arg - The request parameters.\n * @returns {Promise.<UsersBasicAccount, Error.<UsersGetAccountError>>}\n */\nroutes.usersGetAccount = function (arg) {\n  return this.request('users/get_account', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get information about multiple user accounts.  At most 300 accounts may be\n * queried per request.\n * @function Dropbox#usersGetAccountBatch\n * @arg {UsersGetAccountBatchArg} arg - The request parameters.\n * @returns {Promise.<Object, Error.<UsersGetAccountBatchError>>}\n */\nroutes.usersGetAccountBatch = function (arg) {\n  return this.request('users/get_account_batch', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get information about the current user's account.\n * @function Dropbox#usersGetCurrentAccount\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<UsersFullAccount, Error.<void>>}\n */\nroutes.usersGetCurrentAccount = function (arg) {\n  return this.request('users/get_current_account', arg, 'user', 'api', 'rpc');\n};\n\n/**\n * Get the space usage information for the current user's account.\n * @function Dropbox#usersGetSpaceUsage\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<UsersSpaceUsage, Error.<void>>}\n */\nroutes.usersGetSpaceUsage = function (arg) {\n  return this.request('users/get_space_usage', arg, 'user', 'api', 'rpc');\n};\n\nexport { routes };\n","export const RPC = 'rpc';\nexport const UPLOAD = 'upload';\nexport const DOWNLOAD = 'download';\n","import { UPLOAD, DOWNLOAD, RPC } from './constants';\nimport { downloadRequest } from './download-request';\nimport { uploadRequest } from './upload-request';\nimport { rpcRequest } from './rpc-request';\n/**\n * @private\n * @class DropboxBase\n * @classdesc The main Dropbox SDK class. This contains the methods that are\n * shared between Dropbox and DropboxTeam classes. It is marked as private so\n * that it doesn't show up in the docs because it is never used directly.\n * @arg {Object} options\n * @arg {String} [options.accessToken] - An access token for making authenticated\n * requests.\n * @arg {String} [options.clientId] - The client id fo ryour app. Used to create\n * authentication URL.\n * @arg {Number} [options.selectUser] - User is the team access token would like\n * to act as.\n */\n\nfunction parseBodyToType(res) {\n  const clone = res.clone();\n  return new Promise((resolve) => {\n    res.json()\n      .then(data => resolve(data))\n      .catch(() => clone.text().then(data => resolve(data)));\n  }).then(data => [res, data]);\n}\n\nexport class DropboxBase {\n  constructor(options) {\n    options = options || {};\n    this.accessToken = options.accessToken;\n    this.clientId = options.clientId;\n    this.selectUser = options.selectUser;\n    this.selectAdmin = options.selectAdmin;\n  }\n\n  /**\n   * Set the access token used to authenticate requests to the API.\n   * @arg {String} accessToken - An access token\n   * @returns {undefined}\n   */\n  setAccessToken(accessToken) {\n    this.accessToken = accessToken;\n  }\n\n  /**\n   * Get the access token\n   * @returns {String} Access token\n   */\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  /**\n   * Set the client id, which is used to help gain an access token.\n   * @arg {String} clientId - Your apps client id\n   * @returns {undefined}\n   */\n  setClientId(clientId) {\n    this.clientId = clientId;\n  }\n\n  /**\n   * Get the client id\n   * @returns {String} Client id\n   */\n  getClientId() {\n    return this.clientId;\n  }\n\n  /**\n   * Get a URL that can be used to authenticate users for the Dropbox API.\n   * @arg {String} redirectUri - A URL to redirect the user to after\n   * authenticating. This must be added to your app through the admin interface.\n   * @arg {String} [state] - State that will be returned in the redirect URL to help\n   * prevent cross site scripting attacks.\n   * @returns {String} Url to send user to for Dropbox API authentication\n   */\n  getAuthenticationUrl(redirectUri, state, auth_type) {\n    const clientId = this.getClientId();\n    const baseUrl = 'https://www.dropbox.com/oauth2/authorize';\n\n    if (!clientId) {\n      throw new Error('A client id is required. You can set the client id using .setClientId().');\n    }\n    if (!redirectUri) {\n      throw new Error('A redirect uri is required.');\n    }\n    if (!['code', 'token'].includes(auth_type)) {\n      throw new Error('Authorization type must be code or token');\n    }\n\n    let authUrl;\n    if (auth_type === 'code') {\n      authUrl = `${baseUrl}?response_type=code&client_id=${clientId}`;\n    } else {\n      authUrl = `${baseUrl}?response_type=token&client_id=${clientId}`;\n    }\n\n    if (redirectUri) {\n      authUrl += `&redirect_uri=${redirectUri}`;\n    }\n    if (state) {\n      authUrl += `&state=${state}`;\n    }\n    return authUrl;\n  }\n\n  /*\n    Some explanation goes here.\n  */\n\n  getAccessTokenFromCode(options) {\n    let path = `https://api.dropboxapi.com/oauth2/token?code=${options.code}&grant_type=authorization_code&redirect_uri=${options.redirectUri}&client_id=${options.clientId}&client_secret=${options.secret}`;\n    var fetchOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      }\n    };\n\n    return fetch(path, fetchOptions)\n      .then(res => parseBodyToType(res))\n      .then(([res, data]) => {\n        // maintaining existing API for error codes not equal to 200 range\n        if (!res.ok) {\n          // eslint-disable-next-line no-throw-literal\n          throw {\n            error: data,\n            response: res,\n            status: res.status,\n          };\n        }\n        return data.access_token;\n      });\n  }\n\n  /**\n   * Called when the authentication succeed\n   * @callback successCallback\n   * @param {string} access_token The application's access token\n   */\n\n  /**\n   * Called when the authentication failed.\n   * @callback errorCallback\n   */\n\n\n /**\n  * An authentication process that works with cordova applications.\n  * @param {successCallback} successCallback\n  * @param {errorCallback} errorCallback\n  */\n  authenticateWithCordova(successCallback, errorCallback) {\n    const redirectUrl = 'https://www.dropbox.com/1/oauth2/redirect_receiver';\n    const url = this.getAuthenticationUrl(redirectUrl);\n\n    let removed = false;\n    const browser = window.open(url, '_blank');\n\n    function onLoadError() {\n      // Try to avoid a browser crash on browser.close().\n      window.setTimeout(() => { browser.close(); }, 10);\n      errorCallback();\n    }\n\n    function onLoadStop(event) {\n      const errorLabel = '&error=';\n      const errorIndex = event.url.indexOf(errorLabel);\n\n      if (errorIndex > -1) {\n        // Try to avoid a browser crash on browser.close().\n        window.setTimeout(() => { browser.close(); }, 10);\n        errorCallback();\n      } else {\n        const tokenLabel = '#access_token=';\n        let tokenIndex = event.url.indexOf(tokenLabel);\n        const tokenTypeIndex = event.url.indexOf('&token_type=');\n        if (tokenIndex > -1) {\n          tokenIndex += tokenLabel.length;\n          // Try to avoid a browser crash on browser.close().\n          window.setTimeout(() => { browser.close(); }, 10);\n\n          const accessToken = event.url.substring(tokenIndex, tokenTypeIndex);\n          successCallback(accessToken);\n        }\n      }\n    }\n\n    function onExit() {\n      if (removed) {\n        return;\n      }\n      browser.removeEventListener('loaderror', onLoadError);\n      browser.removeEventListener('loadstop', onLoadStop);\n      browser.removeEventListener('exit', onExit);\n      removed = true;\n    }\n\n    browser.addEventListener('loaderror', onLoadError);\n    browser.addEventListener('loadstop', onLoadStop);\n    browser.addEventListener('exit', onExit);\n  }\n\n  request(path, args, auth, host, style) {\n    let request = null;\n    switch (style) {\n      case RPC:\n        request = this.getRpcRequest();\n        break;\n      case DOWNLOAD:\n        request = this.getDownloadRequest();\n        break;\n      case UPLOAD:\n        request = this.getUploadRequest();\n        break;\n      default:\n        throw new Error(`Invalid request style: ${style}`);\n    }\n    const options = {\n      selectUser: this.selectUser,\n      selectAdmin: this.selectAdmin,\n    };\n    return request(path, args, auth, host, this.getAccessToken(), options);\n  }\n\n  setRpcRequest(newRpcRequest) {\n    this.rpcRequest = newRpcRequest;\n  }\n\n  getRpcRequest() {\n    if (this.rpcRequest === undefined) {\n      this.rpcRequest = rpcRequest;\n    }\n    return this.rpcRequest;\n  }\n\n  setDownloadRequest(newDownloadRequest) {\n    this.downloadRequest = newDownloadRequest;\n  }\n\n  getDownloadRequest() {\n    if (this.downloadRequest === undefined) {\n      this.downloadRequest = downloadRequest;\n    }\n    return this.downloadRequest;\n  }\n\n  setUploadRequest(newUploadRequest) {\n    this.uploadRequest = newUploadRequest;\n  }\n\n  getUploadRequest() {\n    if (this.uploadRequest === undefined) {\n      this.uploadRequest = uploadRequest;\n    }\n    return this.uploadRequest;\n  }\n\n}\n","import { routes } from './routes';\nimport { DropboxBase } from './dropbox-base';\n\n/**\n * @class Dropbox\n * @extends DropboxBase\n * @classdesc The Dropbox SDK class that provides methods to read, write and\n * create files or folders in a user's Dropbox.\n * @arg {Object} options\n * @arg {String} [options.accessToken] - An access token for making authenticated\n * requests.\n * @arg {String} [options.clientId] - The client id for your app. Used to create\n * authentication URL.\n * @arg {String} [options.selectUser] - Select user is only used by DropboxTeam.\n * It specifies which user the team access token should be acting as.\n */\nexport class Dropbox extends DropboxBase {\n\n  constructor(options) {\n    super(options);\n    Object.assign(this, routes);\n  }\n\n  filesGetSharedLinkFile(arg) {\n    return this.request('sharing/get_shared_link_file', arg, 'api', 'download');\n  }\n}\n","// Auto-generated by Stone, do not modify.\nvar routes = {};\n\n/**\n * List all device sessions of a team's member.\n * @function DropboxTeam#teamDevicesListMemberDevices\n * @arg {TeamListMemberDevicesArg} arg - The request parameters.\n * @returns {Promise.<TeamListMemberDevicesResult, Error.<TeamListMemberDevicesError>>}\n */\nroutes.teamDevicesListMemberDevices = function (arg) {\n  return this.request('team/devices/list_member_devices', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * List all device sessions of a team.\n * @function DropboxTeam#teamDevicesListMembersDevices\n * @arg {TeamListMembersDevicesArg} arg - The request parameters.\n * @returns {Promise.<TeamListMembersDevicesResult, Error.<TeamListMembersDevicesError>>}\n */\nroutes.teamDevicesListMembersDevices = function (arg) {\n  return this.request('team/devices/list_members_devices', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * List all device sessions of a team.\n * @function DropboxTeam#teamDevicesListTeamDevices\n * @deprecated\n * @arg {TeamListTeamDevicesArg} arg - The request parameters.\n * @returns {Promise.<TeamListTeamDevicesResult, Error.<TeamListTeamDevicesError>>}\n */\nroutes.teamDevicesListTeamDevices = function (arg) {\n  return this.request('team/devices/list_team_devices', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Revoke a device session of a team's member.\n * @function DropboxTeam#teamDevicesRevokeDeviceSession\n * @arg {TeamRevokeDeviceSessionArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<TeamRevokeDeviceSessionError>>}\n */\nroutes.teamDevicesRevokeDeviceSession = function (arg) {\n  return this.request('team/devices/revoke_device_session', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Revoke a list of device sessions of team members.\n * @function DropboxTeam#teamDevicesRevokeDeviceSessionBatch\n * @arg {TeamRevokeDeviceSessionBatchArg} arg - The request parameters.\n * @returns {Promise.<TeamRevokeDeviceSessionBatchResult, Error.<TeamRevokeDeviceSessionBatchError>>}\n */\nroutes.teamDevicesRevokeDeviceSessionBatch = function (arg) {\n  return this.request('team/devices/revoke_device_session_batch', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Get the values for one or more featues. This route allows you to check your\n * account's capability for what feature you can access or what value you have\n * for certain features. Permission : Team information.\n * @function DropboxTeam#teamFeaturesGetValues\n * @arg {TeamFeaturesGetValuesBatchArg} arg - The request parameters.\n * @returns {Promise.<TeamFeaturesGetValuesBatchResult, Error.<TeamFeaturesGetValuesBatchError>>}\n */\nroutes.teamFeaturesGetValues = function (arg) {\n  return this.request('team/features/get_values', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Retrieves information about a team.\n * @function DropboxTeam#teamGetInfo\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<TeamTeamGetInfoResult, Error.<void>>}\n */\nroutes.teamGetInfo = function (arg) {\n  return this.request('team/get_info', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Creates a new, empty group, with a requested name. Permission : Team member\n * management.\n * @function DropboxTeam#teamGroupsCreate\n * @arg {TeamGroupCreateArg} arg - The request parameters.\n * @returns {Promise.<TeamGroupFullInfo, Error.<TeamGroupCreateError>>}\n */\nroutes.teamGroupsCreate = function (arg) {\n  return this.request('team/groups/create', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Deletes a group. The group is deleted immediately. However the revoking of\n * group-owned resources may take additional time. Use the groups/job_status/get\n * to determine whether this process has completed. Permission : Team member\n * management.\n * @function DropboxTeam#teamGroupsDelete\n * @arg {TeamGroupSelector} arg - The request parameters.\n * @returns {Promise.<AsyncLaunchEmptyResult, Error.<TeamGroupDeleteError>>}\n */\nroutes.teamGroupsDelete = function (arg) {\n  return this.request('team/groups/delete', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Retrieves information about one or more groups. Note that the optional field\n * GroupFullInfo.members is not returned for system-managed groups. Permission :\n * Team Information.\n * @function DropboxTeam#teamGroupsGetInfo\n * @arg {TeamGroupsSelector} arg - The request parameters.\n * @returns {Promise.<Object, Error.<TeamGroupsGetInfoError>>}\n */\nroutes.teamGroupsGetInfo = function (arg) {\n  return this.request('team/groups/get_info', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once an async_job_id is returned from groups/delete, groups/members/add , or\n * groups/members/remove use this method to poll the status of granting/revoking\n * group members' access to group-owned resources. Permission : Team member\n * management.\n * @function DropboxTeam#teamGroupsJobStatusGet\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<AsyncPollEmptyResult, Error.<TeamGroupsPollError>>}\n */\nroutes.teamGroupsJobStatusGet = function (arg) {\n  return this.request('team/groups/job_status/get', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Lists groups on a team. Permission : Team Information.\n * @function DropboxTeam#teamGroupsList\n * @arg {TeamGroupsListArg} arg - The request parameters.\n * @returns {Promise.<TeamGroupsListResult, Error.<void>>}\n */\nroutes.teamGroupsList = function (arg) {\n  return this.request('team/groups/list', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from groups/list, use this to paginate\n * through all groups. Permission : Team Information.\n * @function DropboxTeam#teamGroupsListContinue\n * @arg {TeamGroupsListContinueArg} arg - The request parameters.\n * @returns {Promise.<TeamGroupsListResult, Error.<TeamGroupsListContinueError>>}\n */\nroutes.teamGroupsListContinue = function (arg) {\n  return this.request('team/groups/list/continue', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Adds members to a group. The members are added immediately. However the\n * granting of group-owned resources may take additional time. Use the\n * groups/job_status/get to determine whether this process has completed.\n * Permission : Team member management.\n * @function DropboxTeam#teamGroupsMembersAdd\n * @arg {TeamGroupMembersAddArg} arg - The request parameters.\n * @returns {Promise.<TeamGroupMembersChangeResult, Error.<TeamGroupMembersAddError>>}\n */\nroutes.teamGroupsMembersAdd = function (arg) {\n  return this.request('team/groups/members/add', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Lists members of a group. Permission : Team Information.\n * @function DropboxTeam#teamGroupsMembersList\n * @arg {TeamGroupsMembersListArg} arg - The request parameters.\n * @returns {Promise.<TeamGroupsMembersListResult, Error.<TeamGroupSelectorError>>}\n */\nroutes.teamGroupsMembersList = function (arg) {\n  return this.request('team/groups/members/list', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from groups/members/list, use this to\n * paginate through all members of the group. Permission : Team information.\n * @function DropboxTeam#teamGroupsMembersListContinue\n * @arg {TeamGroupsMembersListContinueArg} arg - The request parameters.\n * @returns {Promise.<TeamGroupsMembersListResult, Error.<TeamGroupsMembersListContinueError>>}\n */\nroutes.teamGroupsMembersListContinue = function (arg) {\n  return this.request('team/groups/members/list/continue', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Removes members from a group. The members are removed immediately. However\n * the revoking of group-owned resources may take additional time. Use the\n * groups/job_status/get to determine whether this process has completed. This\n * method permits removing the only owner of a group, even in cases where this\n * is not possible via the web client. Permission : Team member management.\n * @function DropboxTeam#teamGroupsMembersRemove\n * @arg {TeamGroupMembersRemoveArg} arg - The request parameters.\n * @returns {Promise.<TeamGroupMembersChangeResult, Error.<TeamGroupMembersRemoveError>>}\n */\nroutes.teamGroupsMembersRemove = function (arg) {\n  return this.request('team/groups/members/remove', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Sets a member's access type in a group. Permission : Team member management.\n * @function DropboxTeam#teamGroupsMembersSetAccessType\n * @arg {TeamGroupMembersSetAccessTypeArg} arg - The request parameters.\n * @returns {Promise.<Object, Error.<TeamGroupMemberSetAccessTypeError>>}\n */\nroutes.teamGroupsMembersSetAccessType = function (arg) {\n  return this.request('team/groups/members/set_access_type', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Updates a group's name and/or external ID. Permission : Team member\n * management.\n * @function DropboxTeam#teamGroupsUpdate\n * @arg {TeamGroupUpdateArgs} arg - The request parameters.\n * @returns {Promise.<TeamGroupFullInfo, Error.<TeamGroupUpdateError>>}\n */\nroutes.teamGroupsUpdate = function (arg) {\n  return this.request('team/groups/update', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * List all linked applications of the team member. Note, this endpoint does not\n * list any team-linked applications.\n * @function DropboxTeam#teamLinkedAppsListMemberLinkedApps\n * @arg {TeamListMemberAppsArg} arg - The request parameters.\n * @returns {Promise.<TeamListMemberAppsResult, Error.<TeamListMemberAppsError>>}\n */\nroutes.teamLinkedAppsListMemberLinkedApps = function (arg) {\n  return this.request('team/linked_apps/list_member_linked_apps', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * List all applications linked to the team members' accounts. Note, this\n * endpoint does not list any team-linked applications.\n * @function DropboxTeam#teamLinkedAppsListMembersLinkedApps\n * @arg {TeamListMembersAppsArg} arg - The request parameters.\n * @returns {Promise.<TeamListMembersAppsResult, Error.<TeamListMembersAppsError>>}\n */\nroutes.teamLinkedAppsListMembersLinkedApps = function (arg) {\n  return this.request('team/linked_apps/list_members_linked_apps', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * List all applications linked to the team members' accounts. Note, this\n * endpoint doesn't list any team-linked applications.\n * @function DropboxTeam#teamLinkedAppsListTeamLinkedApps\n * @deprecated\n * @arg {TeamListTeamAppsArg} arg - The request parameters.\n * @returns {Promise.<TeamListTeamAppsResult, Error.<TeamListTeamAppsError>>}\n */\nroutes.teamLinkedAppsListTeamLinkedApps = function (arg) {\n  return this.request('team/linked_apps/list_team_linked_apps', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Revoke a linked application of the team member.\n * @function DropboxTeam#teamLinkedAppsRevokeLinkedApp\n * @arg {TeamRevokeLinkedApiAppArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<TeamRevokeLinkedAppError>>}\n */\nroutes.teamLinkedAppsRevokeLinkedApp = function (arg) {\n  return this.request('team/linked_apps/revoke_linked_app', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Revoke a list of linked applications of the team members.\n * @function DropboxTeam#teamLinkedAppsRevokeLinkedAppBatch\n * @arg {TeamRevokeLinkedApiAppBatchArg} arg - The request parameters.\n * @returns {Promise.<TeamRevokeLinkedAppBatchResult, Error.<TeamRevokeLinkedAppBatchError>>}\n */\nroutes.teamLinkedAppsRevokeLinkedAppBatch = function (arg) {\n  return this.request('team/linked_apps/revoke_linked_app_batch', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Add users to member space limits excluded users list.\n * @function DropboxTeam#teamMemberSpaceLimitsExcludedUsersAdd\n * @arg {TeamExcludedUsersUpdateArg} arg - The request parameters.\n * @returns {Promise.<TeamExcludedUsersUpdateResult, Error.<TeamExcludedUsersUpdateError>>}\n */\nroutes.teamMemberSpaceLimitsExcludedUsersAdd = function (arg) {\n  return this.request('team/member_space_limits/excluded_users/add', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * List member space limits excluded users.\n * @function DropboxTeam#teamMemberSpaceLimitsExcludedUsersList\n * @arg {TeamExcludedUsersListArg} arg - The request parameters.\n * @returns {Promise.<TeamExcludedUsersListResult, Error.<TeamExcludedUsersListError>>}\n */\nroutes.teamMemberSpaceLimitsExcludedUsersList = function (arg) {\n  return this.request('team/member_space_limits/excluded_users/list', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Continue listing member space limits excluded users.\n * @function DropboxTeam#teamMemberSpaceLimitsExcludedUsersListContinue\n * @arg {TeamExcludedUsersListContinueArg} arg - The request parameters.\n * @returns {Promise.<TeamExcludedUsersListResult, Error.<TeamExcludedUsersListContinueError>>}\n */\nroutes.teamMemberSpaceLimitsExcludedUsersListContinue = function (arg) {\n  return this.request('team/member_space_limits/excluded_users/list/continue', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Remove users from member space limits excluded users list.\n * @function DropboxTeam#teamMemberSpaceLimitsExcludedUsersRemove\n * @arg {TeamExcludedUsersUpdateArg} arg - The request parameters.\n * @returns {Promise.<TeamExcludedUsersUpdateResult, Error.<TeamExcludedUsersUpdateError>>}\n */\nroutes.teamMemberSpaceLimitsExcludedUsersRemove = function (arg) {\n  return this.request('team/member_space_limits/excluded_users/remove', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Get users custom quota. Returns none as the custom quota if none was set. A\n * maximum of 1000 members can be specified in a single call.\n * @function DropboxTeam#teamMemberSpaceLimitsGetCustomQuota\n * @arg {TeamCustomQuotaUsersArg} arg - The request parameters.\n * @returns {Promise.<Array.<TeamCustomQuotaResult>, Error.<TeamCustomQuotaError>>}\n */\nroutes.teamMemberSpaceLimitsGetCustomQuota = function (arg) {\n  return this.request('team/member_space_limits/get_custom_quota', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Remove users custom quota. A maximum of 1000 members can be specified in a\n * single call.\n * @function DropboxTeam#teamMemberSpaceLimitsRemoveCustomQuota\n * @arg {TeamCustomQuotaUsersArg} arg - The request parameters.\n * @returns {Promise.<Array.<TeamRemoveCustomQuotaResult>, Error.<TeamCustomQuotaError>>}\n */\nroutes.teamMemberSpaceLimitsRemoveCustomQuota = function (arg) {\n  return this.request('team/member_space_limits/remove_custom_quota', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Set users custom quota. Custom quota has to be at least 15GB. A maximum of\n * 1000 members can be specified in a single call.\n * @function DropboxTeam#teamMemberSpaceLimitsSetCustomQuota\n * @arg {TeamSetCustomQuotaArg} arg - The request parameters.\n * @returns {Promise.<Array.<TeamCustomQuotaResult>, Error.<TeamSetCustomQuotaError>>}\n */\nroutes.teamMemberSpaceLimitsSetCustomQuota = function (arg) {\n  return this.request('team/member_space_limits/set_custom_quota', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Adds members to a team. Permission : Team member management A maximum of 20\n * members can be specified in a single call. If no Dropbox account exists with\n * the email address specified, a new Dropbox account will be created with the\n * given email address, and that account will be invited to the team. If a\n * personal Dropbox account exists with the email address specified in the call,\n * this call will create a placeholder Dropbox account for the user on the team\n * and send an email inviting the user to migrate their existing personal\n * account onto the team. Team member management apps are required to set an\n * initial given_name and surname for a user to use in the team invitation and\n * for 'Perform as team member' actions taken on the user before they become\n * 'active'.\n * @function DropboxTeam#teamMembersAdd\n * @arg {TeamMembersAddArg} arg - The request parameters.\n * @returns {Promise.<TeamMembersAddLaunch, Error.<void>>}\n */\nroutes.teamMembersAdd = function (arg) {\n  return this.request('team/members/add', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once an async_job_id is returned from members/add , use this to poll the\n * status of the asynchronous request. Permission : Team member management.\n * @function DropboxTeam#teamMembersAddJobStatusGet\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<TeamMembersAddJobStatus, Error.<AsyncPollError>>}\n */\nroutes.teamMembersAddJobStatusGet = function (arg) {\n  return this.request('team/members/add/job_status/get', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Returns information about multiple team members. Permission : Team\n * information This endpoint will return MembersGetInfoItem.id_not_found, for\n * IDs (or emails) that cannot be matched to a valid team member.\n * @function DropboxTeam#teamMembersGetInfo\n * @arg {TeamMembersGetInfoArgs} arg - The request parameters.\n * @returns {Promise.<Object, Error.<TeamMembersGetInfoError>>}\n */\nroutes.teamMembersGetInfo = function (arg) {\n  return this.request('team/members/get_info', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Lists members of a team. Permission : Team information.\n * @function DropboxTeam#teamMembersList\n * @arg {TeamMembersListArg} arg - The request parameters.\n * @returns {Promise.<TeamMembersListResult, Error.<TeamMembersListError>>}\n */\nroutes.teamMembersList = function (arg) {\n  return this.request('team/members/list', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from members/list, use this to paginate\n * through all team members. Permission : Team information.\n * @function DropboxTeam#teamMembersListContinue\n * @arg {TeamMembersListContinueArg} arg - The request parameters.\n * @returns {Promise.<TeamMembersListResult, Error.<TeamMembersListContinueError>>}\n */\nroutes.teamMembersListContinue = function (arg) {\n  return this.request('team/members/list/continue', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Recover a deleted member. Permission : Team member management Exactly one of\n * team_member_id, email, or external_id must be provided to identify the user\n * account.\n * @function DropboxTeam#teamMembersRecover\n * @arg {TeamMembersRecoverArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<TeamMembersRecoverError>>}\n */\nroutes.teamMembersRecover = function (arg) {\n  return this.request('team/members/recover', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Removes a member from a team. Permission : Team member management Exactly one\n * of team_member_id, email, or external_id must be provided to identify the\n * user account. Accounts can be recovered via members/recover for a 7 day\n * period or until the account has been permanently deleted or transferred to\n * another account (whichever comes first). Calling members/add while a user is\n * still recoverable on your team will return with\n * MemberAddResult.user_already_on_team. Accounts can have their files\n * transferred via the admin console for a limited time, based on the version\n * history length associated with the team (120 days for most teams). This\n * endpoint may initiate an asynchronous job. To obtain the final result of the\n * job, the client should periodically poll members/remove/job_status/get.\n * @function DropboxTeam#teamMembersRemove\n * @arg {TeamMembersRemoveArg} arg - The request parameters.\n * @returns {Promise.<AsyncLaunchEmptyResult, Error.<TeamMembersRemoveError>>}\n */\nroutes.teamMembersRemove = function (arg) {\n  return this.request('team/members/remove', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once an async_job_id is returned from members/remove , use this to poll the\n * status of the asynchronous request. Permission : Team member management.\n * @function DropboxTeam#teamMembersRemoveJobStatusGet\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<AsyncPollEmptyResult, Error.<AsyncPollError>>}\n */\nroutes.teamMembersRemoveJobStatusGet = function (arg) {\n  return this.request('team/members/remove/job_status/get', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Sends welcome email to pending team member. Permission : Team member\n * management Exactly one of team_member_id, email, or external_id must be\n * provided to identify the user account. No-op if team member is not pending.\n * @function DropboxTeam#teamMembersSendWelcomeEmail\n * @arg {TeamUserSelectorArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<TeamMembersSendWelcomeError>>}\n */\nroutes.teamMembersSendWelcomeEmail = function (arg) {\n  return this.request('team/members/send_welcome_email', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Updates a team member's permissions. Permission : Team member management.\n * @function DropboxTeam#teamMembersSetAdminPermissions\n * @arg {TeamMembersSetPermissionsArg} arg - The request parameters.\n * @returns {Promise.<TeamMembersSetPermissionsResult, Error.<TeamMembersSetPermissionsError>>}\n */\nroutes.teamMembersSetAdminPermissions = function (arg) {\n  return this.request('team/members/set_admin_permissions', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Updates a team member's profile. Permission : Team member management.\n * @function DropboxTeam#teamMembersSetProfile\n * @arg {TeamMembersSetProfileArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamMemberInfo, Error.<TeamMembersSetProfileError>>}\n */\nroutes.teamMembersSetProfile = function (arg) {\n  return this.request('team/members/set_profile', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Suspend a member from a team. Permission : Team member management Exactly one\n * of team_member_id, email, or external_id must be provided to identify the\n * user account.\n * @function DropboxTeam#teamMembersSuspend\n * @arg {TeamMembersDeactivateArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<TeamMembersSuspendError>>}\n */\nroutes.teamMembersSuspend = function (arg) {\n  return this.request('team/members/suspend', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Unsuspend a member from a team. Permission : Team member management Exactly\n * one of team_member_id, email, or external_id must be provided to identify the\n * user account.\n * @function DropboxTeam#teamMembersUnsuspend\n * @arg {TeamMembersUnsuspendArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<TeamMembersUnsuspendError>>}\n */\nroutes.teamMembersUnsuspend = function (arg) {\n  return this.request('team/members/unsuspend', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Returns a list of all team-accessible namespaces. This list includes team\n * folders, shared folders containing team members, team members' home\n * namespaces, and team members' app folders. Home namespaces and app folders\n * are always owned by this team or members of the team, but shared folders may\n * be owned by other users or other teams. Duplicates may occur in the list.\n * @function DropboxTeam#teamNamespacesList\n * @arg {TeamTeamNamespacesListArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamNamespacesListResult, Error.<void>>}\n */\nroutes.teamNamespacesList = function (arg) {\n  return this.request('team/namespaces/list', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from namespaces/list, use this to paginate\n * through all team-accessible namespaces. Duplicates may occur in the list.\n * @function DropboxTeam#teamNamespacesListContinue\n * @arg {TeamTeamNamespacesListContinueArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamNamespacesListResult, Error.<TeamTeamNamespacesListContinueError>>}\n */\nroutes.teamNamespacesListContinue = function (arg) {\n  return this.request('team/namespaces/list/continue', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * @function DropboxTeam#teamPropertiesTemplateAdd\n * @deprecated\n * @arg {FilePropertiesAddTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesAddTemplateResult, Error.<FilePropertiesModifyTemplateError>>}\n */\nroutes.teamPropertiesTemplateAdd = function (arg) {\n  return this.request('team/properties/template/add', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * @function DropboxTeam#teamPropertiesTemplateGet\n * @deprecated\n * @arg {FilePropertiesGetTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesGetTemplateResult, Error.<FilePropertiesTemplateError>>}\n */\nroutes.teamPropertiesTemplateGet = function (arg) {\n  return this.request('team/properties/template/get', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * @function DropboxTeam#teamPropertiesTemplateList\n * @deprecated\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<FilePropertiesListTemplateResult, Error.<FilePropertiesTemplateError>>}\n */\nroutes.teamPropertiesTemplateList = function (arg) {\n  return this.request('team/properties/template/list', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * @function DropboxTeam#teamPropertiesTemplateUpdate\n * @deprecated\n * @arg {FilePropertiesUpdateTemplateArg} arg - The request parameters.\n * @returns {Promise.<FilePropertiesUpdateTemplateResult, Error.<FilePropertiesModifyTemplateError>>}\n */\nroutes.teamPropertiesTemplateUpdate = function (arg) {\n  return this.request('team/properties/template/update', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Retrieves reporting data about a team's user activity.\n * @function DropboxTeam#teamReportsGetActivity\n * @arg {TeamDateRange} arg - The request parameters.\n * @returns {Promise.<TeamGetActivityReport, Error.<TeamDateRangeError>>}\n */\nroutes.teamReportsGetActivity = function (arg) {\n  return this.request('team/reports/get_activity', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Retrieves reporting data about a team's linked devices.\n * @function DropboxTeam#teamReportsGetDevices\n * @arg {TeamDateRange} arg - The request parameters.\n * @returns {Promise.<TeamGetDevicesReport, Error.<TeamDateRangeError>>}\n */\nroutes.teamReportsGetDevices = function (arg) {\n  return this.request('team/reports/get_devices', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Retrieves reporting data about a team's membership.\n * @function DropboxTeam#teamReportsGetMembership\n * @arg {TeamDateRange} arg - The request parameters.\n * @returns {Promise.<TeamGetMembershipReport, Error.<TeamDateRangeError>>}\n */\nroutes.teamReportsGetMembership = function (arg) {\n  return this.request('team/reports/get_membership', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Retrieves reporting data about a team's storage usage.\n * @function DropboxTeam#teamReportsGetStorage\n * @arg {TeamDateRange} arg - The request parameters.\n * @returns {Promise.<TeamGetStorageReport, Error.<TeamDateRangeError>>}\n */\nroutes.teamReportsGetStorage = function (arg) {\n  return this.request('team/reports/get_storage', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Sets an archived team folder's status to active. Permission : Team member\n * file access.\n * @function DropboxTeam#teamTeamFolderActivate\n * @arg {TeamTeamFolderIdArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamFolderMetadata, Error.<TeamTeamFolderActivateError>>}\n */\nroutes.teamTeamFolderActivate = function (arg) {\n  return this.request('team/team_folder/activate', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Sets an active team folder's status to archived and removes all folder and\n * file members. Permission : Team member file access.\n * @function DropboxTeam#teamTeamFolderArchive\n * @arg {TeamTeamFolderArchiveArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamFolderArchiveLaunch, Error.<TeamTeamFolderArchiveError>>}\n */\nroutes.teamTeamFolderArchive = function (arg) {\n  return this.request('team/team_folder/archive', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Returns the status of an asynchronous job for archiving a team folder.\n * Permission : Team member file access.\n * @function DropboxTeam#teamTeamFolderArchiveCheck\n * @arg {AsyncPollArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamFolderArchiveJobStatus, Error.<AsyncPollError>>}\n */\nroutes.teamTeamFolderArchiveCheck = function (arg) {\n  return this.request('team/team_folder/archive/check', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Creates a new, active, team folder with no members. Permission : Team member\n * file access.\n * @function DropboxTeam#teamTeamFolderCreate\n * @arg {TeamTeamFolderCreateArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamFolderMetadata, Error.<TeamTeamFolderCreateError>>}\n */\nroutes.teamTeamFolderCreate = function (arg) {\n  return this.request('team/team_folder/create', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Retrieves metadata for team folders. Permission : Team member file access.\n * @function DropboxTeam#teamTeamFolderGetInfo\n * @arg {TeamTeamFolderIdListArg} arg - The request parameters.\n * @returns {Promise.<Array.<TeamTeamFolderGetInfoItem>, Error.<void>>}\n */\nroutes.teamTeamFolderGetInfo = function (arg) {\n  return this.request('team/team_folder/get_info', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Lists all team folders. Permission : Team member file access.\n * @function DropboxTeam#teamTeamFolderList\n * @arg {TeamTeamFolderListArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamFolderListResult, Error.<TeamTeamFolderListError>>}\n */\nroutes.teamTeamFolderList = function (arg) {\n  return this.request('team/team_folder/list', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Once a cursor has been retrieved from team_folder/list, use this to paginate\n * through all team folders. Permission : Team member file access.\n * @function DropboxTeam#teamTeamFolderListContinue\n * @arg {TeamTeamFolderListContinueArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamFolderListResult, Error.<TeamTeamFolderListContinueError>>}\n */\nroutes.teamTeamFolderListContinue = function (arg) {\n  return this.request('team/team_folder/list/continue', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Permanently deletes an archived team folder. Permission : Team member file\n * access.\n * @function DropboxTeam#teamTeamFolderPermanentlyDelete\n * @arg {TeamTeamFolderIdArg} arg - The request parameters.\n * @returns {Promise.<void, Error.<TeamTeamFolderPermanentlyDeleteError>>}\n */\nroutes.teamTeamFolderPermanentlyDelete = function (arg) {\n  return this.request('team/team_folder/permanently_delete', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Changes an active team folder's name. Permission : Team member file access.\n * @function DropboxTeam#teamTeamFolderRename\n * @arg {TeamTeamFolderRenameArg} arg - The request parameters.\n * @returns {Promise.<TeamTeamFolderMetadata, Error.<TeamTeamFolderRenameError>>}\n */\nroutes.teamTeamFolderRename = function (arg) {\n  return this.request('team/team_folder/rename', arg, 'team', 'api', 'rpc');\n};\n\n/**\n * Returns the member profile of the admin who generated the team access token\n * used to make the call.\n * @function DropboxTeam#teamTokenGetAuthenticatedAdmin\n * @arg {void} arg - The request parameters.\n * @returns {Promise.<TeamTokenGetAuthenticatedAdminResult, Error.<TeamTokenGetAuthenticatedAdminError>>}\n */\nroutes.teamTokenGetAuthenticatedAdmin = function (arg) {\n  return this.request('team/token/get_authenticated_admin', arg, 'team', 'api', 'rpc');\n};\n\nexport { routes };\n","import { Dropbox } from '../dropbox';\nimport { DropboxBase } from '../dropbox-base';\nimport { routes } from '../routes-team';\n\n/**\n * @class DropboxTeam\n * @extends DropboxBase\n * @classdesc The Dropbox SDK class that provides access to team endpoints.\n * @arg {Object} options\n * @arg {String} [options.accessToken] - An access token for making authenticated\n * requests.\n * @arg {String} [options.clientId] - The client id for your app. Used to create\n * authentication URL.\n */\nexport class DropboxTeam extends DropboxBase {\n\n  constructor(options) {\n    super(options);\n    Object.assign(this, routes);\n  }\n\n  /**\n   * Returns an instance of Dropbox that can make calls to user api endpoints on\n   * behalf of the passed user id, using the team access token.\n   * @arg {String} userId - The user id to use the Dropbox class as\n   * @returns {Dropbox} An instance of Dropbox used to make calls to user api\n   * endpoints\n   */\n  actAsUser(userId) {\n    return new Dropbox({\n      accessToken: this.accessToken,\n      clientId: this.clientId,\n      selectUser: userId,\n    });\n  }\n}\n","module.exports = require('./dropbox-team').DropboxTeam;\n"],"names":["getSafeUnicode","c","charCodeAt","toString","slice","isWindowOrWorker","WorkerGlobalScope","self","module","getBaseURL","host","httpHeaderSafeJson","args","JSON","stringify","replace","downloadRequest","path","auth","accessToken","options","Error","fetchOptions","selectUser","headers","selectAdmin","fetch","then","res","ok","blob","buffer","text","getDataFromConsumer","data","status","result","parse","get","fileBlob","fileBinary","responseHandler","uploadRequest","contents","clone","Promise","resolve","json","catch","parseBodyToType","rpcRequest","body","Content-Type","Authorization","routes","authTokenFromOauth1","arg","this","request","authTokenRevoke","filePropertiesPropertiesAdd","filePropertiesPropertiesOverwrite","filePropertiesPropertiesRemove","filePropertiesPropertiesSearch","filePropertiesPropertiesSearchContinue","filePropertiesPropertiesUpdate","filePropertiesTemplatesAddForTeam","filePropertiesTemplatesAddForUser","filePropertiesTemplatesGetForTeam","filePropertiesTemplatesGetForUser","filePropertiesTemplatesListForTeam","filePropertiesTemplatesListForUser","filePropertiesTemplatesRemoveForTeam","filePropertiesTemplatesRemoveForUser","filePropertiesTemplatesUpdateForTeam","filePropertiesTemplatesUpdateForUser","fileRequestsCreate","fileRequestsGet","fileRequestsList","fileRequestsUpdate","filesAlphaGetMetadata","filesAlphaUpload","filesCopy","filesCopyBatch","filesCopyBatchCheck","filesCopyReferenceGet","filesCopyReferenceSave","filesCopyV2","filesCreateFolder","filesCreateFolderV2","filesDelete","filesDeleteBatch","filesDeleteBatchCheck","filesDeleteV2","filesDownload","filesGetMetadata","filesGetPreview","filesGetTemporaryLink","filesGetThumbnail","filesGetThumbnailBatch","filesListFolder","filesListFolderContinue","filesListFolderGetLatestCursor","filesListFolderLongpoll","filesListRevisions","filesMove","filesMoveBatch","filesMoveBatchCheck","filesMoveV2","filesPermanentlyDelete","filesPropertiesAdd","filesPropertiesOverwrite","filesPropertiesRemove","filesPropertiesTemplateGet","filesPropertiesTemplateList","filesPropertiesUpdate","filesRestore","filesSaveUrl","filesSaveUrlCheckJobStatus","filesSearch","filesUpload","filesUploadSessionAppend","filesUploadSessionAppendV2","filesUploadSessionFinish","filesUploadSessionFinishBatch","filesUploadSessionFinishBatchCheck","filesUploadSessionStart","paperDocsArchive","paperDocsCreate","paperDocsDownload","paperDocsFolderUsersList","paperDocsFolderUsersListContinue","paperDocsGetFolderInfo","paperDocsList","paperDocsListContinue","paperDocsPermanentlyDelete","paperDocsSharingPolicyGet","paperDocsSharingPolicySet","paperDocsUpdate","paperDocsUsersAdd","paperDocsUsersList","paperDocsUsersListContinue","paperDocsUsersRemove","sharingAddFileMember","sharingAddFolderMember","sharingChangeFileMemberAccess","sharingCheckJobStatus","sharingCheckRemoveMemberJobStatus","sharingCheckShareJobStatus","sharingCreateSharedLink","sharingCreateSharedLinkWithSettings","sharingGetFileMetadata","sharingGetFileMetadataBatch","sharingGetFolderMetadata","sharingGetSharedLinkFile","sharingGetSharedLinkMetadata","sharingGetSharedLinks","sharingListFileMembers","sharingListFileMembersBatch","sharingListFileMembersContinue","sharingListFolderMembers","sharingListFolderMembersContinue","sharingListFolders","sharingListFoldersContinue","sharingListMountableFolders","sharingListMountableFoldersContinue","sharingListReceivedFiles","sharingListReceivedFilesContinue","sharingListSharedLinks","sharingModifySharedLinkSettings","sharingMountFolder","sharingRelinquishFileMembership","sharingRelinquishFolderMembership","sharingRemoveFileMember","sharingRemoveFileMember2","sharingRemoveFolderMember","sharingRevokeSharedLink","sharingShareFolder","sharingTransferFolder","sharingUnmountFolder","sharingUnshareFile","sharingUnshareFolder","sharingUpdateFileMember","sharingUpdateFolderMember","sharingUpdateFolderPolicy","teamLogGetEvents","teamLogGetEventsContinue","usersGetAccount","usersGetAccountBatch","usersGetCurrentAccount","usersGetSpaceUsage","DropboxBase","clientId","redirectUri","state","auth_type","getClientId","baseUrl","includes","authUrl","code","secret","access_token","successCallback","errorCallback","onLoadError","setTimeout","close","onLoadStop","event","url","indexOf","tokenLabel","tokenIndex","tokenTypeIndex","length","substring","onExit","removed","removeEventListener","getAuthenticationUrl","browser","window","open","addEventListener","style","getRpcRequest","getDownloadRequest","getUploadRequest","getAccessToken","newRpcRequest","undefined","newDownloadRequest","newUploadRequest","Dropbox","assign","teamDevicesListMemberDevices","teamDevicesListMembersDevices","teamDevicesListTeamDevices","teamDevicesRevokeDeviceSession","teamDevicesRevokeDeviceSessionBatch","teamFeaturesGetValues","teamGetInfo","teamGroupsCreate","teamGroupsDelete","teamGroupsGetInfo","teamGroupsJobStatusGet","teamGroupsList","teamGroupsListContinue","teamGroupsMembersAdd","teamGroupsMembersList","teamGroupsMembersListContinue","teamGroupsMembersRemove","teamGroupsMembersSetAccessType","teamGroupsUpdate","teamLinkedAppsListMemberLinkedApps","teamLinkedAppsListMembersLinkedApps","teamLinkedAppsListTeamLinkedApps","teamLinkedAppsRevokeLinkedApp","teamLinkedAppsRevokeLinkedAppBatch","teamMemberSpaceLimitsExcludedUsersAdd","teamMemberSpaceLimitsExcludedUsersList","teamMemberSpaceLimitsExcludedUsersListContinue","teamMemberSpaceLimitsExcludedUsersRemove","teamMemberSpaceLimitsGetCustomQuota","teamMemberSpaceLimitsRemoveCustomQuota","teamMemberSpaceLimitsSetCustomQuota","teamMembersAdd","teamMembersAddJobStatusGet","teamMembersGetInfo","teamMembersList","teamMembersListContinue","teamMembersRecover","teamMembersRemove","teamMembersRemoveJobStatusGet","teamMembersSendWelcomeEmail","teamMembersSetAdminPermissions","teamMembersSetProfile","teamMembersSuspend","teamMembersUnsuspend","teamNamespacesList","teamNamespacesListContinue","teamPropertiesTemplateAdd","teamPropertiesTemplateGet","teamPropertiesTemplateList","teamPropertiesTemplateUpdate","teamReportsGetActivity","teamReportsGetDevices","teamReportsGetMembership","teamReportsGetStorage","teamTeamFolderActivate","teamTeamFolderArchive","teamTeamFolderArchiveCheck","teamTeamFolderCreate","teamTeamFolderGetInfo","teamTeamFolderList","teamTeamFolderListContinue","teamTeamFolderPermanentlyDelete","teamTeamFolderRename","teamTokenGetAuthenticatedAdmin","DropboxTeam","userId"],"mappings":"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"}