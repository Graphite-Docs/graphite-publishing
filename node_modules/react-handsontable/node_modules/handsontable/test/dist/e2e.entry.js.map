{"version":3,"file":"e2e.entry.js","sources":["webpack:///webpack/bootstrap 35ab3b82755c1fdb351f","webpack:///./~/core-js/modules/_export.js","webpack:///./~/core-js/modules/_wks.js","webpack:///./~/core-js/modules/_global.js","webpack:///./~/core-js/modules/_is-object.js","webpack:///./~/core-js/modules/_an-object.js","webpack:///./~/core-js/modules/_object-dp.js","webpack:///./~/core-js/modules/_descriptors.js","webpack:///./~/core-js/modules/_has.js","webpack:///./~/core-js/modules/_to-iobject.js","webpack:///./~/core-js/modules/_to-length.js","webpack:///./~/core-js/modules/_ctx.js","webpack:///./~/core-js/modules/_defined.js","webpack:///./~/core-js/modules/_fails.js","webpack:///./~/core-js/modules/_hide.js","webpack:///./~/core-js/modules/_redefine.js","webpack:///./~/core-js/modules/_add-to-unscopables.js","webpack:///./~/core-js/modules/_cof.js","webpack:///./~/core-js/modules/_object-keys.js","webpack:///./~/core-js/modules/_property-desc.js","webpack:///./~/core-js/modules/_to-object.js","webpack:///./~/core-js/modules/_core.js","webpack:///./~/core-js/modules/_iterators.js","webpack:///./~/core-js/modules/_meta.js","webpack:///./~/core-js/modules/_object-pie.js","webpack:///./~/core-js/modules/_set-to-string-tag.js","webpack:///./~/core-js/modules/_uid.js","webpack:///./~/core-js/modules/_an-instance.js","webpack:///./~/core-js/modules/_array-methods.js","webpack:///./~/core-js/modules/_collection.js","webpack:///./~/core-js/modules/_fix-re-wks.js","webpack:///./~/core-js/modules/_for-of.js","webpack:///./~/core-js/modules/_library.js","webpack:///./~/core-js/modules/_object-gops.js","webpack:///./~/core-js/modules/_redefine-all.js","webpack:///./~/core-js/modules/_to-index.js","webpack:///./~/core-js/modules/_to-integer.js","webpack:///./~/core-js/modules/_a-function.js","webpack:///./~/core-js/modules/_create-property.js","webpack:///./~/core-js/modules/_dom-create.js","webpack:///./~/core-js/modules/_enum-bug-keys.js","webpack:///./~/core-js/modules/_fails-is-regexp.js","webpack:///./~/core-js/modules/_iobject.js","webpack:///./~/core-js/modules/_iter-detect.js","webpack:///./~/core-js/modules/_object-create.js","webpack:///./~/core-js/modules/_object-gopd.js","webpack:///./~/core-js/modules/_object-gopn.js","webpack:///./~/core-js/modules/_shared-key.js","webpack:///./~/core-js/modules/_shared.js","webpack:///./~/core-js/modules/_string-context.js","webpack:///./~/core-js/modules/_task.js","webpack:///./~/core-js/modules/_to-primitive.js","webpack:///./~/core-js/modules/es6.array.iterator.js","webpack:///./~/core-js/modules/_array-includes.js","webpack:///./~/core-js/modules/_classof.js","webpack:///./~/core-js/modules/_collection-strong.js","webpack:///./~/core-js/modules/_collection-weak.js","webpack:///./~/core-js/modules/_html.js","webpack:///./~/core-js/modules/_ie8-dom-define.js","webpack:///./~/core-js/modules/_is-array-iter.js","webpack:///./~/core-js/modules/_is-array.js","webpack:///./~/core-js/modules/_is-integer.js","webpack:///./~/core-js/modules/_is-regexp.js","webpack:///./~/core-js/modules/_iter-call.js","webpack:///./~/core-js/modules/_iter-define.js","webpack:///./~/core-js/modules/_iter-step.js","webpack:///./~/core-js/modules/_object-assign.js","webpack:///./~/core-js/modules/_object-keys-internal.js","webpack:///./~/core-js/modules/_object-to-array.js","webpack:///./~/core-js/modules/_set-proto.js","webpack:///./~/core-js/modules/_set-species.js","webpack:///./~/core-js/modules/_string-pad.js","webpack:///./~/core-js/modules/_string-repeat.js","webpack:///./~/core-js/modules/_wks-ext.js","webpack:///./~/core-js/modules/core.get-iterator-method.js","webpack:///(webpack)/buildin/global.js","webpack:///test/e2e/MemoryLeakTest.js","webpack:///./~/core-js/modules/es6.array.copy-within.js","webpack:///./~/core-js/modules/es6.array.fill.js","webpack:///./~/core-js/modules/es6.array.find-index.js","webpack:///./~/core-js/modules/es6.array.find.js","webpack:///./~/core-js/modules/es6.array.from.js","webpack:///./~/core-js/modules/es6.array.of.js","webpack:///./~/core-js/modules/es6.function.name.js","webpack:///./~/core-js/modules/es6.map.js","webpack:///./~/core-js/modules/es6.number.epsilon.js","webpack:///./~/core-js/modules/es6.number.is-finite.js","webpack:///./~/core-js/modules/es6.number.is-integer.js","webpack:///./~/core-js/modules/es6.number.is-nan.js","webpack:///./~/core-js/modules/es6.number.is-safe-integer.js","webpack:///./~/core-js/modules/es6.number.max-safe-integer.js","webpack:///./~/core-js/modules/es6.number.min-safe-integer.js","webpack:///./~/core-js/modules/es6.object.assign.js","webpack:///./~/core-js/modules/es6.object.is.js","webpack:///./~/core-js/modules/es6.object.set-prototype-of.js","webpack:///./~/core-js/modules/es6.promise.js","webpack:///./~/core-js/modules/es6.regexp.flags.js","webpack:///./~/core-js/modules/es6.regexp.match.js","webpack:///./~/core-js/modules/es6.regexp.replace.js","webpack:///./~/core-js/modules/es6.regexp.search.js","webpack:///./~/core-js/modules/es6.regexp.split.js","webpack:///./~/core-js/modules/es6.set.js","webpack:///./~/core-js/modules/es6.string.code-point-at.js","webpack:///./~/core-js/modules/es6.string.ends-with.js","webpack:///./~/core-js/modules/es6.string.from-code-point.js","webpack:///./~/core-js/modules/es6.string.includes.js","webpack:///./~/core-js/modules/es6.string.raw.js","webpack:///./~/core-js/modules/es6.string.repeat.js","webpack:///./~/core-js/modules/es6.string.starts-with.js","webpack:///./~/core-js/modules/es6.symbol.js","webpack:///./~/core-js/modules/es6.weak-map.js","webpack:///./~/core-js/modules/es6.weak-set.js","webpack:///./~/core-js/modules/es7.array.includes.js","webpack:///./~/core-js/modules/es7.object.entries.js","webpack:///./~/core-js/modules/es7.object.get-own-property-descriptors.js","webpack:///./~/core-js/modules/es7.object.values.js","webpack:///./~/core-js/modules/es7.string.pad-end.js","webpack:///./~/core-js/modules/es7.string.pad-start.js","webpack:///./~/core-js/modules/web.dom.iterable.js","webpack:///./~/core-js/modules/web.immediate.js","webpack:///./~/jasmine-co/index.js","webpack:///./~/regenerator-runtime/runtime.js","webpack:///./src/plugins \\.e2e\\.js$","webpack:///./test/e2e \\.spec\\.js$","webpack:///src/plugins/autoColumnSize/test/autoColumnSize.e2e.js","webpack:///src/plugins/autoRowSize/test/autoRowSize.e2e.js","webpack:///src/plugins/columnSorting/test/columnSorting.e2e.js","webpack:///src/plugins/comments/test/comments.e2e.js","webpack:///src/plugins/contextMenu/test/alignment.e2e.js","webpack:///src/plugins/contextMenu/test/contextMenu.e2e.js","webpack:///src/plugins/contextMenu/test/predefinedItems/readOnly.e2e.js","webpack:///src/plugins/copyPaste/test/copyPaste.e2e.js","webpack:///src/plugins/customBorders/test/customBorders.e2e.js","webpack:///src/plugins/dragToScroll/test/dragToScroll.e2e.js","webpack:///src/plugins/manualColumnFreeze/test/manualColumnFreeze.e2e.js","webpack:///src/plugins/manualColumnMove/test/manualColumnMove.e2e.js","webpack:///src/plugins/manualColumnMove/test/manualColumnMoveUI.e2e.js","webpack:///src/plugins/manualColumnResize/test/manualColumnResize.e2e.js","webpack:///src/plugins/manualRowMove/test/manualRowMove.e2e.js","webpack:///src/plugins/manualRowMove/test/manualRowMoveUI.e2e.js","webpack:///src/plugins/manualRowResize/test/manualRowResize.e2e.js","webpack:///src/plugins/mergeCells/test/canMergeRange.e2e.js","webpack:///src/plugins/observeChanges/test/observeChanges.e2e.js","webpack:///src/plugins/persistentState/test/persistentState.e2e.js","webpack:///src/plugins/search/test/search.e2e.js","webpack:///src/plugins/undoRedo/test/UndoRedo.e2e.js","webpack:///test/e2e/ColHeader.spec.js","webpack:///test/e2e/Core_alter.spec.js","webpack:///test/e2e/Core_beforeKeyDown.spec.js","webpack:///test/e2e/Core_beforechange.spec.js","webpack:///test/e2e/Core_count.spec.js","webpack:///test/e2e/Core_dataSchema.spec.js","webpack:///test/e2e/Core_datachange.spec.js","webpack:///test/e2e/Core_destroy.spec.js","webpack:///test/e2e/Core_destroyEditor.spec.js","webpack:///test/e2e/Core_getCellMeta.spec.js","webpack:///test/e2e/Core_getColHeader.spec.js","webpack:///test/e2e/Core_getDataAt.spec.js","webpack:///test/e2e/Core_getDataType.spec.js","webpack:///test/e2e/Core_getRowHeader.spec.js","webpack:///test/e2e/Core_init.spec.js","webpack:///test/e2e/Core_isEmpty.spec.js","webpack:///test/e2e/Core_keepEmptyRows.spec.js","webpack:///test/e2e/Core_listen.spec.js","webpack:///test/e2e/Core_loadData.spec.js","webpack:///test/e2e/Core_navigation.spec.js","webpack:///test/e2e/Core_onKeyDown.spec.js","webpack:///test/e2e/Core_populateFromArray.spec.js","webpack:///test/e2e/Core_reCreate.spec.js","webpack:///test/e2e/Core_removeCellMeta.spec.js","webpack:///test/e2e/Core_render.spec.js","webpack:///test/e2e/Core_selection.spec.js","webpack:///test/e2e/Core_setDataAtCell.spec.js","webpack:///test/e2e/Core_splice.spec.js","webpack:///test/e2e/Core_update.spec.js","webpack:///test/e2e/Core_validate.spec.js","webpack:///test/e2e/Core_view.spec.js","webpack:///test/e2e/Dom.spec.js","webpack:///test/e2e/FillHandle.spec.js","webpack:///test/e2e/Performance.spec.js","webpack:///test/e2e/PluginHooks.spec.js","webpack:///test/e2e/RowHeader.spec.js","webpack:///test/e2e/cellTypes/index.spec.js","webpack:///test/e2e/core/colToProp.spec.js","webpack:///test/e2e/core/countSourceCols.spec.js","webpack:///test/e2e/core/getCellMetaAtRow.spec.js","webpack:///test/e2e/core/getCellsMeta.spec.js","webpack:///test/e2e/core/getCopyableData.spec.js","webpack:///test/e2e/core/getCopyableText.spec.js","webpack:///test/e2e/core/getSourceDataArray.spec.js","webpack:///test/e2e/core/getSourceDataAtCell.spec.js","webpack:///test/e2e/core/propToCol.spec.js","webpack:///test/e2e/core/setCellMeta.spec.js","webpack:///test/e2e/core/spliceCellsMeta.spec.js","webpack:///test/e2e/core/spliceCol.spec.js","webpack:///test/e2e/core/spliceRow.spec.js","webpack:///test/e2e/core/toPhysicalColumn.spec.js","webpack:///test/e2e/core/toPhysicalRow.spec.js","webpack:///test/e2e/core/toVisualColumn.spec.js","webpack:///test/e2e/core/toVisualRow.spec.js","webpack:///test/e2e/editors/autocompleteEditor.spec.js","webpack:///test/e2e/editors/baseEditor.spec.js","webpack:///test/e2e/editors/dateEditor.spec.js","webpack:///test/e2e/editors/dropdownEditor.spec.js","webpack:///test/e2e/editors/handsontableEditor.spec.js","webpack:///test/e2e/editors/index.spec.js","webpack:///test/e2e/editors/noEditor.spec.js","webpack:///test/e2e/editors/numericEditor.spec.js","webpack:///test/e2e/editors/passwordEditor.spec.js","webpack:///test/e2e/editors/selectEditor.spec.js","webpack:///test/e2e/editors/textEditor.spec.js","webpack:///test/e2e/index.js","webpack:///test/e2e/publicAPI.spec.js","webpack:///test/e2e/renderers/autocompleteRenderer.spec.js","webpack:///test/e2e/renderers/cellDecorator.spec.js","webpack:///test/e2e/renderers/checkboxRenderer.spec.js","webpack:///test/e2e/renderers/htmlRenderer.spec.js","webpack:///test/e2e/renderers/index.spec.js","webpack:///test/e2e/renderers/numericRenderer.spec.js","webpack:///test/e2e/renderers/passwordRenderer.spec.js","webpack:///test/e2e/renderers/textRenderer.spec.js","webpack:///test/e2e/settings/colWidths.spec.js","webpack:///test/e2e/settings/columns.spec.js","webpack:///test/e2e/settings/copyable.spec.js","webpack:///test/e2e/settings/currentHeaderClassName.spec.js","webpack:///test/e2e/settings/currentRowClassName.spec.js","webpack:///test/e2e/settings/editor.spec.js","webpack:///test/e2e/settings/fixedColumnsLeft.spec.js","webpack:///test/e2e/settings/fixedRowsTop.spec.js","webpack:///test/e2e/settings/fragmentSelection.spec.js","webpack:///test/e2e/settings/maxCols.spec.js","webpack:///test/e2e/settings/maxRows.spec.js","webpack:///test/e2e/settings/renderer.spec.js","webpack:///test/e2e/settings/tableClassName.spec.js","webpack:///test/e2e/utils/ghostTable.spec.js","webpack:///test/e2e/validators/autocompleteValidator.spec.js","webpack:///test/e2e/validators/dateValidator.spec.js","webpack:///test/e2e/validators/index.spec.js","webpack:///test/e2e/validators/numericValidator.spec.js","webpack:///test/e2e/validators/timeValidator.spec.js","webpack:///./~/co/index.js","webpack:///./~/core-js/modules/_array-copy-within.js","webpack:///./~/core-js/modules/_array-fill.js","webpack:///./~/core-js/modules/_array-species-constructor.js","webpack:///./~/core-js/modules/_array-species-create.js","webpack:///./~/core-js/modules/_enum-keys.js","webpack:///./~/core-js/modules/_flags.js","webpack:///./~/core-js/modules/_inherit-if-required.js","webpack:///./~/core-js/modules/_invoke.js","webpack:///./~/core-js/modules/_iter-create.js","webpack:///./~/core-js/modules/_keyof.js","webpack:///./~/core-js/modules/_microtask.js","webpack:///./~/core-js/modules/_object-dps.js","webpack:///./~/core-js/modules/_object-gopn-ext.js","webpack:///./~/core-js/modules/_object-gpo.js","webpack:///./~/core-js/modules/_own-keys.js","webpack:///./~/core-js/modules/_same-value.js","webpack:///./~/core-js/modules/_species-constructor.js","webpack:///./~/core-js/modules/_string-at.js","webpack:///./~/core-js/modules/_wks-define.js","webpack:///./~/is-generator/is-generator.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 213);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 35ab3b82755c1fdb351f","var global    = require('./_global')\n  , core      = require('./_core')\n  , hide      = require('./_hide')\n  , redefine  = require('./_redefine')\n  , ctx       = require('./_ctx')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})\n    , key, own, out, exp;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if(target)redefine(target, key, out, type & $export.U);\n    // export\n    if(exports[key] != out)hide(exports, key, exp);\n    if(IS_PROTO && expProto[key] != out)expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_export.js\n// module id = 0\n// module chunks = 0","var store      = require('./_shared')('wks')\n  , uid        = require('./_uid')\n  , Symbol     = require('./_global').Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_wks.js\n// module id = 1\n// module chunks = 0","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_global.js\n// module id = 2\n// module chunks = 0","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_is-object.js\n// module id = 3\n// module chunks = 0","var isObject = require('./_is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_an-object.js\n// module id = 4\n// module chunks = 0","var anObject       = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , toPrimitive    = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-dp.js\n// module id = 5\n// module chunks = 0","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_descriptors.js\n// module id = 6\n// module chunks = 0","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_has.js\n// module id = 7\n// module chunks = 0","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject')\n  , defined = require('./_defined');\nmodule.exports = function(it){\n  return IObject(defined(it));\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_to-iobject.js\n// module id = 8\n// module chunks = 0","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_to-length.js\n// module id = 9\n// module chunks = 0","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_ctx.js\n// module id = 10\n// module chunks = 0","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_defined.js\n// module id = 11\n// module chunks = 0","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_fails.js\n// module id = 12\n// module chunks = 0","var dP         = require('./_object-dp')\n  , createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_hide.js\n// module id = 13\n// module chunks = 0","var global    = require('./_global')\n  , hide      = require('./_hide')\n  , has       = require('./_has')\n  , SRC       = require('./_uid')('src')\n  , TO_STRING = 'toString'\n  , $toString = Function[TO_STRING]\n  , TPL       = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function(it){\n  return $toString.call(it);\n};\n\n(module.exports = function(O, key, val, safe){\n  var isFunction = typeof val == 'function';\n  if(isFunction)has(val, 'name') || hide(val, 'name', key);\n  if(O[key] === val)return;\n  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if(O === global){\n    O[key] = val;\n  } else {\n    if(!safe){\n      delete O[key];\n      hide(O, key, val);\n    } else {\n      if(O[key])O[key] = val;\n      else hide(O, key, val);\n    }\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString(){\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_redefine.js\n// module id = 14\n// module chunks = 0","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables')\n  , ArrayProto  = Array.prototype;\nif(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function(key){\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_add-to-unscopables.js\n// module id = 15\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_cof.js\n// module id = 16\n// module chunks = 0","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = require('./_object-keys-internal')\n  , enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-keys.js\n// module id = 17\n// module chunks = 0","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_property-desc.js\n// module id = 18\n// module chunks = 0","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function(it){\n  return Object(defined(it));\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_to-object.js\n// module id = 19\n// module chunks = 0","var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_core.js\n// module id = 20\n// module chunks = 0","module.exports = {};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_iterators.js\n// module id = 21\n// module chunks = 0","var META     = require('./_uid')('meta')\n  , isObject = require('./_is-object')\n  , has      = require('./_has')\n  , setDesc  = require('./_object-dp').f\n  , id       = 0;\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\nvar FREEZE = !require('./_fails')(function(){\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function(it){\n  setDesc(it, META, {value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  }});\n};\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add metadata\n    if(!create)return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function(it, create){\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return true;\n    // not necessary to add metadata\n    if(!create)return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function(it){\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY:      META,\n  NEED:     false,\n  fastKey:  fastKey,\n  getWeak:  getWeak,\n  onFreeze: onFreeze\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_meta.js\n// module id = 22\n// module chunks = 0","exports.f = {}.propertyIsEnumerable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-pie.js\n// module id = 23\n// module chunks = 0","var def = require('./_object-dp').f\n  , has = require('./_has')\n  , TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_set-to-string-tag.js\n// module id = 24\n// module chunks = 0","var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_uid.js\n// module id = 25\n// module chunks = 0","module.exports = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_an-instance.js\n// module id = 26\n// module chunks = 0","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx      = require('./_ctx')\n  , IObject  = require('./_iobject')\n  , toObject = require('./_to-object')\n  , toLength = require('./_to-length')\n  , asc      = require('./_array-species-create');\nmodule.exports = function(TYPE, $create){\n  var IS_MAP        = TYPE == 1\n    , IS_FILTER     = TYPE == 2\n    , IS_SOME       = TYPE == 3\n    , IS_EVERY      = TYPE == 4\n    , IS_FIND_INDEX = TYPE == 6\n    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX\n    , create        = $create || asc;\n  return function($this, callbackfn, that){\n    var O      = toObject($this)\n      , self   = IObject(O)\n      , f      = ctx(callbackfn, that, 3)\n      , length = toLength(self.length)\n      , index  = 0\n      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined\n      , val, res;\n    for(;length > index; index++)if(NO_HOLES || index in self){\n      val = self[index];\n      res = f(val, index, O);\n      if(TYPE){\n        if(IS_MAP)result[index] = res;            // map\n        else if(res)switch(TYPE){\n          case 3: return true;                    // some\n          case 5: return val;                     // find\n          case 6: return index;                   // findIndex\n          case 2: result.push(val);               // filter\n        } else if(IS_EVERY)return false;          // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_array-methods.js\n// module id = 27\n// module chunks = 0","'use strict';\nvar global            = require('./_global')\n  , $export           = require('./_export')\n  , redefine          = require('./_redefine')\n  , redefineAll       = require('./_redefine-all')\n  , meta              = require('./_meta')\n  , forOf             = require('./_for-of')\n  , anInstance        = require('./_an-instance')\n  , isObject          = require('./_is-object')\n  , fails             = require('./_fails')\n  , $iterDetect       = require('./_iter-detect')\n  , setToStringTag    = require('./_set-to-string-tag')\n  , inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){\n  var Base  = global[NAME]\n    , C     = Base\n    , ADDER = IS_MAP ? 'set' : 'add'\n    , proto = C && C.prototype\n    , O     = {};\n  var fixMethod = function(KEY){\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function(a){\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a){\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a){\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){\n    new C().entries().next();\n  }))){\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance             = new C\n      // early implementations not supports chaining\n      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance\n      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })\n      // most early implementations doesn't supports iterables, most modern - not close it correctly\n      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new\n      // for early implementations -0 and +0 not the same\n      , BUGGY_ZERO = !IS_WEAK && fails(function(){\n        // V8 ~ Chromium 42- fails only with 5+ elements\n        var $instance = new C()\n          , index     = 5;\n        while(index--)$instance[ADDER](index, index);\n        return !$instance.has(-0);\n      });\n    if(!ACCEPT_ITERABLES){ \n      C = wrapper(function(target, iterable){\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base, target, C);\n        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if(IS_WEAK && proto.clear)delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_collection.js\n// module id = 28\n// module chunks = 0","'use strict';\nvar hide     = require('./_hide')\n  , redefine = require('./_redefine')\n  , fails    = require('./_fails')\n  , defined  = require('./_defined')\n  , wks      = require('./_wks');\n\nmodule.exports = function(KEY, length, exec){\n  var SYMBOL   = wks(KEY)\n    , fns      = exec(defined, SYMBOL, ''[KEY])\n    , strfn    = fns[0]\n    , rxfn     = fns[1];\n  if(fails(function(){\n    var O = {};\n    O[SYMBOL] = function(){ return 7; };\n    return ''[KEY](O) != 7;\n  })){\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function(string, arg){ return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function(string){ return rxfn.call(string, this); }\n    );\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_fix-re-wks.js\n// module id = 29\n// module chunks = 0","var ctx         = require('./_ctx')\n  , call        = require('./_iter-call')\n  , isArrayIter = require('./_is-array-iter')\n  , anObject    = require('./_an-object')\n  , toLength    = require('./_to-length')\n  , getIterFn   = require('./core.get-iterator-method')\n  , BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = call(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_for-of.js\n// module id = 30\n// module chunks = 0","module.exports = false;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_library.js\n// module id = 31\n// module chunks = 0","exports.f = Object.getOwnPropertySymbols;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-gops.js\n// module id = 32\n// module chunks = 0","var redefine = require('./_redefine');\nmodule.exports = function(target, src, safe){\n  for(var key in src)redefine(target, key, src[key], safe);\n  return target;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_redefine-all.js\n// module id = 33\n// module chunks = 0","var toInteger = require('./_to-integer')\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_to-index.js\n// module id = 34\n// module chunks = 0","// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_to-integer.js\n// module id = 35\n// module chunks = 0","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_a-function.js\n// module id = 36\n// module chunks = 0","'use strict';\nvar $defineProperty = require('./_object-dp')\n  , createDesc      = require('./_property-desc');\n\nmodule.exports = function(object, index, value){\n  if(index in object)$defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_create-property.js\n// module id = 37\n// module chunks = 0","var isObject = require('./_is-object')\n  , document = require('./_global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_dom-create.js\n// module id = 38\n// module chunks = 0","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_enum-bug-keys.js\n// module id = 39\n// module chunks = 0","var MATCH = require('./_wks')('match');\nmodule.exports = function(KEY){\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch(e){\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch(f){ /* empty */ }\n  } return true;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_fails-is-regexp.js\n// module id = 40\n// module chunks = 0","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_iobject.js\n// module id = 41\n// module chunks = 0","var ITERATOR     = require('./_wks')('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_iter-detect.js\n// module id = 42\n// module chunks = 0","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = require('./_an-object')\n  , dPs         = require('./_object-dps')\n  , enumBugKeys = require('./_enum-bug-keys')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-create.js\n// module id = 43\n// module chunks = 0","var pIE            = require('./_object-pie')\n  , createDesc     = require('./_property-desc')\n  , toIObject      = require('./_to-iobject')\n  , toPrimitive    = require('./_to-primitive')\n  , has            = require('./_has')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , gOPD           = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if(IE8_DOM_DEFINE)try {\n    return gOPD(O, P);\n  } catch(e){ /* empty */ }\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-gopd.js\n// module id = 44\n// module chunks = 0","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys      = require('./_object-keys-internal')\n  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n  return $keys(O, hiddenKeys);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-gopn.js\n// module id = 45\n// module chunks = 0","var shared = require('./_shared')('keys')\n  , uid    = require('./_uid');\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_shared-key.js\n// module id = 46\n// module chunks = 0","var global = require('./_global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_shared.js\n// module id = 47\n// module chunks = 0","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp')\n  , defined  = require('./_defined');\n\nmodule.exports = function(that, searchString, NAME){\n  if(isRegExp(searchString))throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_string-context.js\n// module id = 48\n// module chunks = 0","var ctx                = require('./_ctx')\n  , invoke             = require('./_invoke')\n  , html               = require('./_html')\n  , cel                = require('./_dom-create')\n  , global             = require('./_global')\n  , process            = global.process\n  , setTask            = global.setImmediate\n  , clearTask          = global.clearImmediate\n  , MessageChannel     = global.MessageChannel\n  , counter            = 0\n  , queue              = {}\n  , ONREADYSTATECHANGE = 'onreadystatechange'\n  , defer, channel, port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(require('./_cof')(process) == 'process'){\n    defer = function(id){\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\n    defer = function(id){\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in cel('script')){\n    defer = function(id){\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set:   setTask,\n  clear: clearTask\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_task.js\n// module id = 49\n// module chunks = 0","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_to-primitive.js\n// module id = 50\n// module chunks = 0","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables')\n  , step             = require('./_iter-step')\n  , Iterators        = require('./_iterators')\n  , toIObject        = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.array.iterator.js\n// module id = 51\n// module chunks = 0","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject')\n  , toLength  = require('./_to-length')\n  , toIndex   = require('./_to-index');\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_array-includes.js\n// module id = 52\n// module chunks = 0","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof')\n  , TAG = require('./_wks')('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_classof.js\n// module id = 53\n// module chunks = 0","'use strict';\nvar dP          = require('./_object-dp').f\n  , create      = require('./_object-create')\n  , redefineAll = require('./_redefine-all')\n  , ctx         = require('./_ctx')\n  , anInstance  = require('./_an-instance')\n  , defined     = require('./_defined')\n  , forOf       = require('./_for-of')\n  , $iterDefine = require('./_iter-define')\n  , step        = require('./_iter-step')\n  , setSpecies  = require('./_set-species')\n  , DESCRIPTORS = require('./_descriptors')\n  , fastKey     = require('./_meta').fastKey\n  , SIZE        = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function(that, key){\n  // fast case\n  var index = fastKey(key), entry;\n  if(index !== 'F')return that._i[index];\n  // frozen object case\n  for(entry = that._f; entry; entry = entry.n){\n    if(entry.k == key)return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear(){\n        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){\n          entry.r = true;\n          if(entry.p)entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function(key){\n        var that  = this\n          , entry = getEntry(that, key);\n        if(entry){\n          var next = entry.n\n            , prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if(prev)prev.n = next;\n          if(next)next.p = prev;\n          if(that._f == entry)that._f = next;\n          if(that._l == entry)that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /*, that = undefined */){\n        anInstance(this, C, 'forEach');\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)\n          , entry;\n        while(entry = entry ? entry.n : this._f){\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while(entry && entry.r)entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key){\n        return !!getEntry(this, key);\n      }\n    });\n    if(DESCRIPTORS)dP(C.prototype, 'size', {\n      get: function(){\n        return defined(this[SIZE]);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var entry = getEntry(that, key)\n      , prev, index;\n    // change existing entry\n    if(entry){\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if(!that._f)that._f = entry;\n      if(prev)prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if(index !== 'F')that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function(C, NAME, IS_MAP){\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function(iterated, kind){\n      this._t = iterated;  // target\n      this._k = kind;      // kind\n      this._l = undefined; // previous\n    }, function(){\n      var that  = this\n        , kind  = that._k\n        , entry = that._l;\n      // revert to the last existing entry\n      while(entry && entry.r)entry = entry.p;\n      // get next entry\n      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if(kind == 'keys'  )return step(0, entry.k);\n      if(kind == 'values')return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_collection-strong.js\n// module id = 54\n// module chunks = 0","'use strict';\nvar redefineAll       = require('./_redefine-all')\n  , getWeak           = require('./_meta').getWeak\n  , anObject          = require('./_an-object')\n  , isObject          = require('./_is-object')\n  , anInstance        = require('./_an-instance')\n  , forOf             = require('./_for-of')\n  , createArrayMethod = require('./_array-methods')\n  , $has              = require('./_has')\n  , arrayFind         = createArrayMethod(5)\n  , arrayFindIndex    = createArrayMethod(6)\n  , id                = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function(that){\n  return that._l || (that._l = new UncaughtFrozenStore);\n};\nvar UncaughtFrozenStore = function(){\n  this.a = [];\n};\nvar findUncaughtFrozen = function(store, key){\n  return arrayFind(store.a, function(it){\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function(key){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)return entry[1];\n  },\n  has: function(key){\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function(key, value){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function(key){\n    var index = arrayFindIndex(this.a, function(it){\n      return it[0] === key;\n    });\n    if(~index)this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this)['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var data = getWeak(anObject(key), true);\n    if(data === true)uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_collection-weak.js\n// module id = 55\n// module chunks = 0","module.exports = require('./_global').document && document.documentElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_html.js\n// module id = 56\n// module chunks = 0","module.exports = !require('./_descriptors') && !require('./_fails')(function(){\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_ie8-dom-define.js\n// module id = 57\n// module chunks = 0","// check on default Array iterator\nvar Iterators  = require('./_iterators')\n  , ITERATOR   = require('./_wks')('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_is-array-iter.js\n// module id = 58\n// module chunks = 0","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg){\n  return cof(arg) == 'Array';\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_is-array.js\n// module id = 59\n// module chunks = 0","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object')\n  , floor    = Math.floor;\nmodule.exports = function isInteger(it){\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_is-integer.js\n// module id = 60\n// module chunks = 0","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object')\n  , cof      = require('./_cof')\n  , MATCH    = require('./_wks')('match');\nmodule.exports = function(it){\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_is-regexp.js\n// module id = 61\n// module chunks = 0","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_iter-call.js\n// module id = 62\n// module chunks = 0","'use strict';\nvar LIBRARY        = require('./_library')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , hide           = require('./_hide')\n  , has            = require('./_has')\n  , Iterators      = require('./_iterators')\n  , $iterCreate    = require('./_iter-create')\n  , setToStringTag = require('./_set-to-string-tag')\n  , getPrototypeOf = require('./_object-gpo')\n  , ITERATOR       = require('./_wks')('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_iter-define.js\n// module id = 63\n// module chunks = 0","module.exports = function(done, value){\n  return {value: value, done: !!done};\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_iter-step.js\n// module id = 64\n// module chunks = 0","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys  = require('./_object-keys')\n  , gOPS     = require('./_object-gops')\n  , pIE      = require('./_object-pie')\n  , toObject = require('./_to-object')\n  , IObject  = require('./_iobject')\n  , $assign  = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function(){\n  var A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n  var T     = toObject(target)\n    , aLen  = arguments.length\n    , index = 1\n    , getSymbols = gOPS.f\n    , isEnum     = pIE.f;\n  while(aLen > index){\n    var S      = IObject(arguments[index++])\n      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n  } return T;\n} : $assign;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-assign.js\n// module id = 65\n// module chunks = 0","var has          = require('./_has')\n  , toIObject    = require('./_to-iobject')\n  , arrayIndexOf = require('./_array-includes')(false)\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-keys-internal.js\n// module id = 66\n// module chunks = 0","var getKeys   = require('./_object-keys')\n  , toIObject = require('./_to-iobject')\n  , isEnum    = require('./_object-pie').f;\nmodule.exports = function(isEntries){\n  return function(it){\n    var O      = toIObject(it)\n      , keys   = getKeys(O)\n      , length = keys.length\n      , i      = 0\n      , result = []\n      , key;\n    while(length > i)if(isEnum.call(O, key = keys[i++])){\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-to-array.js\n// module id = 67\n// module chunks = 0","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object')\n  , anObject = require('./_an-object');\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_set-proto.js\n// module id = 68\n// module chunks = 0","'use strict';\nvar global      = require('./_global')\n  , dP          = require('./_object-dp')\n  , DESCRIPTORS = require('./_descriptors')\n  , SPECIES     = require('./_wks')('species');\n\nmodule.exports = function(KEY){\n  var C = global[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_set-species.js\n// module id = 69\n// module chunks = 0","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length')\n  , repeat   = require('./_string-repeat')\n  , defined  = require('./_defined');\n\nmodule.exports = function(that, maxLength, fillString, left){\n  var S            = String(defined(that))\n    , stringLength = S.length\n    , fillStr      = fillString === undefined ? ' ' : String(fillString)\n    , intMaxLength = toLength(maxLength);\n  if(intMaxLength <= stringLength || fillStr == '')return S;\n  var fillLen = intMaxLength - stringLength\n    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_string-pad.js\n// module id = 70\n// module chunks = 0","'use strict';\nvar toInteger = require('./_to-integer')\n  , defined   = require('./_defined');\n\nmodule.exports = function repeat(count){\n  var str = String(defined(this))\n    , res = ''\n    , n   = toInteger(count);\n  if(n < 0 || n == Infinity)throw RangeError(\"Count can't be negative\");\n  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;\n  return res;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_string-repeat.js\n// module id = 71\n// module chunks = 0","exports.f = require('./_wks');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_wks-ext.js\n// module id = 72\n// module chunks = 0","var classof   = require('./_classof')\n  , ITERATOR  = require('./_wks')('iterator')\n  , Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/core.get-iterator-method.js\n// module id = 73\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 74\n// module chunks = 0","// this file is called MemoryLeakTest.js (not MemoryLeak.spec.js) to make sure it is manually executed as the last suite\ndescribe('MemoryLeakTest', () => {\n  it('after all Handsontable instances are destroy()\\'d, there should be no more active listeners', () => {\n    expect(Handsontable._getListenersCounter()).toBe(0);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/MemoryLeakTest.js","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});\n\nrequire('./_add-to-unscopables')('copyWithin');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.array.copy-within.js\n// module id = 78\n// module chunks = 0","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', {fill: require('./_array-fill')});\n\nrequire('./_add-to-unscopables')('fill');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.array.fill.js\n// module id = 79\n// module chunks = 0","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export')\n  , $find   = require('./_array-methods')(6)\n  , KEY     = 'findIndex'\n  , forced  = true;\n// Shouldn't skip holes\nif(KEY in [])Array(1)[KEY](function(){ forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn/*, that = undefined */){\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.array.find-index.js\n// module id = 80\n// module chunks = 0","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export')\n  , $find   = require('./_array-methods')(5)\n  , KEY     = 'find'\n  , forced  = true;\n// Shouldn't skip holes\nif(KEY in [])Array(1)[KEY](function(){ forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn/*, that = undefined */){\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.array.find.js\n// module id = 81\n// module chunks = 0","'use strict';\nvar ctx            = require('./_ctx')\n  , $export        = require('./_export')\n  , toObject       = require('./_to-object')\n  , call           = require('./_iter-call')\n  , isArrayIter    = require('./_is-array-iter')\n  , toLength       = require('./_to-length')\n  , createProperty = require('./_create-property')\n  , getIterFn      = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){\n    var O       = toObject(arrayLike)\n      , C       = typeof this == 'function' ? this : Array\n      , aLen    = arguments.length\n      , mapfn   = aLen > 1 ? arguments[1] : undefined\n      , mapping = mapfn !== undefined\n      , index   = 0\n      , iterFn  = getIterFn(O)\n      , length, result, step, iterator;\n    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){\n      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for(result = new C(length); length > index; index++){\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.array.from.js\n// module id = 82\n// module chunks = 0","'use strict';\nvar $export        = require('./_export')\n  , createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function(){\n  function F(){}\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */){\n    var index  = 0\n      , aLen   = arguments.length\n      , result = new (typeof this == 'function' ? this : Array)(aLen);\n    while(aLen > index)createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.array.of.js\n// module id = 83\n// module chunks = 0","var dP         = require('./_object-dp').f\n  , createDesc = require('./_property-desc')\n  , has        = require('./_has')\n  , FProto     = Function.prototype\n  , nameRE     = /^\\s*function ([^ (]*)/\n  , NAME       = 'name';\n\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function(){\n    try {\n      var that = this\n        , name = ('' + that).match(nameRE)[1];\n      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));\n      return name;\n    } catch(e){\n      return '';\n    }\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.function.name.js\n// module id = 84\n// module chunks = 0","'use strict';\nvar strong = require('./_collection-strong');\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')('Map', function(get){\n  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key){\n    var entry = strong.getEntry(this, key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value){\n    return strong.def(this, key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.map.js\n// module id = 85\n// module chunks = 0","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.number.epsilon.js\n// module id = 86\n// module chunks = 0","// 20.1.2.2 Number.isFinite(number)\nvar $export   = require('./_export')\n  , _isFinite = require('./_global').isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it){\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.number.is-finite.js\n// module id = 87\n// module chunks = 0","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {isInteger: require('./_is-integer')});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.number.is-integer.js\n// module id = 88\n// module chunks = 0","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number){\n    return number != number;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.number.is-nan.js\n// module id = 89\n// module chunks = 0","// 20.1.2.5 Number.isSafeInteger(number)\nvar $export   = require('./_export')\n  , isInteger = require('./_is-integer')\n  , abs       = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number){\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.number.is-safe-integer.js\n// module id = 90\n// module chunks = 0","// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.number.max-safe-integer.js\n// module id = 91\n// module chunks = 0","// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.number.min-safe-integer.js\n// module id = 92\n// module chunks = 0","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.object.assign.js\n// module id = 93\n// module chunks = 0","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', {is: require('./_same-value')});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.object.is.js\n// module id = 94\n// module chunks = 0","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.object.set-prototype-of.js\n// module id = 95\n// module chunks = 0","'use strict';\nvar LIBRARY            = require('./_library')\n  , global             = require('./_global')\n  , ctx                = require('./_ctx')\n  , classof            = require('./_classof')\n  , $export            = require('./_export')\n  , isObject           = require('./_is-object')\n  , aFunction          = require('./_a-function')\n  , anInstance         = require('./_an-instance')\n  , forOf              = require('./_for-of')\n  , speciesConstructor = require('./_species-constructor')\n  , task               = require('./_task').set\n  , microtask          = require('./_microtask')()\n  , PROMISE            = 'Promise'\n  , TypeError          = global.TypeError\n  , process            = global.process\n  , $Promise           = global[PROMISE]\n  , process            = global.process\n  , isNode             = classof(process) == 'process'\n  , empty              = function(){ /* empty */ }\n  , Internal, GenericPromiseCapability, Wrapper;\n\nvar USE_NATIVE = !!function(){\n  try {\n    // correct subclassing with @@species support\n    var promise     = $Promise.resolve(1)\n      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch(e){ /* empty */ }\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // with library wrapper special case\n  return a === b || a === $Promise && b === Wrapper;\n};\nvar isThenable = function(it){\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar newPromiseCapability = function(C){\n  return sameConstructor($Promise, C)\n    ? new PromiseCapability(C)\n    : new GenericPromiseCapability(C);\n};\nvar PromiseCapability = GenericPromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject  = aFunction(reject);\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(promise, isReject){\n  if(promise._n)return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function(){\n    var value = promise._v\n      , ok    = promise._s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , domain  = reaction.domain\n        , result, then;\n      try {\n        if(handler){\n          if(!ok){\n            if(promise._h == 2)onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if(handler === true)result = value;\n          else {\n            if(domain)domain.enter();\n            result = handler(value);\n            if(domain)domain.exit();\n          }\n          if(result === reaction.promise){\n            reject(TypeError('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if(isReject && !promise._h)onUnhandled(promise);\n  });\n};\nvar onUnhandled = function(promise){\n  task.call(global, function(){\n    var value = promise._v\n      , abrupt, handler, console;\n    if(isUnhandled(promise)){\n      abrupt = perform(function(){\n        if(isNode){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if(abrupt)throw abrupt.error;\n  });\n};\nvar isUnhandled = function(promise){\n  if(promise._h == 1)return false;\n  var chain = promise._a || promise._c\n    , i     = 0\n    , reaction;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar onHandleUnhandled = function(promise){\n  task.call(global, function(){\n    var handler;\n    if(isNode){\n      process.emit('rejectionHandled', promise);\n    } else if(handler = global.onrejectionhandled){\n      handler({promise: promise, reason: promise._v});\n    }\n  });\n};\nvar $reject = function(value){\n  var promise = this;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if(!promise._a)promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function(value){\n  var promise = this\n    , then;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if(promise === value)throw TypeError(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      microtask(function(){\n        var wrapper = {_w: promise, _d: false}; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch(e){\n    $reject.call({_w: promise, _d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE){\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor){\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch(err){\n      $reject.call(this, err);\n    }\n  };\n  Internal = function Promise(executor){\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail   = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if(this._a)this._a.push(reaction);\n      if(this._s)notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n  PromiseCapability = function(){\n    var promise  = new Internal;\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject  = ctx($reject, promise, 1);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = newPromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;\n    var capability = newPromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      var values    = []\n        , index     = 0\n        , remaining = 1;\n      forOf(iterable, false, function(promise){\n        var $index        = index++\n          , alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled  = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.promise.js\n// module id = 96\n// module chunks = 0","// 21.2.5.3 get RegExp.prototype.flags()\nif(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.regexp.flags.js\n// module id = 97\n// module chunks = 0","// @@match logic\nrequire('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp){\n    'use strict';\n    var O  = defined(this)\n      , fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.regexp.match.js\n// module id = 98\n// module chunks = 0","// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue){\n    'use strict';\n    var O  = defined(this)\n      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.regexp.replace.js\n// module id = 99\n// module chunks = 0","// @@search logic\nrequire('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){\n  // 21.1.3.15 String.prototype.search(regexp)\n  return [function search(regexp){\n    'use strict';\n    var O  = defined(this)\n      , fn = regexp == undefined ? undefined : regexp[SEARCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n  }, $search];\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.regexp.search.js\n// module id = 100\n// module chunks = 0","// @@split logic\nrequire('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){\n  'use strict';\n  var isRegExp   = require('./_is-regexp')\n    , _split     = $split\n    , $push      = [].push\n    , $SPLIT     = 'split'\n    , LENGTH     = 'length'\n    , LAST_INDEX = 'lastIndex';\n  if(\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ){\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function(separator, limit){\n      var string = String(this);\n      if(separator === undefined && limit === 0)return [];\n      // If `separator` is not a regex, use native split\n      if(!isRegExp(separator))return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while(match = separatorCopy.exec(string)){\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if(lastIndex > lastLastIndex){\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){\n            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;\n          });\n          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if(output[LENGTH] >= splitLimit)break;\n        }\n        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if(lastLastIndex === string[LENGTH]){\n        if(lastLength || !separatorCopy.test(''))output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){\n    $split = function(separator, limit){\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit){\n    var O  = defined(this)\n      , fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.regexp.split.js\n// module id = 101\n// module chunks = 0","'use strict';\nvar strong = require('./_collection-strong');\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')('Set', function(get){\n  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value){\n    return strong.def(this, value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.set.js\n// module id = 102\n// module chunks = 0","'use strict';\nvar $export = require('./_export')\n  , $at     = require('./_string-at')(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos){\n    return $at(this, pos);\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.string.code-point-at.js\n// module id = 103\n// module chunks = 0","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export   = require('./_export')\n  , toLength  = require('./_to-length')\n  , context   = require('./_string-context')\n  , ENDS_WITH = 'endsWith'\n  , $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /*, endPosition = @length */){\n    var that = context(this, searchString, ENDS_WITH)\n      , endPosition = arguments.length > 1 ? arguments[1] : undefined\n      , len    = toLength(that.length)\n      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)\n      , search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.string.ends-with.js\n// module id = 104\n// module chunks = 0","var $export        = require('./_export')\n  , toIndex        = require('./_to-index')\n  , fromCharCode   = String.fromCharCode\n  , $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars\n    var res  = []\n      , aLen = arguments.length\n      , i    = 0\n      , code;\n    while(aLen > i){\n      code = +arguments[i++];\n      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.string.from-code-point.js\n// module id = 105\n// module chunks = 0","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export  = require('./_export')\n  , context  = require('./_string-context')\n  , INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /*, position = 0 */){\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.string.includes.js\n// module id = 106\n// module chunks = 0","var $export   = require('./_export')\n  , toIObject = require('./_to-iobject')\n  , toLength  = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite){\n    var tpl  = toIObject(callSite.raw)\n      , len  = toLength(tpl.length)\n      , aLen = arguments.length\n      , res  = []\n      , i    = 0;\n    while(len > i){\n      res.push(String(tpl[i++]));\n      if(i < aLen)res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.string.raw.js\n// module id = 107\n// module chunks = 0","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.string.repeat.js\n// module id = 108\n// module chunks = 0","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export     = require('./_export')\n  , toLength    = require('./_to-length')\n  , context     = require('./_string-context')\n  , STARTS_WITH = 'startsWith'\n  , $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /*, position = 0 */){\n    var that   = context(this, searchString, STARTS_WITH)\n      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))\n      , search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.string.starts-with.js\n// module id = 109\n// module chunks = 0","'use strict';\n// ECMAScript 6 symbols shim\nvar global         = require('./_global')\n  , has            = require('./_has')\n  , DESCRIPTORS    = require('./_descriptors')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , META           = require('./_meta').KEY\n  , $fails         = require('./_fails')\n  , shared         = require('./_shared')\n  , setToStringTag = require('./_set-to-string-tag')\n  , uid            = require('./_uid')\n  , wks            = require('./_wks')\n  , wksExt         = require('./_wks-ext')\n  , wksDefine      = require('./_wks-define')\n  , keyOf          = require('./_keyof')\n  , enumKeys       = require('./_enum-keys')\n  , isArray        = require('./_is-array')\n  , anObject       = require('./_an-object')\n  , toIObject      = require('./_to-iobject')\n  , toPrimitive    = require('./_to-primitive')\n  , createDesc     = require('./_property-desc')\n  , _create        = require('./_object-create')\n  , gOPNExt        = require('./_object-gopn-ext')\n  , $GOPD          = require('./_object-gopd')\n  , $DP            = require('./_object-dp')\n  , $keys          = require('./_object-keys')\n  , gOPD           = $GOPD.f\n  , dP             = $DP.f\n  , gOPN           = gOPNExt.f\n  , $Symbol        = global.Symbol\n  , $JSON          = global.JSON\n  , _stringify     = $JSON && $JSON.stringify\n  , PROTOTYPE      = 'prototype'\n  , HIDDEN         = wks('_hidden')\n  , TO_PRIMITIVE   = wks('toPrimitive')\n  , isEnum         = {}.propertyIsEnumerable\n  , SymbolRegistry = shared('symbol-registry')\n  , AllSymbols     = shared('symbols')\n  , OPSymbols      = shared('op-symbols')\n  , ObjectProto    = Object[PROTOTYPE]\n  , USE_NATIVE     = typeof $Symbol == 'function'\n  , QObject        = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n  return _create(dP({}, 'a', {\n    get: function(){ return dP(this, 'a', {value: 7}).a; }\n  })).a != 7;\n}) ? function(it, key, D){\n  var protoDesc = gOPD(ObjectProto, key);\n  if(protoDesc)delete ObjectProto[key];\n  dP(it, key, D);\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function(tag){\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n  return typeof it == 'symbol';\n} : function(it){\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D){\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if(has(AllSymbols, key)){\n    if(!D.enumerable){\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n      D = _create(D, {enumerable: createDesc(0, false)});\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P){\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P))\n    , i    = 0\n    , l = keys.length\n    , key;\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P){\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n  it  = toIObject(it);\n  key = toPrimitive(key, true);\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n  var D = gOPD(it, key);\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n  var names  = gOPN(toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n  var IS_OP  = it === ObjectProto\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif(!USE_NATIVE){\n  $Symbol = function Symbol(){\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function(value){\n      if(this === ObjectProto)$set.call(OPSymbols, value);\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f   = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f  = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if(DESCRIPTORS && !require('./_library')){\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function(name){\n    return wrap(wks(name));\n  }\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\nfor(var symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function(key){\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key){\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n    throw TypeError(key + ' is not a symbol!');\n  },\n  useSetter: function(){ setter = true; },\n  useSimple: function(){ setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it){\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n    var args = [it]\n      , i    = 1\n      , replacer, $replacer;\n    while(arguments.length > i)args.push(arguments[i++]);\n    replacer = args[1];\n    if(typeof replacer == 'function')$replacer = replacer;\n    if($replacer || !isArray(replacer))replacer = function(key, value){\n      if($replacer)value = $replacer.call(this, key, value);\n      if(!isSymbol(value))return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.symbol.js\n// module id = 110\n// module chunks = 0","'use strict';\nvar each         = require('./_array-methods')(0)\n  , redefine     = require('./_redefine')\n  , meta         = require('./_meta')\n  , assign       = require('./_object-assign')\n  , weak         = require('./_collection-weak')\n  , isObject     = require('./_is-object')\n  , getWeak      = meta.getWeak\n  , isExtensible = Object.isExtensible\n  , uncaughtFrozenStore = weak.ufstore\n  , tmp          = {}\n  , InternalMap;\n\nvar wrapper = function(get){\n  return function WeakMap(){\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key){\n    if(isObject(key)){\n      var data = getWeak(key);\n      if(data === true)return uncaughtFrozenStore(this).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value){\n    return weak.def(this, key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){\n  InternalMap = weak.getConstructor(wrapper);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function(key){\n    var proto  = $WeakMap.prototype\n      , method = proto[key];\n    redefine(proto, key, function(a, b){\n      // store frozen objects on internal weakmap shim\n      if(isObject(a) && !isExtensible(a)){\n        if(!this._f)this._f = new InternalMap;\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.weak-map.js\n// module id = 111\n// module chunks = 0","'use strict';\nvar weak = require('./_collection-weak');\n\n// 23.4 WeakSet Objects\nrequire('./_collection')('WeakSet', function(get){\n  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value){\n    return weak.def(this, value, true);\n  }\n}, weak, false, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es6.weak-set.js\n// module id = 112\n// module chunks = 0","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export   = require('./_export')\n  , $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /*, fromIndex = 0 */){\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es7.array.includes.js\n// module id = 113\n// module chunks = 0","// https://github.com/tc39/proposal-object-values-entries\nvar $export  = require('./_export')\n  , $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it){\n    return $entries(it);\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es7.object.entries.js\n// module id = 114\n// module chunks = 0","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export        = require('./_export')\n  , ownKeys        = require('./_own-keys')\n  , toIObject      = require('./_to-iobject')\n  , gOPD           = require('./_object-gopd')\n  , createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){\n    var O       = toIObject(object)\n      , getDesc = gOPD.f\n      , keys    = ownKeys(O)\n      , result  = {}\n      , i       = 0\n      , key;\n    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));\n    return result;\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es7.object.get-own-property-descriptors.js\n// module id = 115\n// module chunks = 0","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export')\n  , $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it){\n    return $values(it);\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es7.object.values.js\n// module id = 116\n// module chunks = 0","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export')\n  , $pad    = require('./_string-pad');\n\n$export($export.P, 'String', {\n  padEnd: function padEnd(maxLength /*, fillString = ' ' */){\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es7.string.pad-end.js\n// module id = 117\n// module chunks = 0","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export')\n  , $pad    = require('./_string-pad');\n\n$export($export.P, 'String', {\n  padStart: function padStart(maxLength /*, fillString = ' ' */){\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/es7.string.pad-start.js\n// module id = 118\n// module chunks = 0","var $iterators    = require('./es6.array.iterator')\n  , redefine      = require('./_redefine')\n  , global        = require('./_global')\n  , hide          = require('./_hide')\n  , Iterators     = require('./_iterators')\n  , wks           = require('./_wks')\n  , ITERATOR      = wks('iterator')\n  , TO_STRING_TAG = wks('toStringTag')\n  , ArrayValues   = Iterators.Array;\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype\n    , key;\n  if(proto){\n    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);\n    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/web.dom.iterable.js\n// module id = 119\n// module chunks = 0","var $export = require('./_export')\n  , $task   = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate:   $task.set,\n  clearImmediate: $task.clear\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/web.immediate.js\n// module id = 120\n// module chunks = 0","var co = require('co'),\n    isGeneratorFn = require('is-generator').fn;\n\nvar DEFAULT_METHODS = [\n    'afterAll',\n    'afterEach',\n    'beforeAll',\n    'beforeEach',\n    'it', 'fit', //'xit',\n];\nvar EXPECTS_NAME = ['it', 'fit', 'xit'];\n\nvar originalMethods = {},\n    overrideMethods, installed;\n\nmodule.exports = function jasmineCo(userFn) {\n    return wrapFn(userFn);\n};\nmodule.exports.install = function install() {\n    (overrideMethods || DEFAULT_METHODS).forEach(function(fname) {\n        coifyJasmineFn(fname);\n    });\n    installed = true;\n};\nmodule.exports.uninstall = function uninstall() {\n    Object.keys(originalMethods).forEach(function(key) {\n        global[key] = originalMethods[key];\n    });\n    originalMethods = {};\n    installed = false;\n};\nmodule.exports.isInstalled = function isInstalled() {\n    return installed;\n};\nmodule.exports.setOverrideMethods = function setOverrideMethods(methods) {\n    overrideMethods = Array.isArray(methods) ? methods : DEFAULT_METHODS;\n};\n\nfunction coifyJasmineFn(fname) {\n    // don't process methods that don't exist globally or have already been overridden\n    if (!global[fname] || originalMethods[fname]) { return; }\n\n    var origFn = originalMethods[fname] = global[fname];\n    global[fname] = wrapFn(origFn, EXPECTS_NAME.indexOf(fname) !== -1);\n}\n\nfunction wrapFn(origFn, expectsName) {\n    return function() {\n        var userFn = expectsName ? arguments[1] : arguments[0];\n        var restParams = [].slice.call(arguments, expectsName ? 2 : 1);\n        var args;\n        if (isGeneratorFn(userFn)) {\n            // if the user method is a generator:\n            //   1. call it with the correct `this` context object\n            //   2. wrap it in a co function which fails the spec if an exception is\n            //      encountered and notifies jasmine that the spec is done when the co\n            //      promise settles\n            args = [function(done) {\n                return co(userFn.bind(this)).then(done, done.fail);\n            }];\n            if (expectsName) { args.unshift(arguments[0]); }\n            if (restParams.length) { args.push.apply(args, restParams); }\n            return origFn.apply(null, args);\n        } else if (userFn && !userFn.length) {\n            // if the user method is a standard function that doesn't expect to be asynchronous\n            // (i.e. it doesn't take `done` as a parameter), wrap it with a function that *is*\n            // asynchronous and retrofit it to support returning a promise from the function\n            args = [function(done) {\n                var result = userFn.call(this);\n                if (!(result && typeof result.then === 'function')) {\n                    done();\n                    return result;\n                } else {\n                    result.then(done, done.fail);\n                }\n            }];\n            if (expectsName) { args.unshift(arguments[0]); }\n            if (restParams.length) { args.push.apply(args, restParams); }\n            return origFn.apply(null, args);\n        } else {\n            // if the user method is already asynchronous, just call the standard jasmine method\n            // and let the user method take care of itself\n            return origFn.apply(null, arguments);\n        }\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jasmine-co/index.js\n// module id = 121\n// module chunks = 0","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/regenerator-runtime/runtime.js\n// module id = 122\n// module chunks = 0","var map = {\n\t\"./autoColumnSize/test/autoColumnSize.e2e.js\": 126,\n\t\"./autoRowSize/test/autoRowSize.e2e.js\": 127,\n\t\"./columnSorting/test/columnSorting.e2e.js\": 128,\n\t\"./comments/test/comments.e2e.js\": 129,\n\t\"./contextMenu/test/alignment.e2e.js\": 130,\n\t\"./contextMenu/test/contextMenu.e2e.js\": 131,\n\t\"./contextMenu/test/predefinedItems/readOnly.e2e.js\": 132,\n\t\"./copyPaste/test/copyPaste.e2e.js\": 133,\n\t\"./customBorders/test/customBorders.e2e.js\": 134,\n\t\"./dragToScroll/test/dragToScroll.e2e.js\": 135,\n\t\"./manualColumnFreeze/test/manualColumnFreeze.e2e.js\": 136,\n\t\"./manualColumnMove/test/manualColumnMove.e2e.js\": 137,\n\t\"./manualColumnMove/test/manualColumnMoveUI.e2e.js\": 138,\n\t\"./manualColumnResize/test/manualColumnResize.e2e.js\": 139,\n\t\"./manualRowMove/test/manualRowMove.e2e.js\": 140,\n\t\"./manualRowMove/test/manualRowMoveUI.e2e.js\": 141,\n\t\"./manualRowResize/test/manualRowResize.e2e.js\": 142,\n\t\"./mergeCells/test/canMergeRange.e2e.js\": 143,\n\t\"./observeChanges/test/observeChanges.e2e.js\": 144,\n\t\"./persistentState/test/persistentState.e2e.js\": 145,\n\t\"./search/test/search.e2e.js\": 146,\n\t\"./undoRedo/test/UndoRedo.e2e.js\": 147\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 123;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/plugins \\.e2e\\.js$\n// module id = 123\n// module chunks = 0","var map = {\n\t\"./ColHeader.spec.js\": 148,\n\t\"./Core_alter.spec.js\": 149,\n\t\"./Core_beforeKeyDown.spec.js\": 150,\n\t\"./Core_beforechange.spec.js\": 151,\n\t\"./Core_count.spec.js\": 152,\n\t\"./Core_dataSchema.spec.js\": 153,\n\t\"./Core_datachange.spec.js\": 154,\n\t\"./Core_destroy.spec.js\": 155,\n\t\"./Core_destroyEditor.spec.js\": 156,\n\t\"./Core_getCellMeta.spec.js\": 157,\n\t\"./Core_getColHeader.spec.js\": 158,\n\t\"./Core_getDataAt.spec.js\": 159,\n\t\"./Core_getDataType.spec.js\": 160,\n\t\"./Core_getRowHeader.spec.js\": 161,\n\t\"./Core_init.spec.js\": 162,\n\t\"./Core_isEmpty.spec.js\": 163,\n\t\"./Core_keepEmptyRows.spec.js\": 164,\n\t\"./Core_listen.spec.js\": 165,\n\t\"./Core_loadData.spec.js\": 166,\n\t\"./Core_navigation.spec.js\": 167,\n\t\"./Core_onKeyDown.spec.js\": 168,\n\t\"./Core_populateFromArray.spec.js\": 169,\n\t\"./Core_reCreate.spec.js\": 170,\n\t\"./Core_removeCellMeta.spec.js\": 171,\n\t\"./Core_render.spec.js\": 172,\n\t\"./Core_selection.spec.js\": 173,\n\t\"./Core_setDataAtCell.spec.js\": 174,\n\t\"./Core_splice.spec.js\": 175,\n\t\"./Core_update.spec.js\": 176,\n\t\"./Core_validate.spec.js\": 177,\n\t\"./Core_view.spec.js\": 178,\n\t\"./Dom.spec.js\": 179,\n\t\"./FillHandle.spec.js\": 180,\n\t\"./Performance.spec.js\": 181,\n\t\"./PluginHooks.spec.js\": 182,\n\t\"./RowHeader.spec.js\": 183,\n\t\"./cellTypes/index.spec.js\": 184,\n\t\"./core/colToProp.spec.js\": 185,\n\t\"./core/countSourceCols.spec.js\": 186,\n\t\"./core/getCellMetaAtRow.spec.js\": 187,\n\t\"./core/getCellsMeta.spec.js\": 188,\n\t\"./core/getCopyableData.spec.js\": 189,\n\t\"./core/getCopyableText.spec.js\": 190,\n\t\"./core/getSourceDataArray.spec.js\": 191,\n\t\"./core/getSourceDataAtCell.spec.js\": 192,\n\t\"./core/propToCol.spec.js\": 193,\n\t\"./core/setCellMeta.spec.js\": 194,\n\t\"./core/spliceCellsMeta.spec.js\": 195,\n\t\"./core/spliceCol.spec.js\": 196,\n\t\"./core/spliceRow.spec.js\": 197,\n\t\"./core/toPhysicalColumn.spec.js\": 198,\n\t\"./core/toPhysicalRow.spec.js\": 199,\n\t\"./core/toVisualColumn.spec.js\": 200,\n\t\"./core/toVisualRow.spec.js\": 201,\n\t\"./editors/autocompleteEditor.spec.js\": 202,\n\t\"./editors/baseEditor.spec.js\": 203,\n\t\"./editors/dateEditor.spec.js\": 204,\n\t\"./editors/dropdownEditor.spec.js\": 205,\n\t\"./editors/handsontableEditor.spec.js\": 206,\n\t\"./editors/index.spec.js\": 207,\n\t\"./editors/noEditor.spec.js\": 208,\n\t\"./editors/numericEditor.spec.js\": 209,\n\t\"./editors/passwordEditor.spec.js\": 210,\n\t\"./editors/selectEditor.spec.js\": 211,\n\t\"./editors/textEditor.spec.js\": 212,\n\t\"./publicAPI.spec.js\": 214,\n\t\"./renderers/autocompleteRenderer.spec.js\": 215,\n\t\"./renderers/cellDecorator.spec.js\": 216,\n\t\"./renderers/checkboxRenderer.spec.js\": 217,\n\t\"./renderers/htmlRenderer.spec.js\": 218,\n\t\"./renderers/index.spec.js\": 219,\n\t\"./renderers/numericRenderer.spec.js\": 220,\n\t\"./renderers/passwordRenderer.spec.js\": 221,\n\t\"./renderers/textRenderer.spec.js\": 222,\n\t\"./settings/colWidths.spec.js\": 223,\n\t\"./settings/columns.spec.js\": 224,\n\t\"./settings/copyable.spec.js\": 225,\n\t\"./settings/currentHeaderClassName.spec.js\": 226,\n\t\"./settings/currentRowClassName.spec.js\": 227,\n\t\"./settings/editor.spec.js\": 228,\n\t\"./settings/fixedColumnsLeft.spec.js\": 229,\n\t\"./settings/fixedRowsTop.spec.js\": 230,\n\t\"./settings/fragmentSelection.spec.js\": 231,\n\t\"./settings/maxCols.spec.js\": 232,\n\t\"./settings/maxRows.spec.js\": 233,\n\t\"./settings/renderer.spec.js\": 234,\n\t\"./settings/tableClassName.spec.js\": 235,\n\t\"./utils/ghostTable.spec.js\": 236,\n\t\"./validators/autocompleteValidator.spec.js\": 237,\n\t\"./validators/dateValidator.spec.js\": 238,\n\t\"./validators/index.spec.js\": 239,\n\t\"./validators/numericValidator.spec.js\": 240,\n\t\"./validators/timeValidator.spec.js\": 241\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 124;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./test/e2e \\.spec\\.js$\n// module id = 124\n// module chunks = 0","describe('AutoColumnSize', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfObjects = function() {\n    return [\n      {id: 'Short', name: 'Somewhat long', lastName: 'The very very very longest one', nestedData: [{id: 1000}]}\n    ];\n  };\n\n  it('should apply auto size by default', function() {\n    handsontable({\n      data: arrayOfObjects()\n    });\n\n    var width0 = colWidth(this.$container, 0);\n    var width1 = colWidth(this.$container, 1);\n    var width2 = colWidth(this.$container, 2);\n\n    expect(width0).toBeLessThan(width1);\n    expect(width1).toBeLessThan(width2);\n  });\n\n  it('should update column width after update value in cell (array of objects)', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n        {data: 'lastName'},\n      ]\n    });\n\n    expect(colWidth(this.$container, 0)).toBeAroundValue(50, 3);\n    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 1)]));\n    expect([216, 229, 247, 260]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 2)]));\n\n    setDataAtRowProp(0, 'id', 'foo bar foo bar foo bar');\n    setDataAtRowProp(0, 'name', 'foo');\n\n    expect([165, 168, 169, 189, 191]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n    expect(colWidth(this.$container, 1)).toBeAroundValue(50, 3);\n    expect([216, 229, 247, 260]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 2)]));\n  });\n\n  it('should correctly detect column widths with colHeaders', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: ['Identifier Longer text'],\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n      ]\n    });\n\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n  });\n\n  it('should correctly detect column widths after update colHeaders when headers were passed as an array', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: true,\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n      ]\n    });\n\n    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n\n    updateSettings({colHeaders: ['Identifier Longer text', 'Identifier Longer and longer text']});\n\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n    expect([226, 235, 263, 270]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 1)]));\n  });\n\n  it('should correctly detect column widths after update colHeaders when headers were passed as a string', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: true,\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n      ]\n    });\n\n    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n\n    updateSettings({colHeaders: 'Identifier Longer text'});\n\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 1)]));\n  });\n\n  it('should correctly detect column widths after update colHeaders when headers were passed as a function', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: true,\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n      ]\n    });\n\n    expect([50, 51, 53]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n\n    updateSettings({\n      colHeaders(index) {\n        return index === 0 ? 'Identifier Longer text' : 'Identifier Longer and longer text';\n      },\n    });\n\n    expect([149, 155, 174, 178]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n    expect([226, 235, 263, 270]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 1)]));\n  });\n\n  it('should correctly detect column width with colHeaders and the useHeaders option set to false (not taking the header widths into calculation)', function() {\n    handsontable({\n      data: [\n        {id: 'ab'}\n      ],\n      autoColumnSize: {\n        useHeaders: false\n      },\n      colHeaders: ['Identifier'],\n      columns: [\n        {data: 'id'}\n      ]\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(50);\n  });\n\n  it('should correctly detect column width with columns.title', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        {data: 'id', title: 'Identifier'}\n      ]\n    });\n\n    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n  });\n\n  it('should correctly detect column widths after update columns.title', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        {data: 'id', title: 'Identifier'}\n      ]\n    });\n\n    updateSettings({\n      columns: [\n        {data: 'id', title: 'Identifier with longer text'},\n      ],\n    });\n\n    expect([174, 182, 183, 208, 213]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n  });\n\n  // https://github.com/handsontable/handsontable/issues/2684\n  it('should correctly detect column width when table is hidden on init (display: none)', async () => {\n    spec().$container.css('display', 'none');\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colHeaders: ['Identifier', 'First Name']\n    });\n\n    await sleep(200);\n\n    spec().$container.css('display', 'block');\n    hot.render();\n\n    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(spec().$container, 0)]));\n  });\n\n  it('should keep last columns width unchanged if all rows was removed', function() {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        {data: 'id', title: 'Identifier'},\n        {data: 'name', title: 'Name'},\n        {data: 'lastName', title: 'Last Name'},\n      ]\n    });\n\n    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 1)]));\n    expect([216, 229, 247, 260]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 2)]));\n\n    hot.alter('remove_row', 0);\n\n    expect([68, 70, 71, 80, 82]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 0)]));\n    expect([117, 120, 121, 129, 135]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 1)]));\n    expect([216, 229, 247, 260]).toEqual(jasmine.arrayContaining([colWidth(this.$container, 2)]));\n  });\n\n  it('should be possible to disable plugin using updateSettings', function() {\n    handsontable({\n      data: arrayOfObjects()\n    });\n\n    var width0 = colWidth(this.$container, 0);\n    var width1 = colWidth(this.$container, 1);\n    var width2 = colWidth(this.$container, 2);\n\n    expect(width0).toBeLessThan(width1);\n    expect(width1).toBeLessThan(width2);\n\n    updateSettings({\n      autoColumnSize: false\n    });\n\n    width0 = colWidth(this.$container, 0);\n    width1 = colWidth(this.$container, 1);\n    width2 = colWidth(this.$container, 2);\n\n    expect(width0).toEqual(width1);\n    expect(width0).toEqual(width2);\n    expect(width1).toEqual(width2);\n  });\n\n  it('should apply disabling/enabling plugin using updateSettings, only to a particular HOT instance', function() {\n    this.$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n\n    handsontable({\n      data: arrayOfObjects()\n    });\n\n    this.$container2.handsontable({\n      data: arrayOfObjects()\n    });\n\n    var widths = {\n      1: [],\n      2: []\n    };\n\n    widths[1][0] = colWidth(this.$container, 0);\n    widths[1][1] = colWidth(this.$container, 1);\n    widths[1][2] = colWidth(this.$container, 2);\n\n    widths[2][0] = colWidth(this.$container2, 0);\n    widths[2][1] = colWidth(this.$container2, 1);\n    widths[2][2] = colWidth(this.$container2, 2);\n\n    expect(widths[1][0]).toBeLessThan(widths[1][1]);\n    expect(widths[1][1]).toBeLessThan(widths[1][2]);\n\n    expect(widths[2][0]).toBeLessThan(widths[2][1]);\n    expect(widths[2][1]).toBeLessThan(widths[2][2]);\n\n    updateSettings({\n      autoColumnSize: false\n    });\n\n    widths[1][0] = colWidth(this.$container, 0);\n    widths[1][1] = colWidth(this.$container, 1);\n    widths[1][2] = colWidth(this.$container, 2);\n\n    widths[2][0] = colWidth(this.$container2, 0);\n    widths[2][1] = colWidth(this.$container2, 1);\n    widths[2][2] = colWidth(this.$container2, 2);\n\n    expect(widths[1][0]).toEqual(widths[1][1]);\n    expect(widths[1][0]).toEqual(widths[1][2]);\n    expect(widths[1][1]).toEqual(widths[1][2]);\n\n    expect(widths[2][0]).toBeLessThan(widths[2][1]);\n    expect(widths[2][1]).toBeLessThan(widths[2][2]);\n\n    this.$container2.handsontable('destroy');\n    this.$container2.remove();\n  });\n\n  it('should be possible to enable plugin using updateSettings', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: false\n    });\n\n    var width0 = colWidth(this.$container, 0);\n    var width1 = colWidth(this.$container, 1);\n    var width2 = colWidth(this.$container, 2);\n\n    expect(width0).toEqual(width1);\n    expect(width0).toEqual(width2);\n    expect(width1).toEqual(width2);\n\n    updateSettings({\n      autoColumnSize: true\n    });\n\n    width0 = colWidth(this.$container, 0);\n    width1 = colWidth(this.$container, 1);\n    width2 = colWidth(this.$container, 2);\n\n    expect(width0).toBeLessThan(width1);\n    expect(width1).toBeLessThan(width2);\n  });\n\n  it('should consider CSS style of each instance separately', () => {\n    var $style = $('<style>.big .htCore td {font-size: 40px; line-height: 1.1;}</style>').appendTo('head');\n    var $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable({\n      data: arrayOfObjects()\n    });\n    var $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable({\n      data: arrayOfObjects()\n    });\n    var hot1 = $container1.handsontable('getInstance');\n    var hot2 = $container2.handsontable('getInstance');\n\n    expect(colWidth($container1, 0)).toEqual(colWidth($container2, 0));\n\n    $container1.addClass('big');\n    hot1.render();\n    hot2.render();\n    expect(colWidth($container1, 0)).toBeGreaterThan(colWidth($container2, 0));\n\n    $container1.removeClass('big').handsontable('render');\n    $container2.addClass('big').handsontable('render');\n    expect(colWidth($container1, 0)).toBeLessThan(colWidth($container2, 0));\n\n    $style.remove();\n    $container1.handsontable('destroy');\n    $container1.remove();\n    $container2.handsontable('destroy');\n    $container2.remove();\n  });\n\n  it('should consider CSS class of the <table> element (e.g. when used with Bootstrap)', function() {\n    var $style = $('<style>.htCore.big-table td {font-size: 32px}</style>').appendTo('head');\n\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true\n    });\n\n    var width = colWidth(this.$container, 0);\n\n    this.$container.find('table').addClass('big-table');\n    render();\n    expect(colWidth(this.$container, 0)).toBeGreaterThan(width);\n\n    $style.remove();\n  });\n\n  it('should destroy temporary element', () => {\n    handsontable({\n      autoColumnSize: true\n    });\n\n    expect(document.querySelector('.htAutoSize')).toBe(null);\n  });\n\n  it('should not trigger autoColumnSize when column width is defined (through colWidths)', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colWidths: [70, 70, 70],\n      width: 500,\n      height: 100,\n      rowHeaders: true\n    });\n\n    setDataAtCell(0, 0, 'LongLongLongLong');\n\n    expect(colWidth(this.$container, 0)).toBe(70);\n  });\n\n  it('should not trigger autoColumnSize when column width is defined (through columns.width)', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      colWidth: 77,\n      columns: [\n        {width: 70},\n        {width: 70},\n        {width: 70}\n      ],\n      width: 500,\n      height: 100,\n      rowHeaders: true\n    });\n\n    setDataAtCell(0, 0, 'LongLongLongLong');\n\n    expect(colWidth(this.$container, 0)).toBe(70);\n  });\n\n  it('should consider renderer that uses conditional formatting for specific row & column index', function() {\n    var data = arrayOfObjects();\n    data.push({id: '2', name: 'Rocket Man', lastName: 'In a tin can'});\n    handsontable({\n      data,\n      columns: [\n        {data: 'id'},\n        {data: 'name'}\n      ],\n      autoColumnSize: true,\n      renderer(instance, td, row, col, prop, value, cellProperties) {\n        // taken from demo/renderers.html\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        if (row === 1 && col === 0) {\n          td.style.padding = '100px';\n        }\n      }\n    });\n\n    expect(colWidth(this.$container, 0)).toBeGreaterThan(colWidth(this.$container, 1));\n  });\n\n  it('should\\'t serialize value if it is array (nested data sources)', () => {\n    var spy = jasmine.createSpy('renderer');\n\n    handsontable({\n      data: arrayOfObjects(),\n      autoColumnSize: true,\n      columns: [\n        {data: 'nestedData'}\n      ],\n      renderer: spy\n    });\n\n    expect(spy.calls.mostRecent().args[5]).toEqual([{id: 1000}]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/autoColumnSize/test/autoColumnSize.e2e.js","describe('AutoRowSize', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function arrayOfObjects() {\n    return [\n      {id: 'Short'},\n      {id: 'Somewhat\\nlong'},\n      {id: 'The\\nvery\\nvery\\nvery\\nlongest one'}\n    ];\n  }\n  function arrayOfObjects2() {\n    return [\n      {id: 'Short', name: 'Somewhat long'},\n      {id: 'Somewhat long', name: 'The very very longest one'},\n      {id: 'The very very very longest one', name: 'Short'}\n    ];\n  }\n\n  it('should apply auto size by default', function() {\n    handsontable({\n      data: arrayOfObjects()\n    });\n\n    var height0 = rowHeight(this.$container, 0);\n    var height1 = rowHeight(this.$container, 1);\n    var height2 = rowHeight(this.$container, 2);\n\n    expect(height0).toBeLessThan(height1);\n    expect(height1).toBeLessThan(height2);\n  });\n\n  it('should draw scrollbar correctly (proper height) after calculation when autoRowSize option is set (long text in row) #4000', (done) => {\n    var row = ['This is very long text which will break this cell text into two lines'];\n    var data = [];\n    var nrOfRows = 200;\n    var columnWidth = 100;\n\n    for (var i = 0; i < nrOfRows; i += 1) {\n      data.push(row);\n    }\n\n    handsontable({\n      data,\n      colWidths() {\n        return columnWidth;\n      },\n      autoRowSize: true\n    });\n\n    var oldHeight = spec().$container[0].scrollHeight;\n\n    setTimeout(() => {\n      var newHeight = spec().$container[0].scrollHeight;\n      expect(oldHeight).toBeLessThan(newHeight);\n      done();\n    }, 200);\n  });\n\n  describe('should draw scrollbar correctly (proper height) after calculation when autoRowSize option is set (`table td` element height set by CSS) #4000', () => {\n    var cellHeightInPx = 100;\n    var nrOfRows = null;\n    var nrOfColumns = 200,\n      style;\n\n    var SYNC_CALCULATION_LIMIT = Handsontable.plugins.AutoRowSize.SYNC_CALCULATION_LIMIT;\n    var CALCULATION_STEP = Handsontable.plugins.AutoRowSize.CALCULATION_STEP;\n\n    beforeEach(function() {\n      if (!this.$container) {\n        this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n      }\n\n      var css = `.handsontable table td { height: ${cellHeightInPx}px !important }`,\n        head = document.head;\n\n      style = document.createElement('style');\n      style.type = 'text/css';\n\n      if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n      } else {\n        style.appendChild(document.createTextNode(css));\n      }\n\n      $(head).append(style);\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n\n      if (style) {\n        $(style).remove();\n      }\n    });\n\n    it('(SYNC_CALCULATION_LIMIT - 1 rows)', (done) => {\n      nrOfRows = SYNC_CALCULATION_LIMIT - 1;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),\n        autoRowSize: true\n      });\n\n      setTimeout(() => {\n        var newHeight = spec().$container[0].scrollHeight;\n\n        expect(newHeight).toEqual((((cellHeightInPx + 1) * nrOfRows) + 1));\n        done();\n      }, 200);\n    });\n\n    it('(SYNC_CALCULATION_LIMIT + 1 rows)', (done) => {\n      nrOfRows = SYNC_CALCULATION_LIMIT + 1;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),\n        autoRowSize: true\n      });\n\n      setTimeout(() => {\n        var newHeight = spec().$container[0].scrollHeight;\n\n        expect(newHeight).toEqual((((cellHeightInPx + 1) * nrOfRows) + 1));\n        done();\n      }, 200);\n    });\n\n    it('(SYNC_CALCULATION_LIMIT + CALCULATION_STEP - 1 rows)', (done) => {\n\n      nrOfRows = SYNC_CALCULATION_LIMIT + CALCULATION_STEP - 1;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),\n        autoRowSize: true\n      });\n\n      setTimeout(() => {\n        var newHeight = spec().$container[0].scrollHeight;\n\n        expect(newHeight).toEqual((((cellHeightInPx + 1) * nrOfRows) + 1));\n        done();\n      }, 200);\n    });\n\n    it('(SYNC_CALCULATION_LIMIT + CALCULATION_STEP + 1 rows)', (done) => {\n\n      nrOfRows = SYNC_CALCULATION_LIMIT + CALCULATION_STEP + 1;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(nrOfRows, nrOfColumns),\n        autoRowSize: true\n      });\n\n      setTimeout(() => {\n        var newHeight = spec().$container[0].scrollHeight;\n\n        expect(newHeight).toEqual((((cellHeightInPx + 1) * nrOfRows) + 1));\n        done();\n      }, 200);\n    });\n  });\n\n  it('should correctly detect row height when table is hidden on init (display: none)', function(done) {\n    this.$container.css('display', 'none');\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      rowHeaders: true,\n      autoRowSize: true\n    });\n\n    setTimeout(() => {\n      spec().$container.css('display', 'block');\n      hot.render();\n\n      expect(rowHeight(spec().$container, 0)).toBe(24);\n      expect(rowHeight(spec().$container, 1)).toBe(43);\n      expect([106, 127]).toEqual(jasmine.arrayContaining([rowHeight(spec().$container, 2)]));\n      done();\n    }, 200);\n  });\n\n  it('should be possible to disable plugin using updateSettings', function() {\n    var hot = handsontable({\n      data: arrayOfObjects()\n    });\n\n    var height0 = rowHeight(this.$container, 0);\n    var height1 = rowHeight(this.$container, 1);\n    var height2 = rowHeight(this.$container, 2);\n\n    expect(height0).toBeLessThan(height1);\n    expect(height1).toBeLessThan(height2);\n\n    updateSettings({\n      autoRowSize: false\n    });\n    hot.setDataAtCell(0, 0, 'A\\nB\\nC');\n\n    var height4 = rowHeight(this.$container, 0);\n\n    expect(height4).toBeGreaterThan(height0);\n  });\n\n  it('should be possible to enable plugin using updateSettings', () => {\n    handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: false\n    });\n\n    var height0 = parseInt(getCell(0, 0).style.height, 10);\n    var height1 = parseInt(getCell(1, 0).style.height, 10);\n    var height2 = parseInt(getCell(2, 0).style.height, 10);\n\n    expect(height0).toEqual(height1);\n    expect(height0).toEqual(height2);\n    expect(height1).toEqual(height2);\n\n    updateSettings({\n      autoRowSize: true\n    });\n\n    height0 = parseInt(getCell(0, 0).style.height, 10);\n    height1 = parseInt(getCell(1, 0).style.height, 10);\n    height2 = parseInt(getCell(2, 0).style.height, 10);\n\n    expect(height0).toBeLessThan(height1);\n    expect(height1).toBeLessThan(height2);\n  });\n\n  it('should consider CSS style of each instance separately', () => {\n    var $style = $('<style>.big .htCore td {font-size: 40px;line-height: 1.1}</style>').appendTo('head');\n    var $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true\n    });\n    var $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true\n    });\n    var hot1 = $container1.handsontable('getInstance');\n    var hot2 = $container2.handsontable('getInstance');\n\n    expect(parseInt(hot1.getCell(0, 0).style.height, 10)).toEqual(parseInt(hot2.getCell(0, 0).style.height, 10));\n\n    $container1.addClass('big');\n    hot1.render();\n    hot2.render();\n\n    expect(parseInt(hot1.getCell(2, 0).style.height, 10)).toBeGreaterThan(parseInt(hot2.getCell(2, 0).style.height, 10));\n\n    $container1.removeClass('big');\n    hot1.render();\n    $container2.addClass('big');\n    hot2.render();\n\n    expect(parseInt(hot1.getCell(2, 0).style.height, 10)).toBeLessThan(parseInt(hot2.getCell(2, 0).style.height, 10));\n\n    $style.remove();\n    $container1.handsontable('destroy');\n    $container1.remove();\n    $container2.handsontable('destroy');\n    $container2.remove();\n  });\n\n  it('should consider CSS class of the <table> element (e.g. when used with Bootstrap)', function() {\n    var $style = $('<style>.htCore.big-table td {font-size: 32px;line-height: 1.1}</style>').appendTo('head');\n\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true\n    });\n    var height = parseInt(hot.getCell(2, 0).style.height, 10);\n\n    this.$container.find('table').addClass('big-table');\n    hot.getPlugin('autoRowSize').clearCache();\n    render();\n    expect(parseInt(hot.getCell(2, 0).style.height, 10)).toBeGreaterThan(height);\n\n    $style.remove();\n  });\n\n  it('should not trigger autoColumnSize when column width is defined (through colWidths)', () => {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true,\n      rowHeights: [70, 70, 70],\n      width: 500,\n      height: 100,\n      rowHeaders: true\n    });\n\n    setDataAtCell(0, 0, 'LongLongLongLong');\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(69); // -1px of cell border\n  });\n\n  // Currently columns.height is not supported\n  xit('should not trigger autoRowSize when column height is defined (through columns.height)', () => {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      autoRowSize: true,\n      rowHeights: 77,\n      columns: [\n        {height: 70},\n        {height: 70},\n        {height: 70}\n      ],\n      width: 500,\n      height: 100,\n      rowHeaders: true\n    });\n\n    setDataAtCell(0, 0, 'LongLongLongLong');\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(69); // -1px of cell border\n  });\n\n  it('should consider renderer that uses conditional formatting for specific row & column index', () => {\n    var data = arrayOfObjects();\n    data.push({id: '2', name: 'Rocket Man', lastName: 'In a tin can'});\n\n    var hot = handsontable({\n      data,\n      columns: [\n        {data: 'id'},\n        {data: 'name'}\n      ],\n      autoRowSize: true,\n      renderer(instance, td, row, col, prop, value, cellProperties) {\n        // taken from demo/renderers.html\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n\n        if (row === 1 && col === 0) {\n          td.style.padding = '100px';\n        }\n      }\n    });\n\n    expect(parseInt(hot.getCell(1, 0).style.height || 0, 10)).toBe(242);\n  });\n\n  it('should destroy temporary element', () => {\n    handsontable({\n      autoRowSize: true\n    });\n\n    expect(document.querySelector('.htAutoSize')).toBe(null);\n  });\n\n  it('should recalculate heights after column resize', function() {\n    var hot = handsontable({\n      data: arrayOfObjects2(),\n      colWidths: 250,\n      manualColumnResize: true,\n      autoRowSize: true,\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22); // -1px of cell border\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n\n    resizeColumn.call(this, 1, 100);\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);\n    expect([63, 84]).toEqual(jasmine.arrayContaining([parseInt(hot.getCell(2, -1).style.height, 10)]));\n\n    resizeColumn.call(this, 1, 50);\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(126);\n\n    resizeColumn.call(this, 1, 200);\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(42);\n  });\n\n  it('should recalculate heights after column moved', () => {\n    var hot = handsontable({\n      data: arrayOfObjects2(),\n      colWidths: [250, 50],\n      manualColumnMove: true,\n      autoRowSize: true,\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    var plugin = hot.getPlugin('manualColumnMove');\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(42); // -1px of cell border\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(105); // -1px of cell border\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n\n    plugin.moveColumn(0, 2);\n    hot.render();\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(42);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBe(126);\n  });\n\n  it('should recalculate heights with manualRowResize when changing text to multiline', () => {\n    var hot = handsontable({\n      data: arrayOfObjects2(),\n      colWidths: 250,\n      manualRowResize: [23, 50],\n      autoRowSize: true,\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(49); // -1px of cell border\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n\n    hot.setDataAtCell(1, 0, 'A\\nB\\nC\\nD\\nE');\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(105);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]);\n  });\n\n  it('should recalculate heights after moved row', () => {\n    var hot = handsontable({\n      data: arrayOfObjects2(),\n      colWidths: 250,\n      manualRowResize: [23, 50],\n      manualRowMove: true,\n      autoRowSize: true,\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(22); // -1px of cell border\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(49); // -1px of cell border\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n\n    var plugin = hot.getPlugin('manualRowMove');\n    plugin.moveRow(1, 0);\n    hot.render();\n\n    expect(parseInt(hot.getCell(0, -1).style.height, 10)).toBe(49);\n    expect(parseInt(hot.getCell(1, -1).style.height, 10)).toBe(22);\n    expect(parseInt(hot.getCell(2, -1).style.height, 10)).toBeInArray([22, 42]); // -1px of cell border\n  });\n\n  it('should resize the column headers properly, according the their content sizes', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(30, 30),\n      colHeaders(index) {\n        if (index === 22) {\n          return 'a<br>much<br>longer<br>label';\n        }\n        return 'test';\n      },\n      autoRowSize: true,\n      rowHeaders: true,\n      width: 300,\n      height: 300\n    });\n\n    expect(rowHeight(spec().$container, -1)).toBe(89);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/autoRowSize/test/autoRowSize.e2e.js","describe('ColumnSorting', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"overflow: auto; width: 300px; height: 200px;\"></div>`).appendTo('body');\n\n    this.sortByColumn = function(columnIndex) {\n      var element = this.$container.find(`th span.columnSorting:eq(${columnIndex})`);\n\n      element.simulate('mousedown');\n      element.simulate('mouseup');\n    };\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfObjects = function() {\n    return [\n      {id: 1, name: 'Ted', lastName: 'Right'},\n      {id: 2, name: 'Frank', lastName: 'Honest'},\n      {id: 3, name: 'Joan', lastName: 'Well'},\n      {id: 4, name: 'Sid', lastName: 'Strong'},\n      {id: 5, name: 'Jane', lastName: 'Neat'},\n      {id: 6, name: 'Chuck', lastName: 'Jackson'},\n      {id: 7, name: 'Meg', lastName: 'Jansen'},\n      {id: 8, name: 'Rob', lastName: 'Norris'},\n      {id: 9, name: 'Sean', lastName: 'O\\'Hara'},\n      {id: 10, name: 'Eve', lastName: 'Branson'}\n    ];\n  };\n\n  it('should sort table by first visible column', function() {\n    var hot = handsontable({\n      data: [\n        [1, 9, 3, 4, 5, 6, 7, 8, 9],\n        [9, 8, 7, 6, 5, 4, 3, 2, 1],\n        [8, 7, 6, 5, 4, 3, 3, 1, 9],\n        [0, 3, 0, 5, 6, 7, 8, 9, 1]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('9');\n    expect(htCore.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(0) td:eq(3)').text()).toEqual('4');\n\n    this.sortByColumn(0);\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(0) td:eq(3)').text()).toEqual('5');\n  });\n\n  it('should apply stable sort function #3606', () => {\n    var hot = handsontable({\n      data: [\n        ['mercedes1', 'Mercedes', 'A 160', '01/14/2007'],\n        ['citroen1', 'Citroen', 'C4 Coupe', '12/01/2007'],\n        ['opel1', 'Opel', 'Astra', '02/02/2006'],\n        ['bmw1', 'BMW', '320i Coupe', '07/24/2009'],\n        ['citroen2', 'Citroen', 'C4 Coupe', '12/01/2012'],\n        ['opel2', 'Opel', 'Astra', '02/02/2004'],\n        ['mercedes2', 'Mercedes', 'A 160', '01/14/2008'],\n        ['citroen3', 'Citroen', 'C4 Coupe', '12/01/2007'],\n        ['mercedes3', 'Mercedes', 'A 160', '01/14/2009'],\n        ['opel3', 'Opel', 'Astra', '02/02/2006'],\n        ['bmw2', 'BMW', '320i Coupe', '07/24/2013'],\n        ['bmw3', 'BMW', '320i Coupe', '07/24/2012'],\n      ],\n      columns: [\n        {},\n        {},\n        {\n          type: 'date',\n          dateFormat: 'mm/dd/yy'\n        },\n        {\n          type: 'numeric'\n        }\n      ],\n      columnSorting: true\n    });\n\n    hot.sort(1, true); // ASC\n\n    expect(hot.getDataAtCol(0)).toEqual([\n      'bmw1', 'bmw2', 'bmw3',\n      'citroen1', 'citroen2', 'citroen3',\n      'mercedes1', 'mercedes2', 'mercedes3',\n      'opel1', 'opel2', 'opel3'\n    ]);\n\n    hot.sort(1, false); // DESC\n\n    expect(hot.getDataAtCol(0)).toEqual([\n      'opel1', 'opel2', 'opel3',\n      'mercedes1', 'mercedes2', 'mercedes3',\n      'citroen1', 'citroen2', 'citroen3',\n      'bmw1', 'bmw2', 'bmw3'\n    ]);\n  });\n\n  it('should not throw error when trying run handsontable with columnSorting and autoRowSize in the same time.', () => {\n    var errors = 0;\n\n    try {\n      handsontable({\n        data: arrayOfObjects(),\n        autoRowSize: true,\n        columnSorting: true\n      });\n    } catch (e) {\n      errors++;\n    }\n\n    expect(errors).toBe(0);\n  });\n\n  it('should sort numbers descending after 2 clicks on table header', function() {\n    handsontable({\n      data: arrayOfObjects(),\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n    this.sortByColumn(0);\n\n    expect(this.$container.find('tr td').first().html()).toEqual('10');\n  });\n\n  it('should remove specified row from sorted table and NOT sort the table again', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [3, 'D'],\n        [2, 'A'],\n        [0, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n\n    expect(htCore.find('tbody tr').length).toEqual(4);\n\n    // Now if sort is launched, sorting ordered will be reversed\n    hot.sortOrder = false;\n\n    hot.alter('remove_row', 0);\n\n    expect(htCore.find('tbody tr').length).toEqual(3);\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n  });\n\n  it('should add an empty row to sorted table', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'A'],\n        [3, 'D'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('tbody tr').length).toEqual(4);\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n\n    hot.alter('insert_row', 1, 2);\n\n    expect(htCore.find('tbody tr').length).toEqual(6);\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('');\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(4) td:eq(0)').text()).toEqual('2');\n    expect(htCore.find('tbody tr:eq(5) td:eq(0)').text()).toEqual('3');\n  });\n\n  it('should add an empty row to sorted table at a given index', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'A'],\n        [3, 'D'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    var htCore = getHtCore();\n\n    this.sortByColumn(0);\n\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(4) td:eq(0)').text()).toEqual('');\n\n    hot.alter('insert_row', 2);\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('');\n\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('2');\n  });\n\n  it('should NOT sort the table after value update in sorted column', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'A'],\n        [3, 'D'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n\n    this.sortByColumn(0);\n    this.sortByColumn(0);\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n\n    hot.setDataAtCell(1, 0, 20);\n\n    render();\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('20');\n  });\n\n  it('defaultSort comparing function shouldn\\'t change order when comparing empty string, null and undefined', () => {\n    var hot = handsontable({});\n    var defaultSort = hot.getPlugin('columnSorting').defaultSort;\n\n    expect(defaultSort(false, {})(['key1', null], ['key2', null])).toEqual(0);\n    expect(defaultSort(false, {})(['key1', ''], ['key2', ''])).toEqual(0);\n    expect(defaultSort(false, {})(['key1', undefined], ['key2', undefined])).toEqual(0);\n\n    expect(defaultSort(false, {})(['key1', ''], ['key2', null])).toEqual(0);\n    expect(defaultSort(false, {})(['key1', null], ['key2', ''])).toEqual(0);\n\n    expect(defaultSort(false, {})(['key1', ''], ['key2', undefined])).toEqual(0);\n    expect(defaultSort(false, {})(['key1', undefined], ['key2', ''])).toEqual(0);\n\n    expect(defaultSort(false, {})(['key1', null], ['key2', undefined])).toEqual(0);\n    expect(defaultSort(false, {})(['key1', undefined], ['key2', null])).toEqual(0);\n  });\n\n  it('should place empty strings, null and undefined values at proper position (stability of default comparing function)', () => {\n    var hot = handsontable({\n      data: [\n        [null, 'Ted Right'],\n        [undefined, 'Jane Neat'],\n        [null, 'Meg Jansen'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson'],\n        [6, 'Frank Honest'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [9, 'Chuck Jackson'],\n        [10, 'Rob Norris'],\n        [11, 'Eve Well']\n      ],\n      columnSorting: true\n    });\n\n    hot.sort(0, true); // ASC\n\n    expect(hot.getDataAtCol(1)).toEqual([\n      'Frank Honest',\n      'Joan Well',\n      'Sid Strong',\n      'Chuck Jackson',\n      'Rob Norris',\n      'Eve Well',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n\n    hot.sort(0, false); // DESC\n\n    expect(hot.getDataAtCol(1)).toEqual([\n      'Eve Well',\n      'Rob Norris',\n      'Chuck Jackson',\n      'Sid Strong',\n      'Joan Well',\n      'Frank Honest',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n  });\n\n  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` option is enabled ' +\n    '(API call, data type: default)', () => {\n    var hot = handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columnSorting: {\n        sortEmptyCells: true\n      }\n    });\n\n    hot.sort(0, true); // ASC\n\n    expect(hot.getDataAtCol(1)).toEqual([\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n      // empty cells above\n      'Frank Honest',\n      'Joan Well',\n      'Sid Strong',\n      'Chuck Jackson',\n      'Rob Norris'\n    ]);\n\n    hot.sort(0, false); // DESC\n\n    expect(hot.getDataAtCol(1)).toEqual([\n      'Rob Norris',\n      'Chuck Jackson',\n      'Sid Strong',\n      'Joan Well',\n      'Frank Honest',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n  });\n\n  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' +\n    'option is enabled and `column` property of `columnSorting` option is set (data type: default)', function() {\n    var hot = handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columnSorting: {\n        sortEmptyCells: true,\n        sortOrder: true,\n        column: 0\n      }\n    });\n\n    // ASC\n\n    expect(hot.getDataAtCol(1)).toEqual([\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n      // empty cells above\n      'Frank Honest',\n      'Joan Well',\n      'Sid Strong',\n      'Chuck Jackson',\n      'Rob Norris'\n    ]);\n\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n\n    hot = handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columnSorting: {\n        sortEmptyCells: true,\n        sortOrder: false,\n        column: 0\n      }\n    });\n\n    // DESC\n\n    expect(hot.getDataAtCol(1)).toEqual([\n      'Rob Norris',\n      'Chuck Jackson',\n      'Sid Strong',\n      'Joan Well',\n      'Frank Honest',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n  });\n\n  it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' +\n    'option is enabled and `column` property of `columnSorting` option is set (data type: numeric)', function() {\n    var hot = handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columns: [\n        {\n          type: 'numeric'\n        },\n        {}\n      ],\n      columnSorting: {\n        sortEmptyCells: true,\n        sortOrder: true,\n        column: 0\n      }\n    });\n\n    // ASC\n\n    expect(hot.getDataAtCol(1)).toEqual([\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n      // empty cells above\n      'Frank Honest',\n      'Joan Well',\n      'Sid Strong',\n      'Chuck Jackson',\n      'Rob Norris'\n    ]);\n\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n\n    hot = handsontable({\n      data: [\n        [6, 'Frank Honest'],\n        [null, 'Ted Right'],\n        [7, 'Joan Well'],\n        [8, 'Sid Strong'],\n        [undefined, 'Jane Neat'],\n        [9, 'Chuck Jackson'],\n        [null, 'Meg Jansen'],\n        [10, 'Rob Norris'],\n        ['', 'Sean Hara'],\n        ['', 'Eve Branson']\n      ],\n      columnSorting: {\n        sortEmptyCells: true,\n        sortOrder: false,\n        column: 0\n      }\n    });\n\n    // DESC\n\n    expect(hot.getDataAtCol(1)).toEqual([\n      'Rob Norris',\n      'Chuck Jackson',\n      'Sid Strong',\n      'Joan Well',\n      'Frank Honest',\n      // empty cells below\n      'Ted Right',\n      'Jane Neat',\n      'Meg Jansen',\n      'Sean Hara',\n      'Eve Branson',\n    ]);\n  });\n\n  describe('data type: date', () => {\n    it('dateSort comparing function shouldn\\'t change order when comparing empty string, null and undefined', () => {\n      var hot = handsontable({});\n      var dateSort = hot.getPlugin('columnSorting').dateSort;\n\n      expect(dateSort(false, {})(['key1', null], ['key2', null])).toEqual(0);\n      expect(dateSort(false, {})(['key1', ''], ['key2', ''])).toEqual(0);\n      expect(dateSort(false, {})(['key1', undefined], ['key2', undefined])).toEqual(0);\n\n      expect(dateSort(false, {})(['key1', ''], ['key2', null])).toEqual(0);\n      expect(dateSort(false, {})(['key1', null], ['key2', ''])).toEqual(0);\n\n      expect(dateSort(false, {})(['key1', ''], ['key2', undefined])).toEqual(0);\n      expect(dateSort(false, {})(['key1', undefined], ['key2', ''])).toEqual(0);\n\n      expect(dateSort(false, {})(['key1', null], ['key2', undefined])).toEqual(0);\n      expect(dateSort(false, {})(['key1', undefined], ['key2', null])).toEqual(0);\n    });\n\n    it('should place empty strings, null and undefined values at proper position when `sortEmptyCells` ' +\n      'option is enabled and `column` property of `columnSorting` option is set', function() {\n      var hot = handsontable({\n        data: [\n          ['Citroen1', 'C4 Coupe', null],\n          ['Mercedes1', 'A 160', '12/01/2008'],\n          ['Mercedes2', 'A 160', '01/14/2006'],\n          ['Citroen2', 'C4 Coupe', undefined],\n          ['Audi1', 'A4 Avant', '11/19/2011'],\n          ['Opel1', 'Astra', '02/02/2004'],\n          ['Citroen3', 'C4 Coupe', null],\n          ['BMW1', '320i Coupe', '07/24/2011'],\n          ['Citroen4', 'C4 Coupe', ''],\n          ['Citroen5', 'C4 Coupe', ''],\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'MM/DD/YYYY'\n          }\n        ],\n        columnSorting: {\n          sortEmptyCells: true,\n          sortOrder: true,\n          column: 2\n        }\n      });\n\n      // ASC\n\n      expect(hot.getDataAtCol(0)).toEqual([\n        'Citroen1',\n        'Citroen2',\n        'Citroen3',\n        'Citroen4',\n        'Citroen5',\n        // empty cells above\n        'Opel1',\n        'Mercedes2',\n        'Mercedes1',\n        'BMW1',\n        'Audi1'\n      ]);\n\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n\n      hot = handsontable({\n        data: [\n          ['Citroen1', 'C4 Coupe', null],\n          ['Mercedes1', 'A 160', '12/01/2008'],\n          ['Mercedes2', 'A 160', '01/14/2006'],\n          ['Citroen2', 'C4 Coupe', undefined],\n          ['Audi1', 'A4 Avant', '11/19/2011'],\n          ['Opel1', 'Astra', '02/02/2004'],\n          ['Citroen3', 'C4 Coupe', null],\n          ['BMW1', '320i Coupe', '07/24/2011'],\n          ['Citroen4', 'C4 Coupe', ''],\n          ['Citroen5', 'C4 Coupe', ''],\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'MM/DD/YYYY'\n          }\n        ],\n        columnSorting: {\n          sortEmptyCells: true,\n          sortOrder: false,\n          column: 2\n        }\n      });\n\n      // DESC\n\n      expect(hot.getDataAtCol(0)).toEqual([\n        'Audi1',\n        'BMW1',\n        'Mercedes1',\n        'Mercedes2',\n        'Opel1',\n        // empty cells below\n        'Citroen1',\n        'Citroen2',\n        'Citroen3',\n        'Citroen4',\n        'Citroen5'\n      ]);\n    });\n\n    it('should sort date columns (MM/DD/YYYY)', () => {\n      var hot = handsontable({\n        data: [\n          ['Mercedes', 'A 160', '01/14/2006', 6999.9999],\n          ['Citroen', 'C4 Coupe', '12/01/2008', 8330],\n          ['Audi', 'A4 Avant', '11/19/2011', 33900],\n          ['Opel', 'Astra', '02/02/2004', 7000],\n          ['BMW', '320i Coupe', '07/24/2011', 30500]\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'MM/DD/YYYY'\n          },\n          {\n            type: 'numeric'\n          }\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      hot.sort(2, true); // ASC\n\n      expect(hot.getDataAtRow(0)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);\n      expect(hot.getDataAtRow(1)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);\n      expect(hot.getDataAtRow(2)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);\n      expect(hot.getDataAtRow(3)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);\n      expect(hot.getDataAtRow(4)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);\n\n      hot.sort(2, false); // DESC\n\n      expect(hot.getDataAtRow(0)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);\n      expect(hot.getDataAtRow(1)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);\n      expect(hot.getDataAtRow(2)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);\n      expect(hot.getDataAtRow(3)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);\n      expect(hot.getDataAtRow(4)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);\n    });\n\n    it('should sort date columns (DD/MM/YYYY)', () => {\n      var hot = handsontable({\n        data: [\n          ['Mercedes', 'A 160', '01/12/2012', 6999.9999],\n          ['Citroen', 'C4 Coupe', '12/01/2013', 8330],\n          ['Audi', 'A4 Avant', '11/10/2014', 33900],\n          ['Opel', 'Astra', '02/02/2015', 7000],\n          ['BMW', '320i Coupe', '07/02/2013', 30500]\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'DD/MM/YYYY'\n          },\n          {\n            type: 'numeric'\n          }\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      hot.sort(2, true); // ASC\n\n      expect(hot.getDataAtRow(0)).toEqual(['Mercedes', 'A 160', '01/12/2012', 6999.9999]);\n      expect(hot.getDataAtRow(1)).toEqual(['Citroen', 'C4 Coupe', '12/01/2013', 8330]);\n      expect(hot.getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/02/2013', 30500]);\n      expect(hot.getDataAtRow(3)).toEqual(['Audi', 'A4 Avant', '11/10/2014', 33900]);\n      expect(hot.getDataAtRow(4)).toEqual(['Opel', 'Astra', '02/02/2015', 7000]);\n\n      hot.sort(2, false); // DESC\n\n      expect(hot.getDataAtRow(0)).toEqual(['Opel', 'Astra', '02/02/2015', 7000]);\n      expect(hot.getDataAtRow(1)).toEqual(['Audi', 'A4 Avant', '11/10/2014', 33900]);\n      expect(hot.getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/02/2013', 30500]);\n      expect(hot.getDataAtRow(3)).toEqual(['Citroen', 'C4 Coupe', '12/01/2013', 8330]);\n      expect(hot.getDataAtRow(4)).toEqual(['Mercedes', 'A 160', '01/12/2012', 6999.9999]);\n    });\n\n    it('should sort date columns (MMMM Do YYYY)', () => {\n      var hot = handsontable({\n        data: [\n          ['Mercedes', 'A 160', 'October 28th 2016', 6999.9999],\n          ['Citroen', 'C4 Coupe', 'October 27th 2001', 8330],\n          ['Audi', 'A4 Avant', 'July 8th 1999', 33900],\n          ['Opel', 'Astra', 'June 1st 2001', 7000],\n          ['BMW', '320i Coupe', 'August 3rd 2001', 30500]\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'MMMM Do YYYY'\n          },\n          {\n            type: 'numeric'\n          }\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      hot.sort(2, true); // ASC\n\n      expect(hot.getDataAtRow(0)).toEqual(['Audi', 'A4 Avant', 'July 8th 1999', 33900]);\n      expect(hot.getDataAtRow(1)).toEqual(['Opel', 'Astra', 'June 1st 2001', 7000]);\n      expect(hot.getDataAtRow(2)).toEqual(['BMW', '320i Coupe', 'August 3rd 2001', 30500]);\n      expect(hot.getDataAtRow(3)).toEqual(['Citroen', 'C4 Coupe', 'October 27th 2001', 8330]);\n      expect(hot.getDataAtRow(4)).toEqual(['Mercedes', 'A 160', 'October 28th 2016', 6999.9999]);\n\n      hot.sort(2, false); // DESC\n\n      expect(hot.getDataAtRow(0)).toEqual(['Mercedes', 'A 160', 'October 28th 2016', 6999.9999]);\n      expect(hot.getDataAtRow(1)).toEqual(['Citroen', 'C4 Coupe', 'October 27th 2001', 8330]);\n      expect(hot.getDataAtRow(2)).toEqual(['BMW', '320i Coupe', 'August 3rd 2001', 30500]);\n      expect(hot.getDataAtRow(3)).toEqual(['Opel', 'Astra', 'June 1st 2001', 7000]);\n      expect(hot.getDataAtRow(4)).toEqual(['Audi', 'A4 Avant', 'July 8th 1999', 33900]);\n    });\n\n    it('should sort date columns along with empty and null values', () => {\n      var hot = handsontable({\n        data: [\n          ['Mercedes', 'A 160', '01/14/2006', 6999.9999],\n          ['Citroen', 'C4 Coupe', '12/01/2008', 8330],\n          ['Citroen', 'C4 Coupe null', null, 8330],\n          ['Citroen', 'C4 Coupe empty', '', 8330],\n          ['Audi', 'A4 Avant', '11/19/2011', 33900],\n          ['Opel', 'Astra', '02/02/2004', 7000],\n          ['BMW', '320i Coupe', '07/24/2011', 30500]\n        ],\n        columns: [\n          {},\n          {},\n          {\n            type: 'date',\n            dateFormat: 'mm/dd/yy'\n          },\n          {\n            type: 'numeric'\n          }\n        ],\n        colHeaders: true,\n        columnSorting: true\n      });\n\n      hot.sort(2, true); // ASC\n\n      expect(hot.getDataAtRow(0)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);\n      expect(hot.getDataAtRow(1)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);\n      expect(hot.getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);\n      expect(hot.getDataAtRow(3)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);\n      expect(hot.getDataAtRow(4)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);\n\n      hot.sort(2, false); // DESC\n\n      expect(hot.getDataAtRow(0)).toEqual(['Citroen', 'C4 Coupe', '12/01/2008', 8330]);\n      expect(hot.getDataAtRow(1)).toEqual(['Audi', 'A4 Avant', '11/19/2011', 33900]);\n      expect(hot.getDataAtRow(2)).toEqual(['BMW', '320i Coupe', '07/24/2011', 30500]);\n      expect(hot.getDataAtRow(3)).toEqual(['Opel', 'Astra', '02/02/2004', 7000]);\n      expect(hot.getDataAtRow(4)).toEqual(['Mercedes', 'A 160', '01/14/2006', 6999.9999]);\n    });\n  });\n\n  describe('data type: time', () => {\n    it('should properly rewrite time into correct format after sort', (done) => {\n      var hot = handsontable({\n        data: [\n          ['0:00:01 am'],\n          ['5:30:14 pm'],\n          ['8:00:00 pm'],\n          ['11:15:05 am'],\n          ['4:07:48 am']\n        ],\n        columns: [\n          {\n            type: 'time',\n            dateFormat: 'h:mm:ss a',\n            correctFormat: true\n          }\n        ],\n        colHeaders: true,\n        columnSorting: {\n          column: 0,\n          sortOrder: false\n        }\n      });\n\n      hot.setDataAtCell(0, 0, '19:55', 'edit');\n\n      setTimeout(() => {\n        expect(hot.getDataAtCell(0, 0)).toEqual('7:55:00 pm');\n        done();\n      }, 250);\n    });\n  });\n\n  it('should properly sort numeric data', function() {\n    var hot = handsontable({\n      data: [\n        ['Mercedes', 'A 160', '01/14/2006', '6999.9999'],\n        ['Citroen', 'C4 Coupe', '12/01/2008', 8330],\n        ['Citroen', 'C4 Coupe null', null, '8330'],\n        ['Citroen', 'C4 Coupe empty', '', 8333],\n        ['Audi', 'A4 Avant', '11/19/2011', '33900'],\n        ['Opel', 'Astra', '02/02/2004', '7000'],\n        ['BMW', '320i Coupe', '07/24/2011', 30500]\n      ],\n      columns: [\n        {},\n        {},\n        {},\n        {\n          type: 'numeric'\n        }\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    var htCore = getHtCore();\n\n    this.sortByColumn(3);\n\n    expect(hot.getDataAtCol(3)).toEqual(['6999.9999', '7000', 8330, '8330', 8333, 30500, '33900']);\n\n    this.sortByColumn(3);\n\n    expect(hot.getDataAtCol(3)).toEqual(['33900', 30500, 8333, 8330, '8330', '7000', '6999.9999']);\n\n    this.sortByColumn(3);\n\n    expect(hot.getDataAtCol(3)).toEqual(['6999.9999', 8330, '8330', 8333, '33900', '7000', 30500]);\n  });\n\n  it('numericSort comparing function shouldn\\'t change order when comparing empty string, null and undefined', () => {\n    var hot = handsontable({});\n    var numericSort = hot.getPlugin('columnSorting').numericSort;\n\n    expect(numericSort(false, {})(['key1', null], ['key2', null])).toEqual(0);\n    expect(numericSort(false, {})(['key1', ''], ['key2', ''])).toEqual(0);\n    expect(numericSort(false, {})(['key1', undefined], ['key2', undefined])).toEqual(0);\n\n    expect(numericSort(false, {})(['key1', ''], ['key2', null])).toEqual(0);\n    expect(numericSort(false, {})(['key1', null], ['key2', ''])).toEqual(0);\n\n    expect(numericSort(false, {})(['key1', ''], ['key2', undefined])).toEqual(0);\n    expect(numericSort(false, {})(['key1', undefined], ['key2', ''])).toEqual(0);\n\n    expect(numericSort(false, {})(['key1', null], ['key2', undefined])).toEqual(0);\n    expect(numericSort(false, {})(['key1', undefined], ['key2', null])).toEqual(0);\n  });\n\n  it('should sort table with multiple row headers', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columns: [\n        {},\n        {},\n        {\n          type: 'date',\n          dateFormat: 'mm/dd/yy'\n        },\n        {\n          type: 'numeric'\n        }\n      ],\n      colHeaders: true,\n      columnSorting: true,\n      removeRowPlugin: true // this plugin ads an extra row header, so now we have 2 instead of 1\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n\n    this.sortByColumn(0); // sort by first column\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');\n\n    this.sortByColumn(1); // sort by second column\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A');\n  });\n\n  it('should allow to define sorting column and order during initialization', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        column: 0,\n        sortOrder: true\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');\n  });\n\n  it('should allow to change sorting column with updateSettings', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        column: 0,\n        sortOrder: true\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('D');\n\n    updateSettings({\n      columnSorting: {\n        column: 1,\n        sortOrder: true\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n    expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A');\n  });\n\n  it('should allow to change sorting order with updateSettings', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        column: 0,\n        sortOrder: true\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n\n    updateSettings({\n      columnSorting: {\n        column: 0,\n        sortOrder: false\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n  });\n\n  it('should allow to change if sorting empty cells with updateSettings', () => {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [2, ''],\n        [3, 'A'],\n        [4, ''],\n        [6, 'E'],\n        [7, ''],\n        [8, 'F'],\n      ],\n      colHeaders: true,\n      columnSorting: {\n        column: 1,\n        sortOrder: false,\n        sortEmptyCells: false\n      }\n    });\n\n    updateSettings({\n      columnSorting: {\n        column: 1,\n        sortOrder: true,\n        sortEmptyCells: true\n      }\n    });\n\n    // ASC with empty cells sorting\n    expect(hot.getDataAtCol(0)).toEqual([2, 4, 7, 3, 1, 6, 8]);\n\n    updateSettings({\n      columnSorting: {\n        column: 1,\n        sortOrder: true,\n        sortEmptyCells: false\n      }\n    });\n\n    // ASC without empty cells sorting\n    expect(hot.getDataAtCol(0)).toEqual([3, 1, 6, 8, 2, 4, 7]);\n  });\n\n  it('should NOT sort spare rows', () => {\n    var myData = [\n      {a: 'aaa', b: 2, c: 3},\n      {a: 'z', b: 11, c: -4},\n      {a: 'dddd', b: 13, c: 13},\n      {a: 'bbbb', b: 10, c: 11}\n    ];\n\n    function customIsEmptyRow(row) {\n      var data = this.getSourceData();\n      return data[row].isNew;\n    }\n\n    handsontable({\n      data: myData,\n      rowHeaders: true,\n      colHeaders: ['A', 'B', 'C'],\n      columns: [\n        {data: 'a', type: 'text'},\n        {data: 'b', type: 'text'},\n        {data: 'c', type: 'text'}\n      ],\n      dataSchema: {isNew: true, a: false}, // default for a to avoid #bad value#\n      columnSorting: true,\n      minSpareRows: 3,\n      isEmptyRow: customIsEmptyRow\n    });\n\n    // ASC\n\n    updateSettings({\n      columnSorting: {\n        column: 0,\n        sortOrder: true\n      }\n    });\n\n    expect(getData()).toEqual([\n      ['aaa', 2, 3],\n      ['bbbb', 10, 11],\n      ['dddd', 13, 13],\n      ['z', 11, -4],\n      [false, null, null],\n      [false, null, null],\n      [false, null, null]\n    ]);\n\n    updateSettings({\n      columnSorting: {\n        column: 0,\n        sortOrder: false\n      }\n    });\n\n    expect(getData()).toEqual([\n      ['z', 11, -4],\n      ['dddd', 13, 13],\n      ['bbbb', 10, 11],\n      ['aaa', 2, 3],\n      [false, null, null],\n      [false, null, null],\n      [false, null, null]\n    ]);\n  });\n\n  it('should reset column sorting with updateSettings', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        column: 0,\n        sortOrder: true\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n\n    updateSettings({\n      columnSorting: void 0\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n  });\n\n  it('should expose sort method when columnSorting is enabled', () => {\n    var hot = handsontable();\n\n    expect(hot.getSettings().columnSorting).toBeFalsy();\n    expect(hot.sort).toBeUndefined();\n\n    updateSettings({\n      columnSorting: true\n    });\n\n    expect(hot.getSettings().columnSorting).toBe(true);\n    expect(hot.sort).toBeDefined();\n    expect(typeof hot.sort).toBe('function');\n\n    updateSettings({\n      columnSorting: false\n    });\n\n    expect(hot.getSettings().columnSorting).toBeFalsy();\n    expect(hot.sort).toBeUndefined();\n  });\n\n  it('should sort table using HOT.sort method', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: true\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('0');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('2');\n\n    hot.sort(0, true);\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n  });\n\n  it('should reset column sorting with updateSettings', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      colHeaders: true,\n      columnSorting: {\n        column: 0,\n        sortOrder: true\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n\n    updateSettings({\n      columnSorting: void 0\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n  });\n\n  it('should fire beforeColumnSort event before sorting data', function() {\n    var hot = handsontable({\n      data: [\n        [2],\n        [4],\n        [1],\n        [3]\n      ],\n      columnSorting: true\n    });\n\n    this.beforeColumnSortHandler = function() {\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('4');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n    };\n\n    spyOn(this, 'beforeColumnSortHandler');\n\n    hot.addHook('beforeColumnSort', this.beforeColumnSortHandler);\n\n    var sortColumn = 0;\n    var sortOrder = true;\n\n    hot.sort(sortColumn, sortOrder);\n\n    expect(this.beforeColumnSortHandler.calls.count()).toEqual(1);\n    expect(this.beforeColumnSortHandler).toHaveBeenCalledWith(sortColumn, sortOrder, void 0, void 0, void 0, void 0);\n  });\n\n  it('should not sorting column when beforeColumnSort returns false', (done) => {\n    var hot = handsontable({\n      data: [\n        [2],\n        [4],\n        [1],\n        [3]\n      ],\n      columnSorting: true,\n      beforeColumnSort() {\n        return false;\n      }\n    });\n\n    hot.sort(0, true);\n\n    setTimeout(() => {\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('4');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n      expect(spec().$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n      done();\n    }, 200);\n  });\n\n  it('should add beforeColumnSort event listener in constructor', () => {\n    var beforeColumnSortCallback = jasmine.createSpy('beforeColumnSortHandler');\n\n    var hot = handsontable({\n      data: [[2], [4], [1], [3]],\n      columnSorting: true,\n      beforeColumnSort: beforeColumnSortCallback\n    });\n\n    var sortColumn = 0;\n    var sortOrder = true;\n\n    hot.sort(sortColumn, sortOrder);\n\n    expect(beforeColumnSortCallback.calls.count()).toEqual(1);\n    expect(beforeColumnSortCallback).toHaveBeenCalledWith(sortColumn, sortOrder, void 0, void 0, void 0, void 0);\n  });\n\n  it('should fire afterColumnSort event before data has been sorted but before table render', () => {\n    var hot = handsontable({\n      data: [\n        [2],\n        [4],\n        [1],\n        [3]\n      ],\n      columnSorting: true\n    });\n    var rendered = false;\n    var afterColumnSortHandler = jasmine.createSpy('afterColumnSortHandler');\n    var afterRenderSpy = jasmine.createSpy('afterRender');\n\n    hot.addHook('afterColumnSort', function() {\n      expect(rendered).toBe(false);\n      afterColumnSortHandler.apply(afterColumnSortHandler, arguments);\n    });\n    hot.addHook('afterRender', function() {\n      rendered = true;\n      afterRenderSpy.apply(afterRenderSpy, arguments);\n    });\n\n    var sortColumn = 0;\n    var sortOrder = true;\n    afterRenderSpy.calls.reset();\n\n    hot.sort(sortColumn, sortOrder);\n\n    expect(afterColumnSortHandler.calls.count()).toBe(1);\n    expect(afterColumnSortHandler).toHaveBeenCalledWith(sortColumn, sortOrder, void 0, void 0, void 0, void 0);\n    expect(afterRenderSpy.calls.count()).toBe(1);\n  });\n\n  it('should add afterColumnSort event listener in constructor', () => {\n    var afterColumnSortCallback = jasmine.createSpy('afterColumnSortHandler');\n\n    var hot = handsontable({\n      data: [[2], [4], [1], [3]],\n      columnSorting: true,\n      afterColumnSort: afterColumnSortCallback\n    });\n\n    var sortColumn = 0;\n    var sortOrder = true;\n\n    hot.sort(sortColumn, sortOrder);\n\n    expect(afterColumnSortCallback.calls.count()).toEqual(1);\n    expect(afterColumnSortCallback).toHaveBeenCalledWith(sortColumn, sortOrder, void 0, void 0, void 0, void 0);\n  });\n\n  it('should insert row when plugin is enabled, but table hasn\\'t been sorted', () => {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: true\n    });\n\n    expect(countRows()).toEqual(4);\n    expect(hot.sortColumn).toBeUndefined();\n\n    alter('insert_row');\n\n    expect(countRows()).toEqual(5);\n  });\n\n  it('should remove row when plugin is enabled, but table hasn\\'t been sorted', () => {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: true\n    });\n\n    expect(countRows()).toEqual(4);\n    expect(hot.sortColumn).toBeUndefined();\n\n    alter('remove_row');\n\n    expect(countRows()).toEqual(3);\n  });\n\n  it('should display new row added directly to dataSource, when observeChanges plugin is enabled', function(done) {\n    var data = [\n      [1, 'B'],\n      [0, 'A'],\n      [3, 'D'],\n      [2, 'C']\n    ];\n\n    var hot = handsontable({\n      data,\n      colHeaders: true,\n      columnSorting: true,\n      observeChanges: true\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('2');\n\n    this.sortByColumn(0);\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n\n    expect(htCore.find('tbody tr').length).toEqual(4);\n\n    var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n    hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n    data.push([5, 'E']);\n\n    setTimeout(() => {\n      expect(countRows()).toEqual(5);\n      expect(spec().$container.find('tbody tr:eq(4) td:eq(0)').text()).toEqual('5');\n      expect(spec().$container.find('tbody tr:eq(4) td:eq(1)').text()).toEqual('E');\n      done();\n    }, 200);\n  });\n\n  it('should not display new row added directly to dataSource, when observeChanges plugin is explicitly disabled', function(done) {\n    var data = [\n      [1, 'B'],\n      [0, 'A'],\n      [3, 'D'],\n      [2, 'C']\n    ];\n\n    var hot = handsontable({\n      data,\n      colHeaders: true,\n      columnSorting: true,\n      observeChanges: false\n    });\n\n    var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n    hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('2');\n\n    this.sortByColumn(0);\n\n    expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n    expect(htCore.find('tbody tr').length).toEqual(4);\n\n    data.push([5, 'E']);\n\n    setTimeout(() => {\n      expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n      expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n      expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n      expect(htCore.find('tbody tr').length).toEqual(4);\n      expect(afterChangesObservedCallback).not.toHaveBeenCalled();\n      done();\n    }, 100);\n  });\n\n  it('should display new row added directly to dataSource, when observeChanges plugin status is undefined', (done) => {\n    var data = [\n      [1, 'B'],\n      [0, 'A'],\n      [3, 'D'],\n      [2, 'C']\n    ];\n\n    var onUpdateSettings = jasmine.createSpy('onUpdateSettings');\n\n    var hot = handsontable({\n      data,\n      colHeaders: true,\n      columnSorting: true,\n      afterUpdateSettings: onUpdateSettings\n    });\n\n    var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n    hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n    var htCore = getHtCore();\n\n    // columnSorting enables observeChanges plugin by asynchronously invoking updateSettings\n    setTimeout(() => {\n      expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('0');\n      expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n      expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('2');\n\n      spec().sortByColumn(0);\n\n      expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n      expect(htCore.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n      expect(htCore.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n      expect(htCore.find('tbody tr').length).toEqual(4);\n\n      data.push([5, 'E']);\n    }, 100);\n\n    setTimeout(() => {\n      expect(countRows()).toEqual(5);\n      expect(htCore.find('tbody tr:eq(4) td:eq(0)').text()).toEqual('5');\n      expect(htCore.find('tbody tr:eq(4) td:eq(1)').text()).toEqual('E');\n      done();\n    }, 2000); // 2s delayed needs for safari env\n  });\n\n  it('should apply sorting when there are two tables and only one has sorting enabled and has been already sorted (#1020)', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: {\n        column: 1\n      }\n    });\n\n    this.$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n    this.$container2.handsontable();\n    var hot2 = this.$container2.handsontable('getInstance');\n\n    selectCell(0, 1);\n    keyDown('enter');\n    expect($('.handsontableInput').val()).toEqual('A');\n\n    this.$container2.handsontable('destroy');\n    this.$container2.remove();\n  });\n\n  it('should reset sorting after loading new data', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: true\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('0');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('2');\n\n    hot.sort(0, true);\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n\n    loadData([\n      [50, 'E'],\n      [10, 'G'],\n      [30, 'F'],\n      [60, 'I'],\n      [40, 'J'],\n      [20, 'H']\n    ]);\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('50');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('10');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('30');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('60');\n    expect(this.$container.find('tbody tr:eq(4) td:eq(0)').text()).toEqual('40');\n    expect(this.$container.find('tbody tr:eq(5) td:eq(0)').text()).toEqual('20');\n\n  });\n\n  it('should reset sorting after loading new data (default sorting column and order set)', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'B'],\n        [0, 'D'],\n        [3, 'A'],\n        [2, 'C']\n      ],\n      columnSorting: {\n        column: 1,\n        sortOrder: true\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('0');\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(1)').text()).toEqual('B');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(1)').text()).toEqual('C');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(1)').text()).toEqual('D');\n\n    hot.sort(0, true);\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('0');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('3');\n\n    loadData([\n      [50, 'E'],\n      [10, 'G'],\n      [30, 'F'],\n      [60, 'I'],\n      [40, 'J'],\n      [20, 'H']\n    ]);\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('50');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('30');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('10');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(0)').text()).toEqual('20');\n    expect(this.$container.find('tbody tr:eq(4) td:eq(0)').text()).toEqual('60');\n    expect(this.$container.find('tbody tr:eq(5) td:eq(0)').text()).toEqual('40');\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('E');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(1)').text()).toEqual('F');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(1)').text()).toEqual('G');\n    expect(this.$container.find('tbody tr:eq(3) td:eq(1)').text()).toEqual('H');\n    expect(this.$container.find('tbody tr:eq(4) td:eq(1)').text()).toEqual('I');\n    expect(this.$container.find('tbody tr:eq(5) td:eq(1)').text()).toEqual('J');\n\n  });\n\n  it('should return updated data at specyfied row after sorted', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, 'Frank', 'Honest'],\n        [3, 'Joan', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n\n    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n\n    this.sortByColumn(0);\n\n    expect(getDataAtRow(0)).toEqual([5, 'Jane', 'Neat']);\n    expect(getDataAtRow(4)).toEqual([1, 'Ted', 'Right']);\n\n    this.sortByColumn(0);\n\n    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n  });\n\n  it('should return updated data at specyfied col after sorted', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, 'Frank', 'Honest'],\n        [3, 'Joan', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n\n    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    this.sortByColumn(0);\n\n    expect(getDataAtCol(0)).toEqual([5, 4, 3, 2, 1]);\n    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Joan', 'Frank', 'Ted']);\n\n    this.sortByColumn(0);\n\n    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n  });\n\n  it('should return original data source at specified row after sorted', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, 'Frank', 'Honest'],\n        [3, 'Joan', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n\n    expect(getDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n\n    expect(getSourceDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getSourceDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n\n    this.sortByColumn(0);\n\n    expect(getDataAtRow(0)).toEqual([5, 'Jane', 'Neat']);\n    expect(getDataAtRow(4)).toEqual([1, 'Ted', 'Right']);\n\n    expect(getSourceDataAtRow(0)).toEqual([1, 'Ted', 'Right']);\n    expect(getSourceDataAtRow(4)).toEqual([5, 'Jane', 'Neat']);\n\n  });\n\n  it('should return original data source at specified col after sorted', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, 'Frank', 'Honest'],\n        [3, 'Joan', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat']\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n\n    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    this.sortByColumn(0);\n\n    expect(getDataAtCol(0)).toEqual([5, 4, 3, 2, 1]);\n    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Joan', 'Frank', 'Ted']);\n\n    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    this.sortByColumn(0);\n\n    expect(getDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n\n    expect(getSourceDataAtCol(0)).toEqual([1, 2, 3, 4, 5]);\n    expect(getSourceDataAtCol(1)).toEqual(['Ted', 'Frank', 'Joan', 'Sid', 'Jane']);\n  });\n\n  it('should ignore case when sorting', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'albuquerque'],\n        [2, 'Alabama'],\n        [3, 'Missouri']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(1);\n    expect(getDataAtCol(0)).toEqual([2, 1, 3]);\n    expect(getDataAtCol(1)).toEqual(['Alabama', 'albuquerque', 'Missouri']);\n\n    this.sortByColumn(1);\n    expect(getDataAtCol(0)).toEqual([3, 1, 2]);\n    expect(getDataAtCol(1)).toEqual(['Missouri', 'albuquerque', 'Alabama']);\n\n  });\n\n  it('should push empty cells to the end of sorted column', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      rowHeaders: true,\n      columnSorting: true,\n      minSpareRows: 1\n    });\n\n    this.sortByColumn(1);\n    expect(getDataAtCol(0)).toEqual([5, 4, 1, 2, 3, null]);\n    expect(getDataAtCol(1)).toEqual(['Jane', 'Sid', 'Ted', '', '', null]);\n\n    this.sortByColumn(1);\n    expect(getDataAtCol(0)).toEqual([1, 4, 5, 2, 3, null]);\n    expect(getDataAtCol(1)).toEqual(['Ted', 'Sid', 'Jane', '', '', null]);\n\n  });\n\n  it('should push numeric values before non-numeric values, when sorting ascending using the default sorting function', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 123],\n        [2, '', 'Some'],\n        [3, '', 321],\n        [4, 'Sid', 'String'],\n        [5, 'Jane', 46]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(2);\n    expect(getDataAtCol(2)).toEqual([46, 123, 321, 'Some', 'String']);\n\n    this.sortByColumn(2);\n    expect(getDataAtCol(2)).toEqual(['String', 'Some', 321, 123, 46]);\n\n  });\n\n  it('should add a sorting indicator to the column header after it\\'s been sorted, only if sortIndicator property is set to true', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(1);\n\n    var sortedColumn = this.$container.find('th span.columnSorting')[1],\n      afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n\n    expect(afterValue === '' || afterValue === 'none').toBe(true);\n\n    // ---------------------------------\n    // INDICATOR SET FOR THE WHOLE TABLE\n    // ---------------------------------\n\n    hot.updateSettings({\n      sortIndicator: true\n    });\n\n    this.sortByColumn(1);\n\n    // descending (updateSettings doesn't reset sorting stack)\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9660))).toBeGreaterThan(-1);\n\n    this.sortByColumn(1);\n\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue === '' || afterValue === 'none').toBe(true);\n\n    this.sortByColumn(1);\n\n    // ascending\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n\n    // ---------------------------------\n    // INDICATOR SET FOR A SINGLE COLUMN\n    // ---------------------------------\n\n    hot.updateSettings({\n      sortIndicator: void 0,\n      columns: [\n        {},\n        {},\n        {sortIndicator: true}\n      ]\n    });\n\n    this.sortByColumn(0);\n\n    sortedColumn = this.$container.find('th span.columnSorting')[0];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue === '' || afterValue === 'none').toBe(true);\n\n    this.sortByColumn(1);\n\n    // descending\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue === '' || afterValue === 'none').toBe(true);\n\n    this.sortByColumn(2);\n\n    sortedColumn = this.$container.find('th span.columnSorting')[2];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n  });\n\n  it('should change sorting indicator state on every `hot.sort()` method call (continuously for the same column)', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      columnSorting: true,\n      sortIndicator: true,\n    });\n\n    hot.sort(1);\n\n    // ascending\n    var sortedColumn = this.$container.find('th span.columnSorting')[1];\n    var afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n\n    hot.sort(1);\n\n    // descending\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9660))).toBeGreaterThan(-1);\n\n    hot.sort(1);\n\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue === '' || afterValue === 'none').toBe(true);\n\n    hot.sort(1);\n\n    // ascending\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n\n    hot.sort(1);\n\n    // descending\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9660))).toBeGreaterThan(-1);\n  });\n\n  it('should change sorting indicator state on every `hot.sort()` method (calling for different columns)', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      columnSorting: true,\n      sortIndicator: true,\n    });\n\n    hot.sort(1);\n\n    // ascending\n    var sortedColumn = this.$container.find('th span.columnSorting')[1];\n    var afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n\n    hot.sort(2);\n\n    // ascending\n    sortedColumn = this.$container.find('th span.columnSorting')[2];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n\n    hot.sort(1);\n\n    // ascending\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n\n    hot.sort(2, false);\n\n    // descending\n    sortedColumn = this.$container.find('th span.columnSorting')[2];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9660))).toBeGreaterThan(-1);\n\n    hot.sort(2, false);\n\n    // descending\n    sortedColumn = this.$container.find('th span.columnSorting')[2];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9660))).toBeGreaterThan(-1);\n\n    hot.sort(2, true);\n\n    // ascending\n    sortedColumn = this.$container.find('th span.columnSorting')[2];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n  });\n\n  it('should change sorting indicator state when initial column sorting was provided', function() {\n    var hot = handsontable({\n      data: [\n        [1, 'Ted', 'Right'],\n        [2, '', 'Honest'],\n        [3, '', 'Well'],\n        [4, 'Sid', 'Strong'],\n        [5, 'Jane', 'Neat'],\n      ],\n      colHeaders: true,\n      columnSorting: {\n        column: 1,\n        sortOrder: false\n      },\n      sortIndicator: true,\n    });\n\n    // descending\n    var sortedColumn = this.$container.find('th span.columnSorting')[1];\n    var afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9660))).toBeGreaterThan(-1);\n\n    hot.sort(1);\n\n    // default\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue === '' || afterValue === 'none').toBe(true);\n\n    hot.sort(1);\n\n    // ascending\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9650))).toBeGreaterThan(-1);\n\n    hot.sort(1);\n\n    // descending\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue.indexOf(String.fromCharCode(9660))).toBeGreaterThan(-1);\n\n    hot.sort(1);\n\n    // default\n    sortedColumn = this.$container.find('th span.columnSorting')[1];\n    afterValue = window.getComputedStyle(sortedColumn, ':after').getPropertyValue('content');\n    expect(afterValue === '' || afterValue === 'none').toBe(true);\n  });\n\n  it('should properly sort the table, when it\\'s scrolled to the far right', () => {\n    var data = [\n      ['Jasmine Ferguson', 'Britney Carey', 'Kelly Decker', 'Lacey Mcleod', 'Leona Shaffer', 'Kelli Ochoa',\n        'Adele Roberson', 'Viola Snow', 'Barron Cherry', 'Calhoun Lane', 'Elvia Andrews', 'Katheryn Dale', 'Dorthy Hale',\n        'Munoz Randall', 'Fields Morse', 'Hubbard Nichols', 'Chang Yang', 'Osborn Anthony', 'Owens Warner', 'Gloria Hampton'],\n      ['Lane Hill', 'Belinda Mathews', 'York Gray', 'Celina Stone', 'Victoria Mays', 'Angelina Lott', 'Joyce Mason', 'Shawn Rodriguez',\n        'Susanna Mayo', 'Wolf Fuller', 'Long Hester', 'Dudley Doyle', 'Wilder Sutton', 'Oneal Avery', 'James Mclaughlin',\n        'Lenora Guzman', 'Mcmahon Sullivan', 'Abby Weeks', 'Beverly Joseph', 'Rosalind Church'],\n      ['Myrtle Landry', 'Hays Huff', 'Hernandez Benjamin', 'Mclaughlin Garza', 'Franklin Barton', 'Lara Buchanan', 'Ratliff Beck',\n        'Rosario Munoz', 'Isabelle Dalton', 'Smith Woodard', 'Marjorie Marshall', 'Spears Stein', 'Brianna Bowman',\n        'Marci Clay', 'Palmer Harrell', 'Ball Levy', 'Shelley Mendoza', 'Morrow Glass', 'Baker Knox', 'Adrian Holman'],\n      ['Trisha Howell', 'Brooke Harrison', 'Anthony Watkins', 'Ellis Cobb', 'Sheppard Dillon', 'Mathis Bray',\n        'Foreman Burns', 'Lina Glenn', 'Giles Pollard', 'Weiss Ballard', 'Lynnette Smith', 'Flores Kline', 'Graciela Singleton',\n        'Santiago Mcclure', 'Claudette Battle', 'Nita Holloway', 'Eula Wolfe', 'Pruitt Stokes', 'Felicia Briggs', 'Melba Bradshaw']\n    ];\n\n    var hot = handsontable({\n      data,\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    hot.view.wt.wtOverlays.leftOverlay.scrollTo(15);\n    hot.render();\n    hot.sort(15);\n\n    expect(getDataAtCell(0, 15)).toEqual('Ball Levy');\n    expect(getDataAtCell(1, 15)).toEqual('Hubbard Nichols');\n    expect(getDataAtCell(2, 15)).toEqual('Lenora Guzman');\n    expect(getDataAtCell(3, 15)).toEqual('Nita Holloway');\n\n    hot.sort(15);\n\n    expect(getDataAtCell(3, 15)).toEqual('Ball Levy');\n    expect(getDataAtCell(2, 15)).toEqual('Hubbard Nichols');\n    expect(getDataAtCell(1, 15)).toEqual('Lenora Guzman');\n    expect(getDataAtCell(0, 15)).toEqual('Nita Holloway');\n\n    hot.sort(15);\n\n    expect(getDataAtCell(0, 15)).toEqual('Hubbard Nichols');\n    expect(getDataAtCell(1, 15)).toEqual('Lenora Guzman');\n    expect(getDataAtCell(2, 15)).toEqual('Ball Levy');\n    expect(getDataAtCell(3, 15)).toEqual('Nita Holloway');\n  });\n\n  it('should allow specifiyng a custom sorting function', () => {\n    var data = [['1 inch'], ['1 yard'], ['2 feet'], ['0.2 miles']];\n    var hot = handsontable({\n      data,\n      colHeaders: true,\n      columnSorting: true,\n      columns: [\n        {\n          sortFunction(sortOrder) {\n            return function(a, b) {\n              var unitsRatios = {\n                inch: 1,\n                yard: 36,\n                feet: 12,\n                miles: 63360\n              };\n\n              var newA = a[1],\n                newB = b[1];\n\n              Handsontable.helper.objectEach(unitsRatios, (val, prop) => {\n                if (a[1].indexOf(prop) > -1) {\n                  newA = parseFloat(a[1].replace(prop, '')) * val;\n\n                  return false;\n                }\n              });\n\n              Handsontable.helper.objectEach(unitsRatios, (val, prop) => {\n                if (b[1].indexOf(prop) > -1) {\n                  newB = parseFloat(b[1].replace(prop, '')) * val;\n\n                  return false;\n                }\n              });\n\n              if (newA < newB) {\n                return sortOrder ? -1 : 1;\n              }\n              if (newA > newB) {\n                return sortOrder ? 1 : -1;\n              }\n              return 0;\n            };\n          }\n        }\n      ]\n    });\n\n    expect(getDataAtCell(0, 0)).toEqual('1 inch');\n    expect(getDataAtCell(1, 0)).toEqual('1 yard');\n    expect(getDataAtCell(2, 0)).toEqual('2 feet');\n    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');\n\n    hot.sort(0);\n\n    expect(getDataAtCell(0, 0)).toEqual('1 inch');\n    expect(getDataAtCell(1, 0)).toEqual('2 feet');\n    expect(getDataAtCell(2, 0)).toEqual('1 yard');\n    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');\n\n    hot.sort(0);\n\n    expect(getDataAtCell(0, 0)).toEqual('0.2 miles');\n    expect(getDataAtCell(1, 0)).toEqual('1 yard');\n    expect(getDataAtCell(2, 0)).toEqual('2 feet');\n    expect(getDataAtCell(3, 0)).toEqual('1 inch');\n\n    hot.sort(0);\n\n    expect(getDataAtCell(0, 0)).toEqual('1 inch');\n    expect(getDataAtCell(1, 0)).toEqual('1 yard');\n    expect(getDataAtCell(2, 0)).toEqual('2 feet');\n    expect(getDataAtCell(3, 0)).toEqual('0.2 miles');\n\n  });\n\n  it('should properly sort integers with nulls', function() {\n    var hot = handsontable({\n      data: [\n        ['12'],\n        [null],\n        ['10'],\n        ['-5'],\n        [null],\n        ['1000']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n    expect(getDataAtCol(0)).toEqual(['-5', '10', '12', '1000', null, null]);\n\n    this.sortByColumn(0);\n    expect(getDataAtCol(0)).toEqual(['1000', '12', '10', '-5', null, null]);\n  });\n\n  it('should properly sort floating points', function() {\n    var hot = handsontable({\n      data: [\n        ['0.0561'],\n        ['-10.67'],\n        ['-4.1'],\n        ['-0.01'],\n        ['-127'],\n        ['1000']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000']);\n\n    this.sortByColumn(0);\n    expect(getDataAtCol(0)).toEqual(['1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127']);\n  });\n\n  it('should properly sort floating points with nulls', function() {\n    var hot = handsontable({\n      data: [\n        ['0.0561'],\n        ['-10.67'],\n        [null],\n        ['-4.1'],\n        ['-0.01'],\n        [null],\n        ['-127'],\n        ['1000'],\n        [null]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000', null, null, null]);\n\n    this.sortByColumn(0);\n    expect(getDataAtCol(0)).toEqual(['1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127', null, null, null]);\n  });\n\n  it('should properly sort floating points with non-numerical values', function() {\n    var hot = handsontable({\n      data: [\n        ['0.0561'],\n        ['-10.67'],\n        ['a'],\n        ['-4.1'],\n        ['-0.01'],\n        ['b'],\n        ['-127'],\n        ['1000'],\n        ['hello']\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n    expect(getDataAtCol(0)).toEqual(['-127', '-10.67', '-4.1', '-0.01', '0.0561', '1000', 'a', 'b', 'hello']);\n\n    this.sortByColumn(0);\n    expect(getDataAtCol(0)).toEqual(['hello', 'b', 'a', '1000', '0.0561', '-0.01', '-4.1', '-10.67', '-127']);\n  });\n\n  it('should modify row translating process when soring is applied (visual to physical and vice versa)', function() {\n    var hot = handsontable({\n      data: [\n        [2],\n        [4],\n        [1],\n        [3]\n      ],\n      colHeaders: true,\n      columnSorting: true\n    });\n\n    this.sortByColumn(0);\n\n    expect(hot.toPhysicalRow(0)).toBe(2);\n    expect(hot.toPhysicalRow(1)).toBe(0);\n    expect(hot.toPhysicalRow(2)).toBe(3);\n    expect(hot.toPhysicalRow(3)).toBe(1);\n    expect(hot.toVisualRow(0)).toBe(1);\n    expect(hot.toVisualRow(1)).toBe(3);\n    expect(hot.toVisualRow(2)).toBe(0);\n    expect(hot.toVisualRow(3)).toBe(2);\n  });\n\n  describe('should return sorted properly data when maxRows or / and minSpareRow options are set', () => {\n    var testSorting = function(desc, config, result) {\n      it(desc, () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(config.rows, config.columns),\n          maxRows: config.maxRow,\n          minSpareRows: config.minSpareRows,\n          columnSorting: {\n            column: config.sortByColumnIndex,\n            sortOrder: config.sortOrder\n          }\n        });\n\n        expect(getData().length).toEqual(result.dataLength);\n\n        for (var i = 0; i < result.expectations.length; i += 1) {\n          expect(getDataAtCell(result.expectations[i].rowIndex, result.expectations[i].columnIndex)).toEqual(result.expectations[i].value);\n        }\n      });\n    };\n\n    testSorting(\n      'maxRows < data.length',\n      {rows: 9, columns: 9, maxRow: 6, sortByColumnIndex: 1, sortOrder: false},\n      {dataLength: 6, expectations: [{rowIndex: 0, columnIndex: 2, value: 'C6'}]}\n    );\n\n    testSorting(\n      'maxRows > data.length',\n      {rows: 8, columns: 8, maxRow: 20, sortByColumnIndex: 1, sortOrder: false},\n      {dataLength: 8, expectations: [{rowIndex: 0, columnIndex: 2, value: 'C8'}]}\n    );\n\n    testSorting(\n      'minSpareRows is set; maxRows < data.length',\n      {rows: 9, columns: 9, maxRow: 5, minSpareRows: 3, sortByColumnIndex: 1, sortOrder: false},\n      {dataLength: 5, expectations: [{rowIndex: 0, columnIndex: 2, value: 'C5'}]}\n    );\n\n    testSorting(\n      'minSpareRows is set; maxRows === data.length',\n      {rows: 6, columns: 6, maxRow: 9, minSpareRows: 3, sortByColumnIndex: 1, sortOrder: false},\n      {dataLength: 6 + 3, expectations: [{rowIndex: 0, columnIndex: 2, value: 'C6'}]}\n    );\n\n    testSorting(\n      'minSpareRows is set; maxRows > data.length',\n      {rows: 9, columns: 9, maxRow: 15, minSpareRows: 2, sortByColumnIndex: 1, sortOrder: false},\n      {dataLength: 9 + 2, expectations: [{rowIndex: 0, columnIndex: 2, value: 'C9'}]}\n    );\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/columnSorting/test/columnSorting.e2e.js","describe('Comments', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('Enabling the plugin', () => {\n    it('should enable the plugin in the initial config', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true\n      });\n\n      expect(hot.getPlugin('comments').isEnabled()).toBe(true);\n    });\n\n    it('should enable the plugin using updateSettings', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4)\n      });\n\n      expect(hot.getPlugin('comments').isEnabled()).toBe(false);\n\n      updateSettings({\n        comments: true\n      });\n\n      expect(hot.getPlugin('comments').isEnabled()).toBe(true);\n    });\n  });\n\n  describe('updateSettings', function () {\n    it('should change delay, after which comment is showed #4323', (done) => {\n      const rows = 10;\n      const columns = 10;\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(rows, columns),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: true,\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        }\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n\n      updateSettings({\n        comments: {\n          displayDelay: 100\n        }\n      });\n\n      $(getCell(1, 1)).simulate('mouseover', {\n        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,\n        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5,\n      });\n\n      setTimeout(() => {\n        expect(editor.parentNode.style.display).toEqual('block');\n        done();\n      }, 150);\n    });\n  });\n\n  describe('Styling', () => {\n    it('should display comment indicators in the appropriate cells', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        cell: [\n          {row: 1, col: 1, comment: {value: 'test'}},\n          {row: 2, col: 2, comment: {value: 'test'}}\n        ]\n      });\n\n      expect(getCell(1, 1).className.indexOf('htCommentCell')).toBeGreaterThan(-1);\n      expect(getCell(2, 2).className.indexOf('htCommentCell')).toBeGreaterThan(-1);\n    });\n  });\n\n  describe('Displaying comment after `mouseover` event', function () {\n    it('should display comment after predefined delay when custom `displayDelay` ' +\n      'option of `comments` plugin wasn\\'t set', (done) => {\n      const rows = 10;\n      const columns = 10;\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(rows, columns),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: true,\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        }\n      });\n\n      $(getCell(1, 1)).simulate('mouseover', {\n        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,\n        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5,\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n\n      setTimeout(() => {\n        expect(editor.parentNode.style.display).toEqual('block');\n        done();\n      }, 300);\n    });\n\n    it('should display comment after defined delay when custom `displayDelay` ' +\n      'option of `comments` plugin was set', (done) => {\n      const rows = 10;\n      const columns = 10;\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(rows, columns),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: {\n          displayDelay: 400\n        },\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        }\n      });\n\n      $(getCell(1, 1)).simulate('mouseover', {\n        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,\n        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5,\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n\n      setTimeout(() => {\n        expect(editor.parentNode.style.display).toEqual('none');\n      }, 300);\n\n      setTimeout(() => {\n        expect(editor.parentNode.style.display).toEqual('block');\n        done();\n      }, 450);\n    });\n  });\n\n  describe('API', () => {\n    it('should return the comment from a proper cell, when using the getCommentAtCell method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: {\n          displayDelay: 400\n        },\n        cell: [\n          {row: 1, col: 1, comment: {value: 'test'}},\n          {row: 2, col: 2, comment: {value: 'another test'}}\n        ]\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      expect(plugin.getCommentAtCell(1, 1)).toEqual('test');\n      expect(plugin.getCommentAtCell(2, 2)).toEqual('another test');\n    });\n\n    it('should return the comment from a proper cell, when using the setRange and getComment methods', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        cell: [\n          {row: 1, col: 1, comment: {value: 'test'}},\n          {row: 2, col: 2, comment: {value: 'another test'}}\n        ]\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      plugin.setRange({from: {row: 1, col: 1}});\n      expect(plugin.getComment()).toEqual('test');\n      plugin.setRange({from: {row: 2, col: 2}});\n      expect(plugin.getComment()).toEqual('another test');\n    });\n\n    it('should allow inserting comments using the `setCommentAtCell` method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      expect(getCellMeta(1, 1).comment).toEqual(void 0);\n\n      plugin.setCommentAtCell(1, 1, 'test comment');\n\n      expect(getCellMeta(1, 1).comment.value).toEqual('test comment');\n    });\n\n    it('should trigger `afterSetCellMeta` callback when `setCommentAtCell` function is invoked', () => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      plugin.setCommentAtCell(1, 1, 'Added comment');\n      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', {value: 'Added comment'}, undefined, undefined);\n    });\n\n    it('should allow removing comments using the `removeCommentAtCell` method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        cell: [\n          {row: 1, col: 1, comment: {value: 'test'}}\n        ]\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      expect(getCellMeta(1, 1).comment.value).toEqual('test');\n\n      plugin.removeCommentAtCell(1, 1);\n\n      expect(getCellMeta(1, 1).comment).toEqual(void 0);\n    });\n\n    it('should trigger `afterSetCellMeta` callback when `removeCommentAtCell` function is invoked', () => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n        cell: [\n          {row: 1, col: 1, comment: {value: 'test'}}\n        ],\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      const plugin = hot.getPlugin('comments');\n\n      plugin.removeCommentAtCell(1, 1);\n      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', undefined, undefined, undefined);\n    });\n\n    it('should allow opening the comment editor using the `showAtCell` method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n\n      expect(editor.parentNode.style.display).toEqual('none');\n\n      plugin.showAtCell(1, 1);\n\n      expect(editor.parentNode.style.display).toEqual('block');\n    });\n\n    it('should allow closing the comment editor using the `hide` method', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        comments: true,\n      });\n\n      const plugin = hot.getPlugin('comments');\n      const editor = plugin.editor.getInputElement();\n      plugin.showAtCell(1, 1);\n      expect(editor.parentNode.style.display).toEqual('block');\n\n      plugin.hide();\n\n      expect(editor.parentNode.style.display).toEqual('none');\n    });\n  });\n\n  it('`updateCommentMeta` & `setComment` functions should extend cellMetaObject properly', () => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      comments: true\n    });\n    const plugin = hot.getPlugin('comments');\n    let readOnly;\n    let comment;\n\n    setCellMeta(0, 0, 'comment', {readOnly: true});\n    plugin.updateCommentMeta(0, 0, {value: 'Test'});\n\n    comment = getCellMeta(0, 0).comment;\n    readOnly = comment && comment.readOnly;\n\n    expect(readOnly).toEqual(true);\n\n    plugin.setRange({from: {row: 0, col: 0}, to: {row: 0, col: 0}});\n    plugin.setComment('Test2');\n\n    comment = getCellMeta(0, 0).comment;\n    readOnly = comment && comment.readOnly;\n\n    expect(readOnly).toEqual(true);\n  });\n\n  it('should not close the comment editor immediately after opening #4323', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      comments: {\n        displayDelay: 0\n      }\n    });\n\n    selectCell(1, 1);\n    contextMenu();\n\n    const addCommentButton = $('.htItemWrapper').filter(function() {\n      return $(this).text() === 'Add comment';\n    })[0];\n\n    $(addCommentButton).simulate('mouseover', {\n      clientX: Handsontable.dom.offset(addCommentButton).left + 5,\n      clientY: Handsontable.dom.offset(addCommentButton).top + 5,\n    });\n\n    $(addCommentButton).simulate('mousedown');\n\n    const editor = hot.getPlugin('comments').editor.getInputElement();\n\n    setTimeout(function () {\n      expect($(editor).parents('.htComments')[0].style.display).toEqual('block');\n      done();\n    }, 300);\n  });\n\n  describe('Using the Context Menu', () => {\n    it('should open the comment editor when clicking the \"Add comment\" entry', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        comments: true\n      });\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const addCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Add comment';\n      })[0];\n\n      $(addCommentButton).simulate('mousedown');\n\n      const editor = hot.getPlugin('comments').editor.getInputElement();\n\n      expect($(editor).parents('.htComments')[0].style.display).toEqual('block');\n    });\n\n    it('should remove the comment from a cell after clicking the \"Delete comment\" entry', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        comments: true,\n        cell: [\n          {row: 1, col: 1, comment: {value: 'Test comment'}}\n        ]\n      });\n\n      expect(getCellMeta(1, 1).comment.value).toEqual('Test comment');\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const deleteCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Delete comment';\n      })[0];\n\n      $(deleteCommentButton).simulate('mousedown');\n\n      expect(getCellMeta(1, 1).comment).toEqual(void 0);\n    });\n\n    it('should remove comments from a selected group of cells after clicking the \"Delete comment\" entry', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        comments: true,\n        cell: [\n          {row: 1, col: 1, comment: {value: 'Test comment'}},\n          {row: 2, col: 2, comment: {value: 'Test comment 2'}}\n        ]\n      });\n\n      expect(getCellMeta(1, 1).comment.value).toEqual('Test comment');\n      expect(getCellMeta(2, 2).comment.value).toEqual('Test comment 2');\n\n      selectCell(1, 1, 2, 2);\n      contextMenu();\n\n      const deleteCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Delete comment';\n      })[0];\n\n      $(deleteCommentButton).simulate('mousedown');\n\n      expect(getCellMeta(1, 1).comment).toEqual(void 0);\n      expect(getCellMeta(2, 2).comment).toEqual(void 0);\n    });\n\n    it('should make the comment editor\\'s textarea read-only after clicking the \"Read only comment\" entry', (done) => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        comments: true,\n        cell: [\n          {row: 1, col: 1, comment: {value: 'Test comment'}}\n        ]\n      });\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const editor = hot.getPlugin('comments').editor.getInputElement();\n\n      expect($(editor)[0].readOnly).toBe(false);\n\n      const readOnlyComment = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Read only comment';\n      })[0];\n\n      $(readOnlyComment).simulate('mousedown');\n      $(document).simulate('mouseup');\n\n      $(getCell(1, 1)).simulate('mouseover', {\n        clientX: Handsontable.dom.offset(getCell(1, 1)).left + 5,\n        clientY: Handsontable.dom.offset(getCell(1, 1)).top + 5,\n      });\n\n      setTimeout(() => {\n        expect($(editor)[0].readOnly).toBe(true);\n        done();\n      }, 550);\n    });\n  });\n\n  describe('Hooks invoked after changing cell meta', () => {\n    it('should trigger `afterSetCellMeta` callback after deleting comment by context menu', () => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n      const rows = 10,\n        columns = 10;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(rows, columns),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: true,\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        },\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      expect(afterSetCellMetaCallback).not.toHaveBeenCalled();\n\n      selectCell(1, 1);\n      contextMenu();\n\n      const deleteCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Delete comment';\n      })[0];\n\n      $(deleteCommentButton).simulate('mousedown');\n\n      expect(afterSetCellMetaCallback).toHaveBeenCalledWith(1, 1, 'comment', undefined, undefined, undefined);\n    });\n\n    // Doesn't work in PhantomJS\n    // It will work probably when #3961 will be fixed\n    xit('should trigger `afterSetCellMeta` callback after editing comment by context menu', (done) => {\n      const afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n      const rows = 10,\n        columns = 10;\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(rows, columns),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        comments: true,\n        columns() {\n          return {\n            comment: {\n              value: 'test'\n            }\n          };\n        },\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n\n      const editCommentButton = $('.htItemWrapper').filter(function() {\n        return $(this).text() === 'Edit comment';\n      })[0];\n\n      $(editCommentButton).simulate('mousedown');\n\n      setTimeout(() => {\n        $('.htCommentTextArea').val('Edited comment');\n\n        // changing focus\n\n        $('body').simulate('mousedown');\n\n        setTimeout(() => {\n          expect(afterSetCellMetaCallback).toHaveBeenCalledWith(0, 0, 'comment', {value: 'Edited comment'}, undefined, undefined);\n          done();\n        }, 100);\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/comments/test/comments.e2e.js","describe('ContextMenu', function () {\n  var id = 'testContainer';\n\n  beforeEach(function () {\n    this.$container = $('<div id=\"' + id + '\"></div>').appendTo('body');\n  });\n\n  afterEach(function () {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('alignment', function() {\n    it('should align text left', function (done) {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      setTimeout(function () {\n        var contextSubMenu = $('.htContextMenuSub_' + item.text());\n        var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);\n        button.simulate('mousedown'); // Text left\n\n        expect(getCellMeta(0, 0).className).toEqual('htLeft');\n        expect(getCell(0, 0).className).toContain('htLeft');\n        done();\n      }, 350);\n    });\n\n    it('should align text center', function (done) {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      setTimeout(function () {\n        var contextSubMenu = $('.htContextMenuSub_' + item.text());\n        var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(1);\n\n        button.simulate('mousedown'); // Text center\n        expect(getCellMeta(0, 0).className).toEqual('htCenter');\n        expect(getCell(0, 0).className).toContain('htCenter');\n        done();\n      }, 350);\n    });\n\n    it('should align text right', function (done) {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      setTimeout(function () {\n        var contextSubMenu = $('.htContextMenuSub_' + item.text());\n        var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);\n\n        button.simulate('mousedown'); // Text right\n        expect(getCellMeta(0, 0).className).toEqual('htRight');\n        expect(getCell(0, 0).className).toContain('htRight');\n        done();\n      }, 350);\n    });\n\n    it('should justify text', function (done) {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      setTimeout(function () {\n        var contextSubMenu = $('.htContextMenuSub_' + item.text());\n        var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(3);\n\n        button.simulate('mousedown'); // Text justify\n        deselectCell();\n        expect(getCellMeta(0, 0).className).toEqual('htJustify');\n        expect(getCell(0, 0).className).toContain('htJustify');\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should vertical align text top', function (done) {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      setTimeout(function () {\n        var contextSubMenu = $('.htContextMenuSub_' + item.text());\n        var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(4);\n\n        button.simulate('mousedown'); // Text top\n        deselectCell();\n        expect(getCellMeta(0, 0).className).toEqual('htTop');\n        expect(getCell(0, 0).className).toContain('htTop');\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should vertical align text middle', function (done) {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      setTimeout(function () {\n        var contextSubMenu = $('.htContextMenuSub_' + item.text());\n        var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(5);\n\n        button.simulate('mousedown'); // Text middle\n        deselectCell();\n        expect(getCellMeta(0, 0).className).toEqual('htMiddle');\n        expect(getCell(0, 0).className).toContain('htMiddle');\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should vertical align text bottom', function (done) {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      setTimeout(function () {\n        var contextSubMenu = $('.htContextMenuSub_' + item.text());\n        var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(6);\n        button.simulate('mousedown'); // Text bottom\n        deselectCell();\n        expect(getCellMeta(0, 0).className).toEqual('htBottom');\n        expect(getCell(0, 0).className).toContain('htBottom');\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should trigger `afterSetCellMeta` callback after changing alignment by context menu', function (done) {\n      var afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        afterSetCellMeta: afterSetCellMetaCallback\n      });\n\n      selectCell(2, 3);\n      contextMenu();\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n\n      setTimeout(function () {\n        var contextSubMenu = $('.htContextMenuSub_' + item.text());\n        var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);\n        button.simulate('mousedown'); // Text bottom\n        deselectCell();\n        expect(afterSetCellMetaCallback).toHaveBeenCalledWith(2, 3, 'className', 'htRight', undefined, undefined);\n        done();\n      }, 350); // menu opens after 300ms\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/contextMenu/test/alignment.e2e.js","describe('ContextMenu', () => {\n  var id = 'testContainer';\n\n  beforeEach(function () {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function () {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should update context menu items by calling `updateSettings` method', () => {\n    var hot = handsontable({\n      contextMenu: ['row_above', 'row_below', '---------', 'remove_row'],\n      height: 100\n    });\n\n    contextMenu();\n\n    var items = $('.htContextMenu tbody td');\n    var actions = items.not('.htSeparator');\n    var separators = items.filter('.htSeparator');\n\n    expect(actions.length).toEqual(3);\n    expect(separators.length).toEqual(1);\n\n    expect(actions.text()).toEqual([\n      'Insert row above',\n      'Insert row below',\n      'Remove row',\n    ].join(''));\n\n    hot.updateSettings({\n      contextMenu: ['remove_row']\n    });\n\n    contextMenu();\n\n    items = $('.htContextMenu tbody td');\n    actions = items.not('.htSeparator');\n    separators = items.filter('.htSeparator');\n\n    expect(actions.length).toEqual(1);\n    expect(separators.length).toEqual(0);\n\n    expect(actions.text()).toEqual([\n      'Remove row',\n    ].join(''));\n\n    hot.updateSettings({\n      contextMenu: {\n        items: {\n          remove_col: true,\n          hsep1: '---------',\n          custom: {name: 'My custom item'},\n        }\n      }\n    });\n\n    contextMenu();\n\n    items = $('.htContextMenu tbody td');\n    actions = items.not('.htSeparator');\n    separators = items.filter('.htSeparator');\n\n    expect(actions.length).toEqual(2);\n    expect(separators.length).toEqual(1);\n\n    expect(actions.text()).toEqual([\n      'Remove column',\n      'My custom item',\n    ].join(''));\n  });\n\n  describe('menu opening', () => {\n    it('should open menu after right click on table cell', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should not open the menu after clicking an open editor', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(2, 2);\n      keyDownUp('enter');\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu(hot.getActiveEditor().TEXTAREA);\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should open menu after right click on header cell when only header cells are visible', () => {\n      var hot = handsontable({\n        data: [],\n        colHeaders: ['Year', 'Kia'],\n        columns: [{data: 0}, {data: 1}],\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu(hot.rootElement.querySelector('.ht_clone_top thead th'));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should open menu after right click on header corner', () => {\n      var hot = handsontable({\n        data: [],\n        colHeaders: true,\n        rowHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu(hot.rootElement.querySelector('.ht_clone_top_left_corner thead th'));\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should open menu after right click active cell border', function () {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu')).toBeDefined();\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      selectCell(0, 0);\n\n      this.$container.find('.wtBorder.current:eq(0)').simulate('contextmenu');\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n  });\n\n  describe('menu closing', () => {\n    it('should close menu after click', function () {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      mouseDown(this.$container);\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should close menu after click under the menu', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(500, 10),\n        contextMenu: true,\n        height: 500\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      var rect = $('.htContextMenu')[0].getBoundingClientRect();\n      var x = parseInt(rect.left + (rect.width / 2), 10);\n      var y = parseInt(rect.top + rect.height, 10);\n      mouseDown(document.elementFromPoint(x, y));\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n  });\n\n  describe('menu disabled', () => {\n\n    it('should not open menu after right click', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      hot.getPlugin('contextMenu').disablePlugin();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should not create context menu if it\\'s disabled in constructor options', () => {\n      var hot = handsontable({\n        contextMenu: false,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu').isEnabled()).toBe(false);\n    });\n\n    it('should reenable menu', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      hot.getPlugin('contextMenu').disablePlugin();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      hot.getPlugin('contextMenu').enablePlugin();\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should reenable menu with updateSettings when it was disabled in constructor', () => {\n      var hot = handsontable({\n        contextMenu: false,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu').isEnabled()).toBe(false);\n\n      updateSettings({\n        contextMenu: true\n      });\n\n      expect(hot.getPlugin('contextMenu').isEnabled()).toBe(true);\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should disable menu with updateSettings when it was enabled in constructor', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      expect(hot.getPlugin('contextMenu').isEnabled()).toBe(true);\n\n      updateSettings({\n        contextMenu: false\n      });\n\n      expect(hot.getPlugin('contextMenu').isEnabled()).toBe(false);\n    });\n\n    it('should work properly (remove row) after destroy and new init', () => {\n      var test = function () {\n        handsontable({\n          startRows: 5,\n          contextMenu: ['remove_row'],\n          height: 100\n        });\n        selectCell(0, 0);\n        contextMenu();\n\n        $('.htContextMenu .ht_master .htCore tbody').find('td').not('.htSeparator').eq(0).simulate('mousedown');\n        expect(getData().length).toEqual(4);\n      };\n      test();\n\n      destroy();\n\n      test();\n    });\n  });\n\n  describe('menu hidden items', () => {\n    it('should remove separators from top, bottom and duplicated', () => {\n      var hot = handsontable({\n        contextMenu: [\n          '---------',\n          '---------',\n          'row_above',\n          '---------',\n          '---------',\n          'row_below',\n          '---------',\n          'remove_row'\n        ],\n        height: 100\n      });\n\n      contextMenu();\n\n      var items = $('.htContextMenu tbody td');\n      var actions = items.not('.htSeparator');\n      var separators = items.filter('.htSeparator');\n\n      expect(actions.length).toEqual(3);\n      expect(separators.length).toEqual(2);\n    });\n\n    it('should hide option if hidden function return true', () => {\n\n      var hot = handsontable({\n        startCols: 5,\n        colHeaders: true,\n        contextMenu: [\n          {\n            key: '',\n            name: 'Custom option',\n            hidden() {\n              return !this.selection.selectedHeader.cols;\n            }\n          }\n        ]\n      });\n\n      contextMenu();\n      var items = $('.htContextMenu tbody td');\n      var actions = items.not('.htSeparator');\n\n      expect(actions.length).toEqual(0);\n\n      var header = $('.ht_clone_top thead th').eq(1);\n\n      header.simulate('mousedown');\n      contextMenu();\n\n      items = $('.htContextMenu tbody td');\n      actions = items.not('.htSeparator');\n      expect(actions.length).toEqual(1);\n    });\n  });\n\n  describe('menu destroy', () => {\n    it('should close context menu when HOT is being destroyed', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      destroy();\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n  });\n\n  describe('subMenu', () => {\n    it('should not open subMenu immediately', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      item.simulate('mouseover');\n      var contextSubMenu = $(`.htContextMenuSub_${item.text()}`).find('tbody td');\n\n      expect(contextSubMenu.length).toEqual(0);\n\n      setTimeout(() => {\n        var contextSubMenu = $(`.htContextMenuSub_${item.text()}`).find('tbody td');\n\n        expect(contextSubMenu.length).toEqual(0);\n        done();\n      }, 100);\n    });\n\n    it('should open subMenu with delay', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n\n      item.simulate('mouseover');\n\n      setTimeout(() => {\n        var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n        expect(contextSubMenu.length).toEqual(1);\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should NOT open subMenu if there is no subMenu for item', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(8);\n\n      item.simulate('mouseover');\n\n      expect(item.hasClass('htSubmenu')).toBe(false);\n\n      var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(contextSubMenu.length).toEqual(0);\n    });\n\n    it('should open subMenu on the left of main menu if on the right there\\'s no space left', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        width: window.innerWidth\n      });\n\n      selectCell(0, countCols() - 1);\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      var contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      expect(item.text()).toBe('Alignment');\n      expect(item.hasClass('htSubmenu')).toBe(true);\n\n      var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n      expect(contextSubMenu.offset().left).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll\n    });\n\n    it('should open subMenu on the right of main menu if there\\'s free space', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        width: window.innerWidth\n      });\n\n      selectCell(0, countCols() - 9);\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      var contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      setTimeout(() => {\n        expect(item.text()).toBe('Alignment');\n        expect(item.hasClass('htSubmenu')).toBe(true);\n\n        var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n        expect(contextSubMenu.offset().left).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should open subMenu on the left-bottom of main menu if there\\'s free space', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        height: window.innerHeight,\n      });\n\n      window.scrollTo(0, document.body.clientHeight);\n      selectCell(0, countCols() - 1);\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      var contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      setTimeout(() => {\n        expect(item.text()).toBe('Alignment');\n        expect(item.hasClass('htSubmenu')).toBe(true);\n\n        var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n        expect(parseInt(contextSubMenu.offset().top, 10)).toBeAroundValue(parseInt(item.offset().top, 10) - 1);\n        expect(parseInt(contextSubMenu.offset().left, 10)).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should open subMenu on the right-bottom of main menu if there\\'s free space', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        height: window.innerHeight\n      });\n\n      window.scrollTo(0, document.body.clientHeight);\n      selectCell(0, countCols() - 9);\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      var contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      setTimeout(() => {\n        expect(item.text()).toBe('Alignment');\n        expect(item.hasClass('htSubmenu')).toBe(true);\n\n        var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n        expect(parseInt(contextSubMenu.offset().top, 10)).toBeAroundValue(parseInt(item.offset().top, 10) - 1);\n        expect(parseInt(contextSubMenu.offset().left, 10)).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should open subMenu on the left-top of main menu if there\\'s no free space on bottom', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        height: window.innerHeight\n      });\n\n      selectCell(countRows() - 1, countCols() - 1);\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      var contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      setTimeout(() => {\n        expect(item.text()).toBe('Alignment');\n        expect(item.hasClass('htSubmenu')).toBe(true);\n\n        var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n        expect(contextSubMenu.offset().top + contextSubMenu.height() - 28).toBeAroundValue(item.offset().top);\n        expect(contextSubMenu.offset().left).toBeLessThan(contextMenuRoot.offset().left - contextSubMenu.width() + 30); // 30 - scroll\n        done();\n      }, 350); // menu opens after 300ms\n    });\n\n    it('should open subMenu on the right-top of main menu if there\\'s no free space on bottom', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(Math.floor(window.innerHeight / 23), Math.floor(window.innerWidth / 50)),\n        contextMenu: true,\n        height: window.innerHeight\n      });\n\n      selectCell(countRows() - 1, countCols() - 9);\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      var contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      setTimeout(() => {\n        expect(item.text()).toBe('Alignment');\n        expect(item.hasClass('htSubmenu')).toBe(true);\n\n        var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n\n        expect(contextSubMenu.offset().top + contextSubMenu.height() - 28).toBeAroundValue(item.offset().top);\n        expect(contextSubMenu.offset().left).toBeGreaterThan(contextMenuRoot.offset().left + contextMenuRoot.width() - 30); // 30 - scroll\n        done();\n      }, 350); // menu opens after 300ms\n    });\n  });\n\n  describe('default context menu actions', () => {\n    it('should display the default set of actions', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        comments: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var items = $('.htContextMenu tbody td');\n      var actions = items.not('.htSeparator');\n      var separators = items.filter('.htSeparator');\n\n      expect(actions.length).toEqual(15);\n      expect(separators.length).toEqual(7);\n\n      expect(actions.text()).toEqual([\n        'Insert row above',\n        'Insert row below',\n        'Insert column on the left',\n        'Insert column on the right',\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n        'Add comment',\n        'Delete comment',\n        'Read only comment',\n        'Copy',\n        'Cut',\n      ].join(''));\n    });\n\n    it('should disable column manipulation when row header selected', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        colHeaders: true,\n        rowHeaders: true,\n        height: 100\n      });\n\n      $('.ht_clone_left .htCore').eq(0).find('tbody').find('th').eq(0).simulate('mousedown', {which: 3});\n      contextMenu();\n\n      expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n        'Insert column on the left',\n        'Insert column on the right',\n        'Remove column',\n        'Undo',\n        'Redo',\n      ].join(''));\n    });\n\n    it('should disable row manipulation when column header selected', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        colHeaders: true,\n        rowHeaders: true,\n        height: 100\n      });\n\n      $('.ht_clone_top .htCore').find('thead').find('th').eq(2).simulate('mousedown', {which: 3});\n      contextMenu();\n\n      expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n        'Insert row above',\n        'Insert row below',\n        'Remove row',\n        'Undo',\n        'Redo',\n      ].join(''));\n    });\n\n    it('should disable cells manipulation when corner header selected', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        colHeaders: true,\n        rowHeaders: true,\n        height: 100\n      });\n\n      $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0).simulate('mousedown', {which: 3});\n      contextMenu();\n\n      expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n      ].join(''));\n    });\n\n    it('should insert row above selection', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 400\n      });\n\n      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n      hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown'); // Insert row above\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.rowAbove', undefined, undefined, undefined);\n      expect(countRows()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert row above selection when initial data is empty', () => {\n      var hot = handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: [],\n        dataSchema: [],\n        contextMenu: true,\n        height: 400\n      });\n\n      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n      hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(0);\n\n      var cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);\n\n      cell.simulate('mousedown', {which: 3});\n      contextMenu(cell[0]);\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown'); // Insert row above\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.rowAbove', undefined, undefined, undefined);\n      expect(countRows()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should NOT display insert row selection', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        allowInsertRow: false\n      });\n\n      contextMenu();\n\n      var items = $('.htContextMenu tbody td');\n      var actions = items.not('.htSeparator');\n      var separators = items.filter('.htSeparator');\n\n      expect(actions.length).toEqual(10);\n      expect(separators.length).toEqual(5);\n\n      expect(actions.text()).toEqual([\n        'Insert column on the left',\n        'Insert column on the right',\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n        'Copy',\n        'Cut'\n      ].join(''));\n    });\n\n    it('should NOT display insert column selection', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        allowInsertColumn: false\n      });\n\n      contextMenu();\n\n      var items = $('.htContextMenu tbody td');\n      var actions = items.not('.htSeparator');\n\n      expect(actions.length).toEqual(10);\n\n      expect(actions.text()).toEqual([\n        'Insert row above',\n        'Insert row below',\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n        'Copy',\n        'Cut'\n      ].join(''));\n    });\n\n    it('should insert row above selection (reverse selection)', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n      hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(3, 0, 1, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown'); // Insert row above\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.rowAbove', undefined, undefined, undefined);\n      expect(countRows()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert row below selection', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n      hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(1).simulate('mousedown'); // Insert row above\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.rowBelow', undefined, undefined, undefined);\n      expect(countRows()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert row below selection when initial data is empty', () => {\n      var hot = handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: [],\n        dataSchema: [],\n        contextMenu: true,\n        height: 400\n      });\n\n      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n      hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(0);\n\n      var cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);\n\n      cell.simulate('mousedown', {which: 3});\n      contextMenu(cell[0]);\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(1).simulate('mousedown'); // Insert row below\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.rowBelow', undefined, undefined, undefined);\n      expect(countRows()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert row below selection (reverse selection)', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n      hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(3, 0, 1, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(1).simulate('mousedown'); // Insert row below\n\n      expect(afterCreateRowCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.rowBelow', undefined, undefined, undefined);\n      expect(countRows()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert column on the left of selection', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        width: 400,\n        height: 400\n      });\n\n      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n      hot.addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 1, 0, 3);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(2).simulate('mousedown'); // Insert col left\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', undefined, undefined, undefined);\n      expect(countCols()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert column on the left of selection when initial data is empty', () => {\n      var hot = handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: [],\n        dataSchema: [],\n        contextMenu: true,\n        height: 400\n      });\n\n      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n      hot.addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(0);\n\n      var cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);\n\n      cell.simulate('mousedown', {which: 3});\n      contextMenu(cell[0]);\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(3).simulate('mousedown'); // Insert column on the left\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.columnRight', undefined, undefined, undefined);\n      expect(countCols()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert column on the left of selection (reverse selection)', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n      hot.addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 3, 0, 1);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(2).simulate('mousedown'); // Insert col left\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', undefined, undefined, undefined);\n      expect(countCols()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert column on the right of selection', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n      hot.addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 1, 0, 3);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(2).simulate('mousedown'); // Insert col right\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(1, 1, 'ContextMenu.columnLeft', undefined, undefined, undefined);\n      expect(countCols()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert column on the right of selection when initial data is empty', () => {\n      var hot = handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: [],\n        dataSchema: [],\n        contextMenu: true,\n        height: 400\n      });\n\n      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n      hot.addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(0);\n\n      var cell = $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0);\n\n      cell.simulate('mousedown', {which: 3});\n      contextMenu(cell[0]);\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(3).simulate('mousedown'); // Insert column on the right\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(0, 1, 'ContextMenu.columnRight', undefined, undefined, undefined);\n      expect(countCols()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should insert column on the right of selection (reverse selection)', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n      hot.addHook('afterCreateCol', afterCreateColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 3, 0, 1);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(3).simulate('mousedown'); // Insert col right\n\n      expect(afterCreateColCallback).toHaveBeenCalledWith(4, 1, 'ContextMenu.columnRight', undefined, undefined, undefined);\n      expect(countCols()).toEqual(5);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should remove selected rows', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n      hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n      expect(countRows()).toEqual(4);\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown'); // Remove row\n\n      expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeRow', undefined, undefined);\n      expect(countRows()).toEqual(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should allow to remove the latest row', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(1, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n      hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n      expect(countRows()).toBe(1);\n\n      selectCell(0, 0, 0, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown'); // Remove row\n\n      expect(afterRemoveRowCallback).toHaveBeenCalledWith(0, 1, [0], 'ContextMenu.removeRow', undefined, undefined);\n      expect(countRows()).toBe(0);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should remove selected rows (reverse selection)', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n      hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n      expect(countRows()).toBe(4);\n\n      selectCell(3, 0, 1, 0);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(4).simulate('mousedown'); // Remove row\n\n      expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeRow', undefined, undefined);\n      expect(countRows()).toBe(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should remove selected columns', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n      hot.addHook('afterRemoveCol', afterRemoveColCallback);\n\n      expect(countCols()).toBe(4);\n\n      selectCell(0, 1, 0, 3);\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown'); // Remove col\n\n      expect(afterRemoveColCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeColumn', undefined, undefined);\n      expect(countCols()).toBe(1);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should allow to remove the latest column', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 1),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n      hot.addHook('afterRemoveCol', afterRemoveColCallback);\n\n      expect(countCols()).toBe(1);\n\n      selectCell(0, 0, 0, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown'); // Remove column\n\n      expect(afterRemoveColCallback).toHaveBeenCalledWith(0, 1, [0], 'ContextMenu.removeColumn', undefined, undefined);\n      expect(countCols()).toBe(0);\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should remove selected columns (reverse selection)', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n      hot.addHook('afterRemoveCol', afterRemoveColCallback);\n\n      expect(countCols()).toEqual(4);\n\n      selectCell(0, 3, 0, 1);\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(5).simulate('mousedown'); // Remove col\n\n      expect(afterRemoveColCallback).toHaveBeenCalledWith(1, 3, [1, 2, 3], 'ContextMenu.removeColumn', undefined, undefined);\n      expect(countCols()).toEqual(1);\n    });\n\n    it('should undo changes', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n\n      setDataAtCell(0, 0, 'XX');\n\n      expect(getDataAtCell(0, 0)).toEqual('XX');\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(6).simulate('mousedown'); // Undo\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n    });\n\n    it('should redo changes', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n\n      setDataAtCell(0, 0, 'XX');\n\n      expect(getDataAtCell(0, 0)).toEqual('XX');\n\n      hot.undo();\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(7).simulate('mousedown'); // Redo\n\n      expect(getDataAtCell(0, 0)).toEqual('XX');\n    });\n\n    it('should display only the specified actions', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: ['remove_row', 'undo'],\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);\n    });\n\n    it('should make a single selected cell read-only', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);\n\n      selectCell(0, 0);\n      contextMenu();\n      var menu = $('.htContextMenu .ht_master .htCore tbody');\n      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown'); // Make read-only\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(true);\n\n    });\n\n    it('should make a single selected cell writable, when it\\'s set to read-only', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n\n      hot.getCellMeta(0, 0).readOnly = true;\n\n      selectCell(0, 0);\n      contextMenu();\n      var menu = $('.htContextMenu .ht_master .htCore tbody');\n      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown');\n\n      expect(hot.getCellMeta(0, 0).readOnly).toBe(false);\n    });\n\n    it('should make a group of selected cells read-only, if all of them are writable', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          expect(hot.getCellMeta(i, j).readOnly).toEqual(false);\n        }\n      }\n\n      selectCell(0, 0, 2, 2);\n\n      contextMenu();\n      var menu = $('.htContextMenu .ht_master .htCore tbody');\n      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown');\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          expect(hot.getCellMeta(i, j).readOnly).toEqual(true);\n        }\n      }\n    });\n\n    it('should not close menu after clicking on submenu root item', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: ['row_above', 'remove_row', '---------', 'alignment'],\n        height: 400\n      });\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(2).simulate('mousedown'); // Alignment\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should make a group of selected cells read-only, if all of them are writable (reverse selection)', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          expect(hot.getCellMeta(i, j).readOnly).toEqual(false);\n        }\n      }\n\n      selectCell(2, 2, 0, 0);\n\n      contextMenu();\n\n      var menu = $('.htContextMenu .ht_master .htCore tbody');\n      menu.find('td').not('.htSeparator').eq(8).simulate('mousedown'); // Make read-only\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          expect(hot.getCellMeta(i, j).readOnly).toEqual(true);\n        }\n      }\n    });\n\n    it('should make a group of selected cells writable if at least one of them is read-only', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          expect(hot.getCellMeta(i, j).readOnly).toEqual(false);\n        }\n      }\n\n      hot.getCellMeta(1, 1).readOnly = true;\n\n      selectCell(0, 0, 2, 2);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(8).simulate('mousedown'); // Make writable\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          expect(hot.getCellMeta(i, j).readOnly).toEqual(false);\n        }\n      }\n    });\n\n    it('should make a group of selected cells writable if at least one of them is read-only (reverse selection)', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: true,\n        height: 100\n      });\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          expect(hot.getCellMeta(i, j).readOnly).toEqual(false);\n        }\n      }\n\n      hot.getCellMeta(1, 1).readOnly = true;\n\n      selectCell(2, 2, 0, 0);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(8).simulate('mousedown'); // Make writable\n\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n          expect(hot.getCellMeta(i, j).readOnly).toEqual(false);\n        }\n      }\n    });\n  });\n\n  describe('disabling actions', () => {\n    it('should not close menu after clicking on disabled item', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(4, 4),\n        contextMenu: ['undo', 'redo'],\n        height: 400\n      });\n\n      selectCell(1, 0, 3, 0);\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown'); // Undo\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should disable undo and redo action if undoRedo plugin is not enabled ', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        undoRedo: false,\n        height: 100\n      });\n\n      contextMenu();\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(9)').text()).toEqual('Undo');\n      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(true);\n      expect($menu.find('tbody td:eq(10)').text()).toEqual('Redo');\n      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(true);\n\n    });\n\n    it('should disable undo when there is nothing to undo ', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect(hot.undoRedo.isUndoAvailable()).toBe(false);\n      expect($menu.find('tbody td:eq(9)').text()).toEqual('Undo');\n      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(true);\n\n      closeContextMenu();\n\n      setDataAtCell(0, 0, 'foo');\n\n      contextMenu();\n      $menu = $('.htContextMenu .ht_master .htCore');\n      expect(hot.undoRedo.isUndoAvailable()).toBe(true);\n      expect($menu.find('tbody td:eq(9)').hasClass('htDisabled')).toBe(false);\n\n    });\n\n    it('should disable redo when there is nothing to redo ', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect(hot.undoRedo.isRedoAvailable()).toBe(false);\n      expect($menu.find('tbody td:eq(10)').text()).toEqual('Redo');\n      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(true);\n\n      closeContextMenu();\n\n      setDataAtCell(0, 0, 'foo');\n      hot.undo();\n\n      contextMenu();\n      $menu = $('.htContextMenu .ht_master .htCore');\n      expect(hot.undoRedo.isRedoAvailable()).toBe(true);\n      expect($menu.find('tbody td:eq(10)').hasClass('htDisabled')).toBe(false);\n\n    });\n\n    it('should disable Insert row in context menu when maxRows is reached', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        maxRows: 6,\n        height: 100\n      });\n\n      contextMenu();\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(0)').text()).toEqual('Insert row above');\n      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(false);\n      expect($menu.find('tbody td:eq(1)').text()).toEqual('Insert row below');\n      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(false);\n\n      closeContextMenu();\n\n      alter('insert_row');\n\n      contextMenu();\n      $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(true);\n      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(true);\n\n    });\n\n    it('should disable Insert col in context menu when maxCols is reached', () => {\n      var hot = handsontable({\n        contextMenu: true,\n        maxCols: 6,\n        height: 100\n      });\n\n      contextMenu();\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(3)').text()).toEqual('Insert column on the left');\n      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(false);\n      expect($menu.find('tbody td:eq(4)').text()).toEqual('Insert column on the right');\n      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(false);\n\n      closeContextMenu();\n\n      alter('insert_col');\n\n      contextMenu();\n      $menu = $('.htContextMenu .ht_master .htCore');\n      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(true);\n      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(true);\n\n    });\n\n    it('should NOT disable Insert col in context menu when only one column exists', () => {\n      var hot = handsontable({\n        data: [['single col']],\n        contextMenu: true,\n        maxCols: 10,\n        height: 100\n      });\n\n      selectCell(0, 0);\n      contextMenu();\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(3)').text()).toEqual('Insert column on the left');\n      expect($menu.find('tbody td:eq(3)').hasClass('htDisabled')).toBe(false);\n      expect($menu.find('tbody td:eq(4)').text()).toEqual('Insert column on the right');\n      expect($menu.find('tbody td:eq(4)').hasClass('htDisabled')).toBe(false);\n    });\n\n    it('should disable Remove col in context menu when rows are selected by headers', function() {\n      var hot = handsontable({\n        contextMenu: ['remove_col', 'remove_row'],\n        height: 100,\n        colHeaders: true,\n        rowHeaders: true\n      });\n      var $rowsHeaders = this.$container.find('.ht_clone_left tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(2).simulate('mouseover');\n      $rowsHeaders.eq(3).simulate('mouseover');\n      $rowsHeaders.eq(3).simulate('mousemove');\n      $rowsHeaders.eq(3).simulate('mouseup');\n\n      contextMenu();\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(0)').text()).toEqual('Remove column');\n      expect($menu.find('tbody td:eq(0)').hasClass('htDisabled')).toBe(true);\n    });\n\n    it('should disable Remove row in context menu when columns are selected by headers', function() {\n      var hot = handsontable({\n        contextMenu: ['remove_col', 'remove_row'],\n        height: 100,\n        colHeaders: true,\n        rowHeaders: true\n      });\n\n      this.$container.find('thead tr:eq(0) th:eq(1)').simulate('mousedown');\n      this.$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseover');\n      this.$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseover');\n      this.$container.find('thead tr:eq(0) th:eq(3)').simulate('mousemove');\n      this.$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseup');\n\n      contextMenu();\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect($menu.find('tbody td:eq(1)').text()).toEqual('Remove row');\n      expect($menu.find('tbody td:eq(1)').hasClass('htDisabled')).toBe(true);\n    });\n\n  });\n\n  describe('custom options', () => {\n    it('should have custom items list', () => {\n\n      var callback1 = jasmine.createSpy('callback1');\n      var callback2 = jasmine.createSpy('callback2');\n\n      var hot = handsontable({\n        contextMenu: {\n          items: {\n            cust1: {\n              name: 'CustomItem1',\n              callback: callback1\n            },\n            cust2: {\n              name: 'CustomItem2',\n              callback: callback2\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual(['CustomItem1', 'CustomItem2'].join(''));\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(callback1.calls.count()).toEqual(1);\n      expect(callback2.calls.count()).toEqual(0);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');\n\n      expect(callback1.calls.count()).toEqual(1);\n      expect(callback2.calls.count()).toEqual(1);\n\n    });\n\n    it('should have custom items list (defined as a function)', () => {\n      var enabled = false;\n      var hot = handsontable({\n        contextMenu: {\n          items: {\n            cust1: {\n              name() {\n                if (!enabled) {\n                  return 'Enable my custom option';\n                }\n                return 'Disable my custom option';\n\n              },\n              callback() {\n\n              }\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual('Enable my custom option');\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      enabled = true;\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual('Disable my custom option');\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n    });\n\n    it('should enable to define item options globally', () => {\n\n      var callback = jasmine.createSpy('callback');\n\n      var hot = handsontable({\n        contextMenu: {\n          callback,\n          items: {\n            cust1: {\n              name: 'CustomItem1'\n            },\n            cust2: {\n              name: 'CustomItem2'\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(callback.calls.count()).toEqual(1);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');\n\n      expect(callback.calls.count()).toEqual(2);\n    });\n\n    it('should override default items options', () => {\n      var callback = jasmine.createSpy('callback');\n\n      var hot = handsontable({\n        contextMenu: {\n          items: {\n            remove_row: {\n              callback\n            },\n            remove_col: {\n              name: 'Delete column'\n            }\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').length).toEqual(2);\n      expect($('.htContextMenu .ht_master .htCore').find('tbody td').text()).toEqual(['Remove row', 'Delete column'].join(''));\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(callback.calls.count()).toEqual(1);\n\n      expect(countCols()).toEqual(5);\n\n      contextMenu();\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(1)').simulate('mousedown');\n\n      expect(countCols()).toEqual(4);\n    });\n\n    it('should fire item callback after item has been clicked', () => {\n      var customItem = {\n        name: 'Custom item',\n        callback() {}\n      };\n\n      spyOn(customItem, 'callback');\n\n      var hot = handsontable({\n        contextMenu: {\n          items: {\n            customItemKey: customItem\n          }\n        },\n        height: 100\n      });\n\n      contextMenu();\n\n      $('.htContextMenu .ht_master .htCore').find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(customItem.callback.calls.count()).toEqual(1);\n      expect(customItem.callback.calls.argsFor(0)[0]).toEqual('customItemKey');\n    });\n  });\n\n  describe('keyboard navigation', () => {\n    describe('no item selected', () => {\n      it('should select the first item in menu, when user hits ARROW_DOWN', () => {\n        var hot = handsontable({\n          contextMenu: true,\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n      });\n\n      it('should scroll down, when user hits ARROW_DOWN for item in menu below the viewport', () => {\n        var hot = handsontable({\n            height: 100,\n            contextMenu: {\n              items: {\n                item1: {\n                  name: 'Item1'\n                },\n                item2: {\n                  name: 'Item2'\n                },\n                item3: {\n                  name: 'Item3'\n                },\n                item4: {\n                  name: 'Item4'\n                },\n                item5: {\n                  name: 'Item5'\n                },\n                item6: {\n                  name: 'Item6'\n                },\n                item7: {\n                  name: 'Item7'\n                },\n                item8: {\n                  name: 'Item8'\n                },\n                item9: {\n                  name: 'Item9'\n                },\n                item10: {\n                  name: 'Item10'\n                },\n                item11: {\n                  name: 'Item11'\n                },\n                item12: {\n                  name: 'Item12'\n                },\n                item13: {\n                  name: 'Item13'\n                },\n                item14: {\n                  name: 'Item14'\n                },\n                item15: {\n                  name: 'Item15'\n                },\n                item16: {\n                  name: 'Item16'\n                },\n                item17: {\n                  name: 'Item17'\n                },\n                item18: {\n                  name: 'Item18'\n                },\n                item19: {\n                  name: 'Item19'\n                },\n                item20: {\n                  name: 'Item20'\n                },\n                item21: {\n                  name: 'Item21'\n                },\n                item22: {\n                  name: 'Item22'\n                },\n                item23: {\n                  name: 'Item23'\n                },\n                item24: {\n                  name: 'Item24'\n                },\n                item25: {\n                  name: 'Item25'\n                },\n                item26: {\n                  name: 'Item26'\n                },\n                item27: {\n                  name: 'Item27'\n                },\n                item28: {\n                  name: 'Item28'\n                },\n                item29: {\n                  name: 'Item29'\n                },\n                item30: {\n                  name: 'Item30'\n                },\n                item31: {\n                  name: 'Item31'\n                },\n                item32: {\n                  name: 'Item32'\n                },\n                item33: {\n                  name: 'Item33'\n                },\n                item34: {\n                  name: 'Item34'\n                },\n                item35: {\n                  name: 'Item35'\n                },\n                item36: {\n                  name: 'Item36'\n                },\n                item37: {\n                  name: 'Item37'\n                },\n                item38: {\n                  name: 'Item38'\n                },\n                item39: {\n                  name: 'Item39'\n                },\n                item40: {\n                  name: 'Item40'\n                }\n              }\n            }\n          }),\n          scrollHeight;\n\n        contextMenu();\n\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n\n        if (typeof window.scrollY !== 'undefined') {\n          scrollHeight = window.scrollY;\n        } else {\n          scrollHeight = document.documentElement.scrollTop;\n        }\n\n        expect(scrollHeight).not.toBe(0);\n      });\n\n      it('should select the first NOT DISABLED item in menu, when user hits ARROW_DOWN', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                disabled: true\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n      });\n\n      it('should NOT select any items in menu, when user hits ARROW_DOWN and there is no items enabled', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                disabled: true\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3',\n                disabled: true\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toBeUndefined();\n      });\n\n      it('should select the last item in menu, when user hits ARROW_UP', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: 'Item1',\n              item2: 'Item2',\n              item3: 'Item3'\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n      });\n\n      it('should select the last NOT DISABLED item in menu, when user hits ARROW_UP', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3',\n                disabled: true\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n      });\n\n      it('should NOT select any items in menu, when user hits ARROW_UP and there is no items enabled', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                disabled: true\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3',\n                disabled: true\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var id = $('.htContextMenu')[0].id;\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        expect(menuHot.getSelected()).toBeUndefined();\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toBeUndefined();\n      });\n    });\n\n    describe('item selected', () => {\n      it('should select next item when user hits ARROW_DOWN', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([1, 0, 1, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n      });\n\n      it('should select next item (skipping disabled items) when user hits ARROW_DOWN', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n      });\n\n      it('should select next item (skipping separators) when user hits ARROW_DOWN', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              sep1: Handsontable.plugins.ContextMenu.SEPARATOR,\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([3, 0, 3, 0]);\n      });\n\n      it('should not change selection when last item is selected and user hits ARROW_DOWN', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([1, 0, 1, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n      });\n\n      it('should not change selection when last enabled item is selected and user hits ARROW_DOWN', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3',\n                disabled: true\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([1, 0, 1, 0]);\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([1, 0, 1, 0]);\n      });\n\n      it('should select next item when user hits ARROW_UP', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([1, 0, 1, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n      });\n\n      it('should select next item (skipping disabled items) when user hits ARROW_UP', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2',\n                disabled: true\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n      });\n\n      it('should select next item (skipping separators) when user hits ARROW_UP', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              sep1: Handsontable.plugins.ContextMenu.SEPARATOR,\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([3, 0, 3, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n      });\n\n      it('should not change selection when first item is selected and user hits ARROW_UP', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([1, 0, 1, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n      });\n\n      it('should not change selection when first enabled item is selected and user hits ARROW_UP', () => {\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                disabled: true\n              },\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([2, 0, 2, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([1, 0, 1, 0]);\n\n        keyDownUp('arrow_up');\n\n        expect(menuHot.getSelected()).toEqual([1, 0, 1, 0]);\n      });\n\n      it('should perform a selected item action, when user hits ENTER', () => {\n        var itemAction = jasmine.createSpy('itemAction');\n        var hot = handsontable({\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1',\n                callback: itemAction\n              },\n              item2: 'Item2'\n            }\n          },\n          height: 100\n        });\n\n        contextMenu();\n        var menuHot = hot.getPlugin('contextMenu').menu.hotMenu;\n\n        keyDownUp('arrow_down');\n\n        expect(menuHot.getSelected()).toEqual([0, 0, 0, 0]);\n\n        expect(itemAction).not.toHaveBeenCalled();\n\n        keyDownUp('enter');\n\n        expect(itemAction).toHaveBeenCalled();\n        expect($(hot.getPlugin('contextMenu').menu).is(':visible')).toBe(false);\n      });\n    });\n\n    it('should close menu when user hits ESC', () => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      keyDownUp('esc');\n\n      expect($('.htContextMenu').is(':visible')).toBe(false);\n    });\n\n    it('should close sub-menu and parent menu in proper order when user hits ESC twice', (done) => {\n      handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(9);\n      var contextMenuRoot = $('.htContextMenu');\n\n      item.simulate('mouseover');\n\n      setTimeout(() => {\n        expect($('.htContextMenuSub_Alignment').is(':visible')).toBe(true);\n\n        keyDownUp('esc');\n\n        expect($('.htContextMenuSub_Alignment').is(':visible')).toBe(false);\n\n        keyDownUp('esc');\n\n        expect($('.htContextMenu').is(':visible')).toBe(false);\n        done();\n      }, 350); // waits for submenu open delay\n    });\n  });\n\n  describe('mouse navigation', () => {\n    it('should not scroll window position after fireing mouseenter on menu item', () => {\n      var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(1000, 5),\n          contextMenu: true,\n        }),\n        scrollHeight;\n\n      hot.selectCell(100, 0);\n      contextMenu();\n      window.scrollTo(0, 0);\n      $('.htContextMenu .ht_master .htCore').find('tr td:eq(\"0\")').simulate('mouseenter');\n\n      if (typeof window.scrollY !== 'undefined') {\n        scrollHeight = window.scrollY;\n      } else {\n        scrollHeight = document.documentElement.scrollTop;\n      }\n\n      expect(scrollHeight).toBe(0);\n    });\n\n    it('should not scroll window position after fireing click on menu', () => {\n      var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(1000, 5),\n          contextMenu: {\n            items: {\n              item1: {\n                name: 'Item1'\n              },\n              sep1: Handsontable.plugins.ContextMenu.SEPARATOR,\n              item2: {\n                name: 'Item2'\n              },\n              item3: {\n                name: 'Item3'\n              }\n            }\n          }\n        }),\n        scrollHeight;\n\n      hot.selectCell(100, 0);\n      contextMenu();\n      window.scrollTo(0, 0);\n      $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(0).simulate('mousedown');\n\n      if (typeof window.scrollY !== 'undefined') {\n        scrollHeight = window.scrollY;\n      } else {\n        scrollHeight = document.documentElement.scrollTop;\n      }\n\n      expect(scrollHeight).toBe(0);\n    });\n  });\n\n  describe('working with multiple tables', () => {\n    beforeEach(function () {\n      this.$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n    });\n\n    afterEach(function () {\n      if (this.$container2) {\n        this.$container2.handsontable('destroy');\n        this.$container2.remove();\n      }\n    });\n\n    it('should apply enabling/disabling contextMenu using updateSetting only to particular instance of HOT ', function () {\n      var hot1 = handsontable({\n        contextMenu: false,\n        height: 100\n      });\n      var hot2 = this.$container2.handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      hot2 = hot2.handsontable('getInstance');\n      var contextMenuContainer = $('.htContextMenu');\n\n      contextMenu();\n      expect(hot1.getPlugin('contextMenu').isEnabled()).toBe(false);\n      expect(contextMenuContainer.is(':visible')).toBe(false);\n\n      contextMenu2();\n      expect(hot2.getPlugin('contextMenu').isEnabled()).toBe(true);\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      mouseDown(hot2.rootElement); // close menu\n\n      hot1.updateSettings({\n        contextMenu: true\n      });\n      hot2.updateSettings({\n        contextMenu: false\n      });\n\n      contextMenu2();\n      expect(hot2.getPlugin('contextMenu').isEnabled()).toBe(false);\n\n      contextMenu();\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      function contextMenu2() {\n        var hot = spec().$container2.data('handsontable');\n        var selected = hot.getSelected();\n\n        if (!selected) {\n          hot.selectCell(0, 0);\n          selected = hot.getSelected();\n        }\n\n        var cell = hot.getCell(selected[0], selected[1]);\n        var cellOffset = $(cell).offset();\n\n        $(cell).simulate('contextmenu', {\n          pageX: cellOffset.left,\n          pageY: cellOffset.top\n        });\n      }\n    });\n\n    it('should perform a contextMenu action only for particular instance of HOT ', function () {\n      var hot1 = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      var hot2 = this.$container2.handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      hot2 = hot2.handsontable('getInstance');\n\n      hot1.selectCell(0, 0);\n      contextMenu();\n\n      expect(hot1.countRows()).toEqual(5);\n      expect(hot2.countRows()).toEqual(5);\n\n      $('.htContextMenu .ht_master .htCore').find('tr td:eq(\"0\")').simulate('mousedown'); // insert row above\n\n      expect(hot1.countRows()).toEqual(6);\n      expect(hot2.countRows()).toEqual(5);\n\n      hot2.selectCell(0, 0);\n      contextMenu2();\n\n      expect(hot1.countRows()).toEqual(6);\n      expect(hot2.countRows()).toEqual(5);\n\n      $('.htContextMenu .ht_master .htCore').find('tr td:eq(\"0\")').simulate('mousedown'); // insert row above\n\n      expect(hot1.countRows()).toEqual(6);\n      expect(hot2.countRows()).toEqual(6);\n\n      function contextMenu2() {\n        var hot = spec().$container2.data('handsontable');\n        var selected = hot.getSelected();\n\n        if (!selected) {\n          hot.selectCell(0, 0);\n          selected = hot.getSelected();\n        }\n\n        var cell = hot.getCell(selected[0], selected[1]);\n        var cellOffset = $(cell).offset();\n\n        $(cell).simulate('contextmenu', {\n          pageX: cellOffset.left,\n          pageY: cellOffset.top\n        });\n      }\n    });\n  });\n\n  describe('context menu with native scroll', () => {\n    beforeEach(function () {\n      var wrapper = $('<div></div>').css({\n        width: 400,\n        height: 200,\n        overflow: 'scroll'\n      });\n\n      this.$wrapper = this.$container.wrap(wrapper).parent();\n    });\n\n    afterEach(function () {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n      this.$wrapper.remove();\n    });\n\n    it('should display menu table is not scrolled', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(40, 30),\n        colWidths: 50, // can also be a number or a function\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should display menu table is scrolled', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(40, 30),\n        colWidths: 50, // can also be a number or a function\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      var mainHolder = hot.view.wt.wtTable.holder;\n\n      $(mainHolder).scrollTop(300);\n      $(mainHolder).scroll();\n\n      selectCell(15, 3);\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should not close the menu, when table is scrolled', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(40, 30),\n        colWidths: 50, // can also be a number or a function\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      var $mainHolder = $(hot.view.wt.wtTable.holder);\n\n      selectCell(15, 3);\n      var scrollTop = $mainHolder.scrollTop();\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      $mainHolder.scrollTop(scrollTop + 60).scroll();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      contextMenu();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n\n      $mainHolder.scrollTop(scrollTop + 100).scroll();\n\n      expect($('.htContextMenu').is(':visible')).toBe(true);\n    });\n\n    it('should not attempt to close menu, when table is scrolled and the menu is already closed', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(40, 30),\n        colWidths: 50, // can also be a number or a function\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        height: 100\n      });\n\n      var mainHolder = $(hot.view.wt.wtTable.holder);\n\n      selectCell(15, 3);\n      var scrollTop = mainHolder.scrollTop();\n      contextMenu();\n      var $menu = $('.htContextMenu');\n\n      spyOn(hot.getPlugin('contextMenu'), 'close');\n\n      mainHolder.scrollTop(scrollTop + 100).scroll();\n\n      expect(hot.getPlugin('contextMenu').close).not.toHaveBeenCalled();\n    });\n\n    it('should not scroll the window when hovering over context menu items (#1897 reopen)', function () {\n      this.$wrapper.css('overflow', 'visible');\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(403, 303),\n        colWidths: 50, // can also be a number or a function\n        contextMenu: true\n      });\n\n      var beginningScrollX = window.scrollX;\n\n      selectCell(2, 4);\n      contextMenu();\n\n      var cmInstance = hot.getPlugin('contextMenu').menu.hotMenu;\n\n      cmInstance.selectCell(3, 0);\n      expect(window.scrollX).toEqual(beginningScrollX);\n\n      cmInstance.selectCell(4, 0);\n      expect(window.scrollX).toEqual(beginningScrollX);\n\n      cmInstance.selectCell(6, 0);\n      expect(window.scrollX).toEqual(beginningScrollX);\n    });\n  });\n\n  describe('afterContextMenuDefaultOptions hook', () => {\n    it('should call afterContextMenuDefaultOptions hook with context menu options as the first param', () => {\n      var options;\n\n      var afterContextMenuDefaultOptions = function(options_) {\n        options = options_;\n        options.items.cust1 = {\n          name: 'My custom item',\n          callback() {\n          }\n        };\n      };\n\n      Handsontable.hooks.add('afterContextMenuDefaultOptions', afterContextMenuDefaultOptions);\n\n      var hot = handsontable({\n        contextMenu: true,\n        height: 100\n      });\n\n      contextMenu();\n\n      var $menu = $('.htContextMenu .ht_master .htCore');\n\n      expect(options).toBeDefined();\n      expect(options.items).toBeDefined();\n      expect($menu.find('tbody td').text()).toContain('My custom item');\n\n      $menu.find('tbody td:eq(0)').simulate('mousedown');\n\n      Handsontable.hooks.remove('afterContextMenuDefaultOptions', afterContextMenuDefaultOptions);\n    });\n  });\n\n  describe('beforeContextMenuSetItems hook', () => {\n    it('should add new menu item even when item is excluded from plugin settings', () => {\n      Handsontable.hooks.add('beforeContextMenuSetItems', function(options) {\n        if (this === hot || !hot) {\n          options.push({\n            key: 'test',\n            name: 'Test'\n          });\n        }\n      });\n\n      var hot = handsontable({\n        contextMenu: ['make_read_only'],\n        height: 100\n      });\n\n      contextMenu();\n\n      var items = $('.htContextMenu tbody td');\n      var actions = items.not('.htSeparator');\n\n      expect(actions.text()).toEqual([\n        'Read only',\n        'Test',\n      ].join(''));\n    });\n\n    it('should be called only with items selected in plugin settings', () => {\n      var keys = [];\n\n      Handsontable.hooks.add('beforeContextMenuSetItems', function(items) {\n        if (this === hot || !hot) {\n          keys = items.map((v) => v.key);\n        }\n      });\n\n      var hot = handsontable({\n        contextMenu: ['make_read_only', 'col_left'],\n        height: 100\n      });\n\n      contextMenu();\n\n      expect(keys).toEqual(['make_read_only', 'col_left']);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/contextMenu/test/contextMenu.e2e.js","describe('ContextMenuReadOnly', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should trigger `afterSetCellMeta` callback after changing cell to read only by context menu', () => {\n    var afterSetCellMetaCallback = jasmine.createSpy('afterSetCellMetaCallback');\n    var rows = 5,\n      columns = 5;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(rows, columns),\n      rowHeaders: true,\n      colHeaders: true,\n      contextMenu: true,\n      afterSetCellMeta: afterSetCellMetaCallback\n    });\n\n    selectCell(2, 3);\n    contextMenu();\n\n    var changeToReadOnluButton = $('.htItemWrapper').filter(function() {\n      return $(this).text() === 'Read only';\n    })[0];\n\n    $(changeToReadOnluButton).simulate('mousedown');\n    expect(afterSetCellMetaCallback).toHaveBeenCalledWith(2, 3, 'readOnly', true, undefined, undefined);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/contextMenu/test/predefinedItems/readOnly.e2e.js","describe('CopyPaste', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  const arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  describe('enabling/disabing plugin', () => {\n    it('should copyPaste be set enabled as default', () => {\n      const hot = handsontable();\n\n      expect(hot.getSettings().copyPaste).toBeTruthy();\n      expect(hot.getPlugin('CopyPaste').textarea).toBeDefined();\n    });\n\n    it('should do not create textarea element if copyPaste is disabled on initialization', () => {\n      handsontable({\n        copyPaste: false\n      });\n\n      expect($('#HandsontableCopyPaste').length).toEqual(0);\n    });\n  });\n\n  describe('working with multiple tables', () => {\n    beforeEach(function() {\n      this.$container2 = $(`<div id=\"${id}2\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container2) {\n        this.$container2.handsontable('destroy');\n        this.$container2.remove();\n      }\n    });\n\n    it('should disable copyPaste only in particular table', function() {\n      const hot1 = handsontable();\n      const hot2 = spec().$container2.handsontable({ copyPaste: false }).handsontable('getInstance');\n\n      expect(hot1.getPlugin('CopyPaste').textarea).toBeDefined();\n      expect(hot2.getPlugin('CopyPaste').textarea).toBeUndefined();\n    });\n\n    it('should create only one HandsontableCopyPaste regardless of the number of tables', function() {\n      handsontable();\n      spec().$container2.handsontable();\n\n      expect($('#HandsontableCopyPaste').length).toEqual(1);\n    });\n\n    it('should leave HandsontableCopyPaste as long as at least one table has copyPaste enabled', function() {\n      const hot1 = handsontable();\n      const hot2 = spec().$container2.handsontable().handsontable('getInstance');\n\n      expect($('#HandsontableCopyPaste').length).toEqual(1);\n\n      hot1.updateSettings({ copyPaste: false });\n\n      expect($('#HandsontableCopyPaste').length).toEqual(1);\n\n      hot2.updateSettings({ copyPaste: false });\n\n      expect($('#HandsontableCopyPaste').length).toEqual(0);\n    });\n  });\n\n  describe('setting values copyable', () => {\n    it('should set copyable text when selecting a single cell and hitting ctrl', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n\n      const copyPasteTextarea = $('#HandsontableCopyPaste')[0];\n\n      expect(copyPasteTextarea.value.length).toEqual(0);\n\n      selectCell(0, 0);\n      keyDownUp(Handsontable.helper.KEY_CODES.CONTROL_LEFT);\n\n      expect(copyPasteTextarea.value).toEqual('A1');\n    });\n\n    it('should set copyable text when selecting a single cell and hitting left command', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n\n      const copyPasteTextarea = $('#HandsontableCopyPaste')[0];\n\n      expect(copyPasteTextarea.value.length).toEqual(0);\n\n      selectCell(0, 0);\n      keyDownUp(Handsontable.helper.KEY_CODES.COMMAND_LEFT);\n\n      expect(copyPasteTextarea.value).toEqual('A1');\n    });\n\n    it('should set copyable text when selecting a single cell and hitting right command', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n\n      const copyPasteTextarea = $('#HandsontableCopyPaste')[0];\n\n      expect(copyPasteTextarea.value.length).toEqual(0);\n\n      selectCell(0, 0);\n      keyDownUp(Handsontable.helper.KEY_CODES.COMMAND_RIGHT);\n\n      expect(copyPasteTextarea.value).toEqual('A1');\n    });\n\n    it('should set copyable text when selecting multiple cells and hitting ctrl', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n\n      const copyPasteTextarea = $('#HandsontableCopyPaste')[0];\n\n      expect(copyPasteTextarea.value.length).toEqual(0);\n\n      selectCell(0, 0, 1, 0);\n      keyDownUp(Handsontable.helper.KEY_CODES.CONTROL_LEFT);\n\n      expect(copyPasteTextarea.value).toEqual('A1\\nA2');\n    });\n\n    it('should set copyable text when selecting all cells with CTRL+A', (done) => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n\n      const copyPasteTextarea = $('#HandsontableCopyPaste')[0];\n\n      expect(copyPasteTextarea.value.length).toEqual(0);\n\n      selectCell(0, 0);\n\n      $(document.activeElement).simulate('keydown', {keyCode: Handsontable.helper.KEY_CODES.A, ctrlKey: true});\n\n      setTimeout(() => {\n        expect(getSelected()).toEqual([0, 0, 1, 1]);\n        expect(copyPasteTextarea.value).toEqual('A1\\tB1\\nA2\\tB2');\n        done();\n      }, 10);\n    });\n\n    it('should not throw error when no cell is selected (#1221)', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2)\n      });\n\n      selectCell(0, 0);\n      deselectCell();\n\n      function keydownCtrl() {\n        $(document).simulate('keydown', {\n          keyCode: Handsontable.helper.KEY_CODES.COMMAND_LEFT\n        });\n      }\n\n      // expect no to throw any exception\n      expect(keydownCtrl).not.toThrow();\n    });\n\n    it('should set copyable text when selecting a single cell with specified type and hitting ctrl (#1300)', () => {\n      handsontable({\n        data: [['A', 1], ['B', 2]],\n        columns: [\n          { type: 'text' },\n          { type: 'numeric' }\n        ]\n      });\n\n      const copyPasteTextarea = $('#HandsontableCopyPaste')[0];\n\n      expect(copyPasteTextarea.value.length).toEqual(0);\n\n      selectCell(0, 0, 1, 1);\n      keyDownUp(Handsontable.helper.KEY_CODES.CONTROL_LEFT);\n\n      expect(copyPasteTextarea.value).toEqual('A\\t1\\nB\\t2');\n    });\n\n    it('should set copyable text when selecting a single cell with editor type as false (#2574)', () => {\n      handsontable({\n        data: [['A', 1], ['B', 2]],\n        columns: [\n          { type: 'text' },\n          { editor: false }\n        ]\n      });\n\n      const copyPasteTextarea = $('#HandsontableCopyPaste')[0];\n\n      expect(copyPasteTextarea.value.length).toEqual(0);\n\n      selectCell(1, 1, 1, 1);\n      keyDownUp(Handsontable.helper.KEY_CODES.CONTROL_LEFT);\n\n      expect(copyPasteTextarea.value).toEqual('2');\n    });\n\n    it('should set copyable text until copyRowsLimit is reached', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          rowsLimit: 2\n        },\n      });\n\n      selectCell(0, 0, countRows() - 1, countCols() - 1); // selectAll\n      keyDownUp('ctrl');\n\n      // should prepare 2 rows for copying\n      expect($('#HandsontableCopyPaste')[0].value).toEqual('\\tKia\\tNissan\\tToyota\\tHonda\\n2008\\t10\\t11\\t12\\t13');\n    });\n\n    it('should set copyable text until copyColsLimit is reached', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          columnsLimit: 2\n        },\n      });\n\n      selectCell(0, 0, countRows() - 1, countCols() - 1); // selectAll\n      keyDownUp('ctrl');\n\n      // should prepare 2 columns for copying\n      expect($('#HandsontableCopyPaste')[0].value).toEqual('\\tKia\\n2008\\t10\\n2009\\t20\\n2010\\t30');\n    });\n\n    it('should call onCopyLimit callback when copy limit was reached', () => {\n      let result;\n\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          rowsLimit: 2,\n          columnsLimit: 2\n        },\n        afterCopyLimit(selectedRowsCount, selectedColsCount, copyRowsLimit, copyColsLimit) {\n          result = [selectedRowsCount, selectedColsCount, copyRowsLimit, copyColsLimit];\n        }\n      });\n\n      selectCell(0, 0, countRows() - 1, countCols() - 1); // selectAll\n      keyDownUp('ctrl');\n      expect(result).toEqual([4, 5, 2, 2]);\n    });\n  });\n\n  describe('copy', () => {\n    it('should be possible to copy data by keyboard shortcut', () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n\n      selectCell(1, 1);\n      keyDown('ctrl');\n      keyDown('ctrl+c');\n\n      expect($('#HandsontableCopyPaste')[0]).toBe(document.activeElement);\n      // unfortunately we have not access to read data from the system clipboard\n    });\n\n    it('should be possible to copy data by API', () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n\n      selectCell(1, 0);\n\n      hot.getPlugin('CopyPaste').setCopyableText();\n      // below line is cause of console warning in FF about execCommand\n      hot.getPlugin('CopyPaste').copy(true);\n\n      expect($('#HandsontableCopyPaste')[0]).toBe(document.activeElement);\n      // unfortunately we have not access to read data from the system clipboard\n    });\n\n    it('should be possible to copy data by contextMenu option', () => {\n      const beforeCopySpy = jasmine.createSpy('beforeCopy');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCopy: beforeCopySpy,\n        contextMenu: ['copy']\n      });\n\n      selectCell(0, 1);\n      contextMenu();\n\n      const items = $('.htContextMenu tbody td');\n      const actions = items.not('.htSeparator');\n\n      actions.simulate('mousedown');\n\n      expect(beforeCopySpy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call beforeCopy and afterCopy during copying operation', () => {\n      const beforeCopySpy = jasmine.createSpy('beforeCopy');\n      const afterCopySpy = jasmine.createSpy('afterCopy');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCopy: beforeCopySpy,\n        afterCopy: afterCopySpy\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      keyDown('ctrl+c');\n\n      expect(beforeCopySpy.calls.count()).toEqual(1);\n      expect(beforeCopySpy).toHaveBeenCalledWith([['A1']], [{startRow: 0, startCol: 0, endRow: 0, endCol: 0}], void 0, void 0, void 0, void 0);\n      expect(afterCopySpy.calls.count()).toEqual(1);\n      expect(afterCopySpy).toHaveBeenCalledWith([['A1']], [{startRow: 0, startCol: 0, endRow: 0, endCol: 0}], void 0, void 0, void 0, void 0);\n    });\n\n    it('should be possible to block copying', () => {\n      const afterCopySpy = jasmine.createSpy('afterCopy');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCopy() {\n          return false;\n        },\n        afterCopy: afterCopySpy\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      keyDown('ctrl+c');\n\n      expect(afterCopySpy.calls.count()).toEqual(0);\n    });\n\n    it('should be possible modification of changes during copying', async () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCopy(changes) {\n          changes.splice(0, 1);\n        }\n      });\n\n      selectCell(0, 0, 1, 0);\n      keyDown('ctrl');\n      keyDown('ctrl+c');\n\n      await sleep(60);\n\n      expect($('#HandsontableCopyPaste')[0].value).toEqual('A2');\n    });\n  });\n\n  describe('cut', () => {\n    it('should be possible to cut data by keyboard shortcut', async () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n\n      selectCell(1, 1);\n      keyDown('ctrl');\n      keyDown('ctrl+x');\n\n      expect($('#HandsontableCopyPaste')[0]).toBe(document.activeElement);\n\n      await sleep(100);\n\n      expect(hot.getDataAtCell(1, 1)).toBe('');\n      // unfortunately we have not access to read data from the system clipboard\n    });\n\n    it('should be possible to cut data by API', async () => {\n      const hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n\n      selectCell(1, 0);\n\n      hot.getPlugin('CopyPaste').setCopyableText();\n      // below line is cause of console warning in FF about execCommand\n      hot.getPlugin('CopyPaste').cut(true);\n\n      expect($('#HandsontableCopyPaste')[0]).toBe(document.activeElement);\n\n      await sleep(100);\n\n      expect(hot.getDataAtCell(1, 0)).toBe('');\n      // unfortunately we have not access to read data from the system clipboard\n    });\n\n    it('should be possible to cut data by contextMenu option', () => {\n      const beforeCutSpy = jasmine.createSpy('beforeCopy');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCut: beforeCutSpy,\n        contextMenu: ['cut']\n      });\n\n      selectCell(0, 1);\n      contextMenu();\n\n      const items = $('.htContextMenu tbody td');\n      const actions = items.not('.htSeparator');\n\n      actions.simulate('mousedown');\n\n      expect(beforeCutSpy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call beforeCut and afterCut during cutting out operation', () => {\n      const beforeCutSpy = jasmine.createSpy('beforeCut');\n      const afterCutSpy = jasmine.createSpy('afterCut');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCut: beforeCutSpy,\n        afterCut: afterCutSpy\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      keyDown('ctrl+x');\n\n      expect(beforeCutSpy.calls.count()).toEqual(1);\n      expect(beforeCutSpy).toHaveBeenCalledWith([['A1']], [{startRow: 0, startCol: 0, endRow: 0, endCol: 0}], void 0, void 0, void 0, void 0);\n      expect(afterCutSpy.calls.count()).toEqual(1);\n      expect(afterCutSpy).toHaveBeenCalledWith([['A1']], [{startRow: 0, startCol: 0, endRow: 0, endCol: 0}], void 0, void 0, void 0, void 0);\n    });\n\n    it('should be possible to block cutting out', () => {\n      const afterCutSpy = jasmine.createSpy('afterCut');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforeCut() {\n          return false;\n        },\n        afterCut: afterCutSpy\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      keyDown('ctrl+x');\n\n      expect(afterCutSpy.calls.count()).toEqual(0);\n    });\n  });\n\n  describe('paste', () => {\n    it('should not create new rows or columns when allowInsertRow and allowInsertColumn equal false', async () => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_down',\n        },\n        allowInsertRow: false,\n        allowInsertColumn: false\n      });\n\n      selectCell(3, 4); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      await sleep(60);\n\n      let expected = arrayOfArrays();\n      expected[3][4] = 'Kia';\n      expect(getData()).toEqual(expected);\n    });\n\n    it('should shift data down instead of overwrite when paste (when allowInsertRow = false)', async () => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_down',\n        },\n        allowInsertRow: false\n      });\n\n      selectCell(1, 0); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      await sleep(60);\n\n      expect(getData().length).toEqual(4);\n      expect(getData(0, 0, 2, 4)).toEqual([['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['Kia', 'Nissan', 'Toyota', 12, 13], ['2008', 10, 11, 14, 13]]);\n    });\n\n    it('should shift data down instead of overwrite when paste (minSpareRows > 0)', async () => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_down'\n        },\n        minSpareRows: 1\n      });\n\n      selectCell(1, 0); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      await sleep(60);\n\n      expect(getData().length).toEqual(6);\n      expect(getData(0, 0, 2, 4)).toEqual([['', 'Kia', 'Nissan', 'Toyota', 'Honda'], ['Kia', 'Nissan', 'Toyota', 12, 13], ['2008', 10, 11, 14, 13]]);\n    });\n\n    it('should shift right insert instead of overwrite when paste', async () => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_right'\n        },\n        allowInsertColumn: false\n      });\n\n      selectCell(1, 0); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      await sleep(60);\n\n      expect(getData()[0].length).toEqual(5);\n      expect(getDataAtRow(1)).toEqual(['Kia', 'Nissan', 'Toyota', '2008', 10]);\n    });\n\n    it('should shift right insert instead of overwrite when paste (minSpareCols > 0)', (done) => {\n      handsontable({\n        data: arrayOfArrays(),\n        copyPaste: {\n          pasteMode: 'shift_right'\n        },\n        minSpareCols: 1\n      });\n\n      selectCell(1, 0); // selectAll\n      triggerPaste('Kia\\tNissan\\tToyota');\n\n      setTimeout(() => {\n        expect(getData()[0].length).toEqual(9);\n        expect(getDataAtRow(1)).toEqual(['Kia', 'Nissan', 'Toyota', '2008', 10, 11, 12, 13, null]);\n        done();\n      }, 60);\n    });\n\n    it('should not throw an error when changes are null in `once` hook', async () => {\n      let errors = 0;\n\n      try {\n        handsontable({\n          data: arrayOfArrays(),\n          afterChange(changes, source) {\n            if (source === 'loadData') {\n              return;\n            }\n\n            loadData(arrayOfArrays());\n          }\n        });\n\n        selectCell(1, 0); // selectAll\n        triggerPaste('Kia\\tNissan\\tToyota');\n\n      } catch (e) {\n        errors++;\n      }\n\n      await sleep(60);\n\n      expect(errors).toEqual(0);\n    });\n\n    it('should not paste any data, if no cell is selected', (done) => {\n      const copiedData1 = 'foo';\n      const copiedData2 = 'bar';\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 1)\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');\n      expect(getSelected()).toBeUndefined();\n\n      triggerPaste(copiedData1);\n\n      setTimeout(() => {\n        expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n        expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n        expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');\n      }, 100);\n\n      setTimeout(() => {\n        selectCell(1, 0, 2, 0);\n\n        triggerPaste(copiedData2);\n      }, 200);\n\n      setTimeout(() => {\n        expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n        expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual(copiedData2);\n        expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual(copiedData2);\n        done();\n      }, 300);\n    });\n\n    it('should not paste any data, if no cell is selected (select/deselect cell using mouse)', async () => {\n      const copiedData = 'foo';\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(3, 1)\n      });\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');\n\n      spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mousedown');\n      spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseup');\n\n      expect(getSelected()).toEqual([1, 0, 1, 0]);\n\n      $('html').simulate('mousedown').simulate('mouseup');\n\n      expect(getSelected()).toBeUndefined();\n\n      triggerPaste(copiedData);\n\n      await sleep(100);\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n      expect(spec().$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('A3');\n    });\n\n    it('should call beforePaste and afterPaste during pasting operation', async () => {\n      const beforePasteSpy = jasmine.createSpy('beforePaste');\n      const afterPasteSpy = jasmine.createSpy('afterPaste');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforePaste: beforePasteSpy,\n        afterPaste: afterPasteSpy\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      triggerPaste('Kia');\n\n      await sleep(60);\n\n      expect(beforePasteSpy.calls.count()).toEqual(1);\n      expect(beforePasteSpy).toHaveBeenCalledWith([['Kia']], [{startRow: 0, startCol: 0, endRow: 0, endCol: 0}], void 0, void 0, void 0, void 0);\n\n      expect(afterPasteSpy.calls.count()).toEqual(1);\n      expect(afterPasteSpy).toHaveBeenCalledWith([['Kia']], [{startRow: 0, startCol: 0, endRow: 0, endCol: 0}], void 0, void 0, void 0, void 0);\n    });\n\n    it('should be possible to block pasting', async () => {\n      const afterPasteSpy = jasmine.createSpy('afterPaste');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforePaste() {\n          return false;\n        },\n        afterPaste: afterPasteSpy\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      triggerPaste('Kia');\n\n      await sleep(60);\n\n      expect(afterPasteSpy.calls.count()).toEqual(0);\n    });\n\n    it('should be possible modification of changes', async () => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n        beforePaste(changes) {\n          changes.splice(0, 1);\n        }\n      });\n\n      selectCell(0, 0);\n      keyDown('ctrl');\n      triggerPaste('Kia\\nToyota');\n\n      await sleep(60);\n\n      expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('Toyota');\n      expect(spec().$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A2');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/copyPaste/test/copyPaste.e2e.js","describe('CustomBorders', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    var wrapper = $('<div></div>').css({\n      width: 400,\n      height: 200,\n      overflow: 'scroll'\n    });\n\n    this.$wrapper = this.$container.wrap(wrapper).parent();\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n    this.$wrapper.remove();\n  });\n\n  it('should draw custom borders for single td', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(7, 7),\n      colHeaders: true,\n      rowHeaders: true,\n      customBorders: [\n        {\n          row: 2,\n          col: 2,\n          left: {\n            width: 2,\n            color: 'red'\n          },\n          right: {\n            width: 1,\n            color: 'green'\n          }\n        }]\n    });\n    // [top,left, bottom, right]\n\n    var borders = $('.wtBorder.border_row2col2');\n    expect(borders.length).toEqual(20); // 4 times 5 elements (top,right, bottom, left, corner)\n    expect(borders[0].className).toContain('hidden'); // hidden top\n    expect(borders[1].style.backgroundColor).toEqual('red'); // left red\n    expect(borders[1].style.width).toEqual('2px'); // left 2px width\n    expect(borders[2].className).toContain('hidden'); // hidden bottom\n    expect(borders[3].style.backgroundColor).toEqual('green'); // green right\n    expect(borders[3].style.width).toEqual('1px'); // right 1px width\n  });\n\n  it('should draw custom borders for range', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(7, 7),\n      colHeaders: true,\n      rowHeaders: true,\n      customBorders: [\n        {\n          range: {\n            from: {\n              row: 1,\n              col: 1\n            },\n            to: {\n              row: 3,\n              col: 4\n            }\n          },\n          top: {\n            width: 2,\n            color: 'black'\n          },\n          left: {\n            width: 2,\n            color: 'red'\n          },\n          bottom: {\n            width: 2,\n            color: 'red'\n          },\n          right: {\n            width: 3,\n            color: 'black'\n          }\n        }]\n    });\n\n    for (var row = 1; row <= 3; row++) {\n      for (var column = 1; column <= 4; column++) {\n        if (row == 1) {\n          var topRow = $(`.wtBorder.border_row${row}col${column}`);\n          expect(topRow.length).toEqual(20); // borders for all tables (main and hiders)\n          expect(topRow[0].style.backgroundColor).toEqual('black');\n          expect(topRow[0].style.height).toEqual('2px');\n        }\n        if (column == 1) {\n          var leftColumn = $(`.wtBorder.border_row${row}col${column}`);\n          expect(leftColumn.length).toEqual(20); // borders for all tables (main and hiders)\n          expect(leftColumn[1].style.backgroundColor).toEqual('red');\n          expect(leftColumn[1].style.width).toEqual('2px');\n        }\n        if (row == 3) {\n          var bottomRow = $(`.wtBorder.border_row${row}col${column}`);\n          expect(bottomRow.length).toEqual(20); // borders for all tables (main and hiders)\n          expect(bottomRow[2].style.backgroundColor).toEqual('red');\n          expect(bottomRow[2].style.height).toEqual('2px');\n        }\n        if (column == 4) {\n          var rightColumn = $(`.wtBorder.border_row${row}col${column}`);\n          expect(rightColumn.length).toEqual(20); // borders for all tables (main and hiders)\n          expect(rightColumn[3].style.backgroundColor).toEqual('black');\n          expect(rightColumn[3].style.width).toEqual('3px');\n        }\n      }\n    }\n  });\n\n  it('should draw top border from context menu options', (done) => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: true\n    });\n\n    var defaultBorder = {\n        color: '#000',\n        width: 1\n      },\n      empty = {\n        hide: true\n      };\n\n    contextMenu();\n    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(10);\n    item.simulate('mouseover');\n\n    setTimeout(() => {\n      var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(0);\n\n      button.simulate('mousedown');\n\n      // expect(getCellMeta(0,0).borders.hasOwnProperty('top')).toBe(true);\n      expect(getCellMeta(0, 0).borders.top).toEqual(defaultBorder);\n      expect(getCellMeta(0, 0).borders.left).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.right).toEqual(empty);\n      done();\n    }, 350);\n  });\n\n  it('should draw left border from context menu options', (done) => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: true\n    });\n\n    var defaultBorder = {\n        color: '#000',\n        width: 1\n      },\n      empty = {\n        hide: true\n      };\n\n    contextMenu();\n    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(10);\n    item.simulate('mouseover');\n\n    setTimeout(() => {\n      var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(3);\n\n      button.simulate('mousedown');\n\n      /* eslint-disable no-prototype-builtins */\n      expect(getCellMeta(0, 0).borders.hasOwnProperty('left')).toBe(true);\n      expect(getCellMeta(0, 0).borders.top).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.left).toEqual(defaultBorder);\n      expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.right).toEqual(empty);\n      done();\n    }, 350);\n  });\n\n  it('should draw right border from context menu options', (done) => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: true\n    });\n\n    var defaultBorder = {\n        color: '#000',\n        width: 1\n      },\n      empty = {\n        hide: true\n      };\n\n    contextMenu();\n    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(10);\n    item.simulate('mouseover');\n\n    setTimeout(() => {\n      var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(1);\n\n      button.simulate('mousedown');\n\n      /* eslint-disable no-prototype-builtins */\n      expect(getCellMeta(0, 0).borders.hasOwnProperty('right')).toBe(true);\n      expect(getCellMeta(0, 0).borders.top).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.left).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.bottom).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.right).toEqual(defaultBorder);\n      done();\n    }, 350);\n  });\n\n  it('should draw bottom border from context menu options', (done) => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: true\n    });\n\n    var defaultBorder = {\n        color: '#000',\n        width: 1\n      },\n      empty = {\n        hide: true\n      };\n\n    contextMenu();\n    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(10);\n    item.simulate('mouseover');\n\n    setTimeout(() => {\n      var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(2);\n\n      button.simulate('mousedown');\n\n      /* eslint-disable no-prototype-builtins */\n      expect(getCellMeta(0, 0).borders.hasOwnProperty('right')).toBe(true);\n      expect(getCellMeta(0, 0).borders.top).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.left).toEqual(empty);\n      expect(getCellMeta(0, 0).borders.bottom).toEqual(defaultBorder);\n      expect(getCellMeta(0, 0).borders.right).toEqual(empty);\n      done();\n    }, 350);\n  });\n\n  it('should remove all bottoms border from context menu options', (done) => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      contextMenu: true,\n      customBorders: [\n        {\n          row: 0,\n          col: 0,\n          left: {\n            width: 2,\n            color: 'red'\n          },\n          right: {\n            width: 1,\n            color: 'green'\n          }\n        }]\n    });\n\n    contextMenu();\n    var item = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator').eq(10);\n    item.simulate('mouseover');\n\n    setTimeout(() => {\n      var contextSubMenu = $(`.htContextMenuSub_${item.text()}`);\n      var button = contextSubMenu.find('.ht_master .htCore tbody td').not('.htSeparator').eq(4);\n\n      button.simulate('mousedown');\n\n      expect(getCellMeta(0, 0).borders).toBeUndefined();\n      done();\n    }, 350);\n  });\n\n  it('should disable `Borders` context menu item when menu was triggered from corner header', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n      rowHeaders: true,\n      colHeaders: true,\n      contextMenu: true,\n      customBorders: true,\n    });\n\n    $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0).simulate('mousedown', {which: 3});\n    contextMenu();\n\n    expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n      'Insert column on the left',\n      'Insert column on the right',\n      'Remove row',\n      'Remove column',\n      'Undo',\n      'Redo',\n      'Read only',\n      'Alignment',\n      'Borders',\n    ].join(''));\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/customBorders/test/customBorders.e2e.js","describe('DragToScroll', () => {\n  function createBoundaries() {\n    return {\n      top: 100,\n      left: 100,\n      width: 900,\n      height: 900,\n      bottom: 1000,\n      right: 1000\n    };\n  }\n  var dragToScroll = new Handsontable.plugins.DragToScroll();\n\n  dragToScroll.setBoundaries(createBoundaries());\n\n  it('exact top, exact left should be in boundaries', () => {\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(0);\n      expect(scrollY).toEqual(0);\n    });\n\n    dragToScroll.check(100, 100);\n  });\n\n  it('exact bottom, exact right should be in boundaries', () => {\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(0);\n      expect(scrollY).toEqual(0);\n    });\n\n    dragToScroll.check(1000, 1000);\n  });\n\n  it('less than top, less than left should be out in \"top\" direction', () => {\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(-1);\n      expect(scrollY).toEqual(-1);\n    });\n\n    dragToScroll.check(99, 99);\n  });\n\n  it('exact top, less than left should be out in \"left\" direction', () => {\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(-1);\n      expect(scrollY).toEqual(0);\n    });\n\n    dragToScroll.check(99, 100);\n  });\n\n  it('less than top, more than right should be out in \"top\" direction', () => {\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(1);\n      expect(scrollY).toEqual(-1);\n    });\n\n    dragToScroll.check(1001, 99);\n  });\n\n  it('more than bottom, more than right should be out in \"bottom\" direction', () => {\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(1);\n      expect(scrollY).toEqual(1);\n    });\n\n    dragToScroll.check(1001, 1001);\n  });\n\n  it('exact bottom, more than right should be out in \"right\" direction', () => {\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(1);\n      expect(scrollY).toEqual(0);\n    });\n\n    dragToScroll.check(1001, 1000);\n  });\n\n  it('more than bottom, less than left should be out in \"bottom\" direction', () => {\n    dragToScroll.setCallback((scrollX, scrollY) => {\n      expect(scrollX).toEqual(-1);\n      expect(scrollY).toEqual(1);\n    });\n\n    dragToScroll.check(99, 1001);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/dragToScroll/test/dragToScroll.e2e.js","describe('manualColumnFreeze', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('freezeColumn', () => {\n    it('should increase fixedColumnsLeft setting', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true\n      });\n      var plugin = hot.getPlugin('manualColumnFreeze');\n      plugin.freezeColumn(4);\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n    });\n\n    it('should freeze (make fixed) the column provided as an argument', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true\n      });\n\n      var plugin = hot.getPlugin('manualColumnFreeze');\n      var movePlugin = hot.getPlugin('manualColumnMove');\n\n      plugin.freezeColumn(5);\n\n      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(5);\n    });\n  });\n\n  describe('unfreezeColumn', () => {\n    it('should decrease fixedColumnsLeft setting', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        fixedColumnsLeft: 1\n      });\n      var plugin = hot.getPlugin('manualColumnFreeze');\n\n      plugin.unfreezeColumn(0);\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(0);\n    });\n\n    it('should unfreeze (make non-fixed) the column provided as an argument', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        fixedColumnsLeft: 3\n      });\n\n      var plugin = hot.getPlugin('manualColumnFreeze');\n      var movePlugin = hot.getPlugin('manualColumnMove');\n\n      plugin.unfreezeColumn(0);\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n      expect(movePlugin.columnsMapper.getValueByIndex(0)).toEqual(1);\n      expect(movePlugin.columnsMapper.getValueByIndex(1)).toEqual(2);\n      expect(movePlugin.columnsMapper.getValueByIndex(2)).toEqual(0);\n    });\n  });\n\n  describe('functionality', () => {\n\n    it('should add a \\'freeze this column\\' context menu entry for non-fixed columns', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        contextMenu: true\n      });\n\n      selectCell(1, 1);\n      contextMenu();\n\n      var freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Freeze this column';\n\n      });\n\n      expect(freezeEntry.size()).toEqual(1);\n    });\n\n    it('should add a \\'unfreeze this column\\' context menu entry for fixed columns', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        contextMenu: true,\n        fixedColumnsLeft: 2\n      });\n\n      selectCell(1, 1);\n      contextMenu();\n\n      var freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Unfreeze this column';\n\n      });\n\n      expect(freezeEntry.size()).toEqual(1);\n    });\n\n    it('should fix the desired column after clicking the \\'freeze this column\\' context menu entry', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        fixedColumnsLeft: 1,\n        contextMenu: true\n      });\n\n      selectCell(1, 3);\n\n      var dataAtCell = hot.getDataAtCell(1, 3);\n\n      contextMenu();\n\n      var freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        if ($(this).text() === 'Freeze this column') {\n          return true;\n        }\n        return false;\n      });\n\n      expect(freezeEntry.size()).toEqual(1);\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n      expect(hot.getDataAtCell(1, 1)).toEqual(dataAtCell);\n\n    });\n\n    it('should unfix the desired column (and revert it to it\\'s original position) after clicking the \\'unfreeze this column\\' context menu entry', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnFreeze: true,\n        fixedColumnsLeft: 3,\n        manualColumnMove: [0, 2, 5, 3, 4, 1, 6, 7, 8, 9],\n        contextMenu: true,\n        rowHeaders: true\n      });\n\n      var dataAtCell = hot.getDataAtCell(1, 0);\n      expect(dataAtCell).toEqual('A2');\n      dataAtCell = hot.getDataAtCell(1, 1);\n      expect(dataAtCell).toEqual('C2');\n      dataAtCell = hot.getDataAtCell(1, 2);\n      expect(dataAtCell).toEqual('F2');\n\n      selectCell(1, 1);\n      contextMenu();\n\n      var freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Unfreeze this column';\n\n      });\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(2);\n      dataAtCell = hot.getDataAtCell(1, 0);\n      expect(dataAtCell).toEqual('A2');\n      dataAtCell = hot.getDataAtCell(1, 1);\n      expect(dataAtCell).toEqual('F2');\n      dataAtCell = hot.getDataAtCell(1, 2);\n      expect(dataAtCell).toEqual('C2');\n\n      selectCell(1, 1);\n      contextMenu();\n\n      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        if ($(this).text() === 'Unfreeze this column') {\n          return true;\n        }\n        return false;\n      });\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n      dataAtCell = hot.getDataAtCell(1, 0);\n      expect(dataAtCell).toEqual('A2');\n      dataAtCell = hot.getDataAtCell(1, 1);\n      expect(dataAtCell).toEqual('C2');\n      dataAtCell = hot.getDataAtCell(1, 2);\n      expect(dataAtCell).toEqual('D2');\n\n      dataAtCell = hot.getDataAtCell(1, 5);\n      expect(dataAtCell).toEqual('F2');\n\n      // Use the modified columns position.\n      hot.updateSettings({\n        fixedColumnsLeft: 0,\n        manualColumnMove: [0, 2, 5, 3, 4, 1, 6, 7, 8, 9],\n      });\n\n      hot.getSettings().fixedColumnsLeft = 0;\n\n      selectCell(1, 2);\n      contextMenu();\n      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Freeze this column';\n      });\n\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n      dataAtCell = hot.getDataAtCell(1, 0);\n      expect(dataAtCell).toEqual('F2');\n\n      selectCell(1, 0);\n      contextMenu();\n      freezeEntry = $(hot.getPlugin('contextMenu').menu.container).find('div').filter(function() {\n        return $(this).text() === 'Unfreeze this column';\n      });\n\n      freezeEntry.eq(0).simulate('mousedown');\n\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(0);\n      dataAtCell = hot.getDataAtCell(1, 2);\n      expect(dataAtCell).toEqual('F2');\n    });\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/manualColumnFreeze/test/manualColumnFreeze.e2e.js","describe('manualColumnMove', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('init', () => {\n    it('should change column order at init', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: [1, 2, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n    });\n  });\n\n  describe('persistentState', () => {\n    it('should load data from cache after initialization of new Handsontable instance', function(done) {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true,\n        persistentState: true\n      });\n\n      var dataAt0x2Cell = getDataAtCell(0, 2);\n      var manualColumnMovePlugin = hot.getPlugin('manualColumnMove');\n\n      manualColumnMovePlugin.moveColumn(2, 0);\n      manualColumnMovePlugin.persistentStateSave();\n\n      hot.destroy();\n      this.$container.remove();\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true,\n        persistentState: true\n      });\n\n      expect(getDataAtCell(0, 0)).toEqual(dataAt0x2Cell);\n      done();\n    });\n\n    it('should work with updateSettings properly', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true,\n        persistentState: true\n      });\n\n      var dataAt0x2Cell = getDataAtCell(0, 2);\n      var manualColumnMovePlugin = hot.getPlugin('manualColumnMove');\n\n      manualColumnMovePlugin.moveColumn(2, 0);\n      manualColumnMovePlugin.persistentStateSave();\n\n      updateSettings({});\n      expect(getDataAtCell(0, 0)).toEqual(dataAt0x2Cell);\n    });\n  });\n\n  describe('updateSettings', () => {\n    it('should be enabled after specifying it in updateSettings config', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true\n      });\n\n      updateSettings({\n        manualColumnMove: true\n      });\n\n      this.$container.find('thead tr:eq(0) th:eq(0)').simulate('mousedown');\n      this.$container.find('thead tr:eq(0) th:eq(0)').simulate('mouseup');\n\n      expect(this.$container.hasClass('after-selection--columns')).toBeGreaterThan(0);\n    });\n\n    it('should change the default column order with updateSettings', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      updateSettings({\n        manualColumnMove: [2, 1, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n    });\n\n    it('should change column order with updateSettings', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: [1, 2, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n\n      updateSettings({\n        manualColumnMove: [2, 1, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n    });\n\n    it('should update columnsMapper when updateSettings change numbers of columns', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumn(2, 0);\n\n      updateSettings({\n        columns: [\n          {data: 2},\n          {data: 0},\n          {data: 1},\n        ]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n    });\n\n    it('should reset column order with updateSettings when undefined is passed', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        manualColumnMove: [1, 2, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('A1');\n\n      updateSettings({\n        manualColumnMove: void 0\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n    });\n  });\n\n  describe('loadData', function() {\n    it('should increase numbers of columns if it is necessary', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        manualColumnMove: true\n      });\n\n      hot.loadData(Handsontable.helper.createSpreadsheetData(10, 10));\n\n      expect(countRows()).toEqual(10);\n      expect(hot.getPlugin('manualColumnMove').columnsMapper.__arrayMap.length).toEqual(10);\n    });\n\n    it('should decrease numbers of columns if it is necessary', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        manualColumnMove: true\n      });\n\n      hot.loadData(Handsontable.helper.createSpreadsheetData(2, 2));\n\n      expect(countRows()).toEqual(2);\n      expect(hot.getPlugin('manualColumnMove').columnsMapper.__arrayMap.length).toEqual(2);\n    });\n  });\n\n  describe('moving', function() {\n    it('should move column by API', function () {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumn(2, 0);\n      hot.render();\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('B1');\n    });\n\n    it('should move many columns by API', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumns([7, 9, 8], 0);\n      hot.render();\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('H1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('I1');\n    });\n\n    it('should trigger an beforeColumnMove event before column move', function() {\n      var beforeMoveColumnCallback = jasmine.createSpy('beforeMoveColumnCallback');\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        beforeColumnMove: beforeMoveColumnCallback\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumns([8, 9, 7], 0);\n      hot.render();\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('I1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('H1');\n\n      expect(beforeMoveColumnCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);\n    });\n\n    it('should trigger an afterColumnMove event after column move', function() {\n      var afterMoveColumnCallback = jasmine.createSpy('afterMoveColumnCallback');\n\n      this.$container.height(150);\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        afterColumnMove: afterMoveColumnCallback\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      hot.getPlugin('manualColumnMove').moveColumns([8, 9, 7], 0);\n      hot.render();\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('I1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('J1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('H1');\n\n      expect(afterMoveColumnCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);\n    });\n\n    it('should move the second column to the first column', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      var $rowsHeaders = this.$container.find('.ht_clone_top tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(0).simulate('mouseover');\n      $rowsHeaders.eq(0).simulate('mousemove');\n      $rowsHeaders.eq(0).simulate('mouseup');\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n    });\n\n    it('should move the second row to the third row', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('B1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('C1');\n\n      var $rowsHeaders = this.$container.find('.ht_clone_top tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(3).simulate('mouseover');\n      $rowsHeaders.eq(3).simulate('mousemove');\n      $rowsHeaders.eq(3).simulate('mouseup');\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(1)').text()).toEqual('C1');\n      expect(this.$container.find('tbody tr:eq(0) td:eq(2)').text()).toEqual('B1');\n    });\n\n    it('should properly scrolling viewport if mouse is over part-visible cell', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 20),\n        colHeaders: true,\n        rowHeaders: true,\n        manualColumnMove: true,\n        width: 600,\n        height: 600,\n        colWidths: 47\n      });\n\n      hot.selectCell(0, 19);\n\n      setTimeout(() => {\n        expect(hot.view.wt.wtTable.getFirstVisibleColumn()).toBeGreaterThan(8);\n\n        var $rowsHeaders = spec().$container.find('.ht_clone_top tr th');\n\n        $rowsHeaders.eq(2).simulate('mousedown');\n        $rowsHeaders.eq(2).simulate('mouseup');\n        $rowsHeaders.eq(2).simulate('mousedown');\n        $rowsHeaders.eq(1).simulate('mouseover');\n        $rowsHeaders.eq(1).simulate('mousemove');\n        $rowsHeaders.eq(1).simulate('mouseup');\n      }, 50);\n\n      setTimeout(() => {\n        expect(hot.view.wt.wtTable.getFirstVisibleColumn()).toBeLessThan(9);\n        done();\n      }, 150);\n    });\n\n    it('moving column should keep cell meta created using cells function', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        cells(row, col) {\n          if (row == 1 && col == 0) {\n            this.readOnly = true;\n          }\n        }\n      });\n\n      var htCore = getHtCore();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n\n      hot.getPlugin('manualColumnMove').moveColumn(0, 3);\n      hot.render();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(2)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n    });\n\n    it('moving column should keep cell meta created using cell array', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n        cell: [\n          {row: 1, col: 0, readOnly: true}\n        ]\n      });\n\n      var htCore = getHtCore();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n\n      hot.getPlugin('manualColumnMove').moveColumn(3, 0);\n      hot.render();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(1)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n    });\n  });\n\n  describe('copy-paste', () => {\n    it('should create new columns is are needed', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        colHeaders: true,\n        manualColumnMove: true,\n      });\n      var changesSet = [\n        [3, 4, 'A1'],\n        [3, 5, 'B1'],\n        [3, 6, 'C1'],\n        [3, 7, 'D1'],\n      ];\n\n      // unfortunately couse of security rules, we can't simulate native mechanism (e.g. CTRL+C -> CTRL+V)\n      hot.setDataAtCell(changesSet, void 0, void 0, 'CopyPaste.paste');\n\n      expect(hot.countCols()).toEqual(8);\n    });\n  });\n\n  describe('undoRedo', () => {\n    xit('should back changes', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n      });\n      hot.getPlugin('manualColumnMove').moveColumn(1, 4);\n      hot.render();\n\n      expect(hot.getDataAtCell(1, 3)).toBe('B2');\n\n      hot.undo();\n\n      expect(hot.getDataAtCell(1, 3)).toBe('D2');\n    });\n\n    xit('should revert changes', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        colHeaders: true,\n        manualColumnMove: true,\n      });\n      hot.getPlugin('manualColumnMove').moveColumn(1, 4);\n      hot.render();\n\n      expect(hot.getDataAtCell(1, 3)).toBe('A2');\n\n      hot.undo();\n\n      expect(hot.getDataAtCell(1, 1)).toBe('A2');\n\n      hot.redo();\n\n      expect(hot.getDataAtCell(1, 3)).toBe('A2');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/manualColumnMove/test/manualColumnMove.e2e.js","describe('manualColumnMove', () => {\n  var id = 'testContainer';\n  var arrayOfArrays = Handsontable.helper.createSpreadsheetData(30, 30);\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('UI', () => {\n    it('should append UI elements to wtHider after click on row header', function() {\n      var hot = handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      var $headerTH = this.$container.find('thead tr:eq(0) th:eq(0)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(this.$container.find('.ht__manualColumnMove--guideline').length).toBe(1);\n      expect(this.$container.find('.ht__manualColumnMove--backlight').length).toBe(1);\n    });\n\n    it('should part of UI elements be visible on dragging action', function() {\n      var hot = handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      var $headerTH = this.$container.find('thead tr:eq(0) th:eq(0)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(this.$container.find('.ht__manualColumnMove--guideline:visible').length).toBe(0);\n      expect(this.$container.find('.ht__manualColumnMove--backlight:visible').length).toBe(1);\n    });\n\n    it('should all of UI elements be visible on dragging action', function() {\n      var hot = handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true\n      });\n\n      var $headers = [\n        this.$container.find('thead tr:eq(0) th:eq(0)'),\n        this.$container.find('thead tr:eq(0) th:eq(1)'),\n        this.$container.find('thead tr:eq(0) th:eq(2)'),\n      ];\n\n      $headers[0].simulate('mousedown');\n      $headers[0].simulate('mouseup');\n      $headers[0].simulate('mousedown');\n      $headers[1].simulate('mouseover');\n      $headers[2].simulate('mouseover');\n\n      expect(this.$container.find('.ht__manualColumnMove--guideline:visible').length).toBe(1);\n      expect(this.$container.find('.ht__manualColumnMove--backlight:visible').length).toBe(1);\n    });\n\n    it('should set properly width for the backlight element when stretchH is enabled', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 5),\n        width: 600,\n        colHeaders: true,\n        stretchH: 'all',\n        manualColumnMove: true\n      });\n\n      var $headerTH = this.$container.find('thead tr:eq(0) th:eq(1)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(this.$container.find('.ht__manualColumnMove--backlight')[0].offsetWidth).toBe($headerTH[0].offsetWidth);\n    });\n\n    it('should set properly width for the backlight element when stretchH is enabled and column order was changed', function() {\n      var hot = handsontable({\n        data: [\n          {id: 1, flag: 'EUR', currencyCode: 'EUR', currency: 'Euro', level: 0.9033, units: 'EUR / USD', asOf: '08/19/2015', onedChng: 0.0026},\n        ],\n        width: 600,\n        colHeaders: true,\n        stretchH: 'all',\n        manualColumnMove: [2, 4, 6, 3, 1, 0],\n        columns: [\n          { data: 'id', type: 'numeric', width: 40 },\n          { data: 'currencyCode', type: 'text' },\n          { data: 'currency', type: 'text' },\n          { data: 'level', type: 'numeric', format: '0.0000' },\n          { data: 'units', type: 'text' },\n          { data: 'asOf', type: 'date', dateFormat: 'MM/DD/YYYY' },\n          { data: 'onedChng', type: 'numeric', format: '0.00%' }\n        ]\n      });\n\n      var $headerTH = this.$container.find('thead tr:eq(0) th:eq(6)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(this.$container.find('.ht__manualColumnMove--backlight')[0].offsetWidth).toBe($headerTH[0].offsetWidth);\n    });\n\n    it('should not run moving ui if mousedown was fired on sorting element', function() {\n      var hot = handsontable({\n        data: arrayOfArrays.slice(),\n        colHeaders: true,\n        manualColumnMove: true,\n        columnSorting: true\n      });\n\n      var $headerTH = this.$container.find('thead tr:eq(0) th:eq(6)');\n      var $summaryElement = $headerTH.find('.columnSorting');\n\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n\n      var $backlight = this.$container.find('.ht__manualColumnMove--backlight')[0];\n      $summaryElement.simulate('mousedown');\n\n      var displayProp = $backlight.currentStyle ? $backlight.currentStyle.display : getComputedStyle($backlight, null).display;\n      expect(displayProp).toEqual('none');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/manualColumnMove/test/manualColumnMoveUI.e2e.js","describe('manualColumnResize', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should change column widths at init', function() {\n    handsontable({\n      manualColumnResize: [100, 150, 180]\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(100);\n    expect(colWidth(this.$container, 1)).toBe(150);\n    expect(colWidth(this.$container, 2)).toBe(180);\n  });\n\n  it('should be enabled after specifying it in updateSettings config', function() {\n    var hot = handsontable({\n      data: [\n        {id: 1, name: 'Ted', lastName: 'Right'},\n        {id: 2, name: 'Frank', lastName: 'Honest'},\n        {id: 3, name: 'Joan', lastName: 'Well'},\n        {id: 4, name: 'Sid', lastName: 'Strong'},\n        {id: 5, name: 'Jane', lastName: 'Neat'}\n      ],\n      colHeaders: true\n    });\n\n    updateSettings({manualColumnResize: true});\n\n    this.$container.find('thead tr:eq(0) th:eq(0)').simulate('mouseover');\n\n    expect($('.manualColumnResizer').size()).toBeGreaterThan(0);\n  });\n\n  it('should change the default column widths with updateSettings', function() {\n    handsontable({\n      manualColumnResize: true\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(50);\n    expect(colWidth(this.$container, 1)).toBe(50);\n    expect(colWidth(this.$container, 2)).toBe(50);\n\n    updateSettings({\n      manualColumnResize: [60, 50, 80]\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(60);\n    expect(colWidth(this.$container, 1)).toBe(50);\n    expect(colWidth(this.$container, 2)).toBe(80);\n  });\n\n  it('should change column widths with updateSettings', function() {\n    handsontable({\n      manualColumnResize: [100, 150, 180]\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(100);\n    expect(colWidth(this.$container, 1)).toBe(150);\n    expect(colWidth(this.$container, 2)).toBe(180);\n\n    updateSettings({\n      manualColumnResize: [60, 50, 80]\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(60);\n    expect(colWidth(this.$container, 1)).toBe(50);\n    expect(colWidth(this.$container, 2)).toBe(80);\n  });\n\n  it('should reset column widths when undefined is passed', function() {\n    handsontable({\n      manualColumnResize: [100, 150, 180]\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(100);\n    expect(colWidth(this.$container, 1)).toBe(150);\n    expect(colWidth(this.$container, 2)).toBe(180);\n\n    updateSettings({\n      manualColumnResize: void 0\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(50);\n    expect(colWidth(this.$container, 1)).toBe(50);\n    expect(colWidth(this.$container, 2)).toBe(50);\n  });\n\n  it('should not reset column widths when `true` is passed', function() {\n    handsontable({\n      manualColumnResize: [100, 150, 180]\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(100);\n    expect(colWidth(this.$container, 1)).toBe(150);\n    expect(colWidth(this.$container, 2)).toBe(180);\n\n    updateSettings({\n      manualColumnResize: true\n    });\n\n    expect(colWidth(this.$container, 0)).toBe(100);\n    expect(colWidth(this.$container, 1)).toBe(150);\n    expect(colWidth(this.$container, 2)).toBe(180);\n  });\n\n  it('should resize (narrowing) appropriate columns, even when stretchH `all` is enabled', function() {\n    this.$container.css('width', '910px');\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'all'\n    });\n\n    resizeColumn(1, 65);\n\n    var $columnHeaders = this.$container.find('thead tr:eq(1) th');\n\n    expect($columnHeaders.eq(0).width()).toBe(209);\n    expect($columnHeaders.eq(1).width()).toBe(64);\n    expect($columnHeaders.eq(2).width()).toBe(210);\n    expect($columnHeaders.eq(3).width()).toBe(210);\n    expect($columnHeaders.eq(4).width()).toBe(211);\n  });\n\n  it('should resize (extending) appropriate columns, even when stretchH `all` is enabled', function() {\n    this.$container.css('width', '910px');\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'all'\n    });\n\n    resizeColumn(1, 400);\n\n    var $columnHeaders = this.$container.find('thead tr:eq(1) th');\n\n    expect($columnHeaders.eq(0).width()).toBe(125);\n    expect($columnHeaders.eq(1).width()).toBe(399);\n    expect($columnHeaders.eq(2).width()).toBe(126);\n    expect($columnHeaders.eq(3).width()).toBe(126);\n    expect($columnHeaders.eq(4).width()).toBe(128);\n  });\n\n  it('should resize (narrowing) selected columns', function(done) {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 20),\n      colHeaders: true,\n      manualColumnResize: true\n    });\n\n    var $columnHeaders = this.$container.find('thead tr:eq(0) th');\n    var $colHeader = this.$container.find('thead tr:eq(0) th:eq(1)');\n    $colHeader.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualColumnResizer');\n    var resizerPosition = $resizer.position();\n\n    this.$container.find('tr:eq(0) th:eq(1)').simulate('mousedown');\n    this.$container.find('tr:eq(0) th:eq(2)').simulate('mouseover');\n    this.$container.find('tr:eq(0) th:eq(3)').simulate('mouseover');\n    this.$container.find('tr:eq(0) th:eq(3)').simulate('mousemove');\n    this.$container.find('tr:eq(0) th:eq(3)').simulate('mouseup');\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mousemove', {clientX: this.$container.find('tr:eq(0) th:eq(1)').position().left + 29});\n    $resizer.simulate('mouseup');\n\n    setTimeout(() => {\n      expect($columnHeaders.eq(1).width()).toBe(33);\n      expect($columnHeaders.eq(2).width()).toBe(34);\n      expect($columnHeaders.eq(3).width()).toBe(34);\n      done();\n    }, 1000);\n  });\n\n  it('should resize (expanding) selected columns', function(done) {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 20),\n      colHeaders: true,\n      manualColumnResize: true\n    });\n\n    var $columnHeaders = this.$container.find('thead tr:eq(0) th');\n    var $colHeader = this.$container.find('thead tr:eq(0) th:eq(1)');\n    $colHeader.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualColumnResizer');\n    var resizerPosition = $resizer.position();\n\n    this.$container.find('tr:eq(0) th:eq(1)').simulate('mousedown');\n    this.$container.find('tr:eq(0) th:eq(2)').simulate('mouseover');\n    this.$container.find('tr:eq(0) th:eq(3)').simulate('mouseover');\n    this.$container.find('tr:eq(0) th:eq(3)').simulate('mousemove');\n    this.$container.find('tr:eq(0) th:eq(3)').simulate('mouseup');\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mousemove', {clientX: this.$container.find('tr:eq(0) th:eq(1)').position().left + 150});\n    $resizer.simulate('mouseup');\n\n    setTimeout(() => {\n      expect($columnHeaders.eq(1).width()).toBe(154);\n      expect($columnHeaders.eq(2).width()).toBe(155);\n      expect($columnHeaders.eq(3).width()).toBe(155);\n      done();\n    }, 1000);\n  });\n\n  it('should resize appropriate columns to calculated stretch width after double click on column handler when stretchH is set as `all`', function(done) {\n    this.$container.css('width', '910px');\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'all',\n    });\n\n    resizeColumn(1, 65);\n\n    var $columnHeaders = this.$container.find('thead tr:eq(1) th');\n\n    expect($columnHeaders.eq(0).width()).toBe(209);\n    expect($columnHeaders.eq(1).width()).toBe(64);\n    expect($columnHeaders.eq(2).width()).toBe(210);\n    expect($columnHeaders.eq(3).width()).toBe(210);\n    expect($columnHeaders.eq(4).width()).toBe(211);\n\n    var $th = $columnHeaders.eq(1);\n\n    $th.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualColumnResizer');\n    var resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    setTimeout(() => {\n      expect($columnHeaders.eq(0).width()).toBe(180);\n      expect($columnHeaders.eq(1).width()).toBe(181);\n      expect($columnHeaders.eq(2).width()).toBe(181);\n      expect($columnHeaders.eq(3).width()).toBe(181);\n      expect($columnHeaders.eq(4).width()).toBe(181);\n      done();\n    }, 1000);\n  });\n\n  it('should resize appropriate columns to calculated autoColumnSize width after double click on column handler when stretchH is set as `last`', function(done) {\n    this.$container.css('width', '910px');\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'last',\n    });\n\n    resizeColumn(0, 65);\n\n    var $columnHeaders = this.$container.find('thead tr:eq(0) th');\n\n    expect($columnHeaders.eq(0).width()).toBe(63);\n    expect($columnHeaders.eq(1).width()).toBe(48);\n    expect($columnHeaders.eq(2).width()).toBe(49);\n    expect($columnHeaders.eq(3).width()).toBe(49);\n    expect($columnHeaders.eq(4).width()).toBe(694);\n\n    var $th = $columnHeaders.eq(0);\n\n    $th.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualColumnResizer');\n    var resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    setTimeout(() => {\n      expect($columnHeaders.eq(0).width()).toBeAroundValue(19);\n      expect($columnHeaders.eq(1).width()).toBe(48);\n      expect($columnHeaders.eq(2).width()).toBe(49);\n      expect($columnHeaders.eq(3).width()).toBe(49);\n      expect($columnHeaders.eq(4).width()).toBeAroundValue(738);\n      done();\n    }, 1000);\n  });\n\n  it('should resize appropriate columns, even if the column order was changed with manualColumnMove plugin', function() {\n    handsontable({\n      colHeaders: ['First', 'Second', 'Third'],\n      manualColumnMove: [2, 1, 0, 3],\n      manualColumnResize: true\n    });\n\n    var $columnHeaders = this.$container.find('thead tr:eq(0) th');\n    var initialColumnWidths = [];\n\n    $columnHeaders.each(function() {\n      initialColumnWidths.push($(this).width());\n    });\n\n    resizeColumn.call(this, 0, 100);\n\n    var $resizedTh = $columnHeaders.eq(0);\n\n    expect($resizedTh.text()).toEqual('Third');\n    expect($resizedTh.outerWidth()).toEqual(100);\n\n    // Sizes of remaining columns should stay the same\n    for (var i = 1; i < $columnHeaders.length; i++) {\n      expect($columnHeaders.eq(i).width()).toEqual(initialColumnWidths[i]);\n    }\n  });\n\n  it('should trigger an afterColumnResize event after column size changes', function() {\n    var afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      afterColumnResize: afterColumnResizeCallback\n    });\n\n    expect(colWidth(this.$container, 0)).toEqual(50);\n\n    resizeColumn(0, 100);\n\n    expect(afterColumnResizeCallback).toHaveBeenCalledWith(0, 100, void 0, void 0, void 0, void 0);\n    expect(colWidth(this.$container, 0)).toEqual(100);\n  });\n\n  it('should not trigger an afterColumnResize event if column size does not change (mouseMove event width delta = 0)', function() {\n    var afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      afterColumnResize: afterColumnResizeCallback\n    });\n\n    expect(colWidth(this.$container, 0)).toEqual(50);\n\n    resizeColumn(0, 50);\n\n    expect(afterColumnResizeCallback).not.toHaveBeenCalled();\n    expect(colWidth(this.$container, 0)).toEqual(50);\n  });\n\n  it('should not trigger an afterColumnResize event if column size does not change (no mouseMove event)', function() {\n    var afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      afterColumnResize: afterColumnResizeCallback\n    });\n\n    expect(colWidth(this.$container, 0)).toEqual(50);\n\n    var $th = this.$container.find('thead tr:eq(0) th:eq(0)');\n    $th.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualColumnResizer');\n    var resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    expect(afterColumnResizeCallback).not.toHaveBeenCalled();\n    expect(colWidth(this.$container, 0)).toEqual(50);\n  });\n\n  it('should trigger an afterColumnResize after column size changes, after double click', function(done) {\n    var afterColumnResizeCallback = jasmine.createSpy('afterColumnResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      afterColumnResize: afterColumnResizeCallback\n    });\n\n    expect(colWidth(this.$container, 0)).toEqual(50);\n\n    var $th = this.$container.find('thead tr:eq(0) th:eq(0)');\n\n    $th.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualColumnResizer');\n    var resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    setTimeout(() => {\n      expect(afterColumnResizeCallback.calls.count()).toEqual(1);\n      expect(afterColumnResizeCallback.calls.argsFor(0)[0]).toEqual(0);\n      // All modern browsers returns width = 25px, but IE8 seems to compute width differently and returns 24px\n      expect(afterColumnResizeCallback.calls.argsFor(0)[1]).toBeInArray([30, 31, 32, 24, 25]);\n      expect(colWidth(spec().$container, 0)).toBeInArray([30, 31, 32, 24, 25]);\n      done();\n    }, 1000);\n  });\n\n  it('should autosize column after double click (when initial width is not defined)', function(done) {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      colHeaders: true,\n      manualColumnResize: true,\n      columns: [{width: 100}, {width: 200}, {}]\n    });\n\n    expect(colWidth(this.$container, 0)).toEqual(100);\n    expect(colWidth(this.$container, 1)).toEqual(200);\n    expect(colWidth(this.$container, 2)).toEqual(50);\n\n    resizeColumn(2, 300);\n\n    var $resizer = this.$container.find('.manualColumnResizer');\n    var resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n    $resizer.simulate('mouseup');\n\n    setTimeout(() => {\n      expect(colWidth(spec().$container, 2)).toBeAroundValue(29, 3);\n      done();\n    }, 1000);\n  });\n\n  it('should autosize selected columns after double click on handler', function(done) {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(9, 9),\n      colHeaders: true,\n      manualColumnResize: true,\n    });\n\n    resizeColumn(2, 300);\n\n    this.$container.find('thead tr:eq(0) th:eq(1)').simulate('mousedown');\n    this.$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseover');\n    this.$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseover');\n    this.$container.find('thead tr:eq(0) th:eq(3)').simulate('mousemove');\n    this.$container.find('thead tr:eq(0) th:eq(3)').simulate('mouseup');\n\n    var $resizer = spec().$container.find('.manualColumnResizer');\n    var resizerPosition = $resizer.position();\n\n    setTimeout(() => {\n      $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n      $resizer.simulate('mouseup');\n      $resizer.simulate('mousedown', {clientX: resizerPosition.left});\n      $resizer.simulate('mouseup');\n    }, 600);\n\n    setTimeout(() => {\n      expect(colWidth(spec().$container, 1)).toBeAroundValue(32, 2);\n      expect(colWidth(spec().$container, 2)).toBeAroundValue(32, 2);\n      expect(colWidth(spec().$container, 3)).toBeAroundValue(32, 2);\n      done();\n    }, 1200);\n  });\n\n  it('should adjust resize handles position after table size changed', function() {\n    var maxed = false;\n\n    handsontable({\n      colHeaders: true,\n      manualColumnResize: true,\n      stretchH: 'all',\n      width() {\n        return maxed ? 614 : 200;\n      }\n    });\n\n    this.$container.find('thead th:eq(0)').simulate('mouseover');\n\n    var handle = this.$container.find('.manualColumnResizer');\n    var handleBox = handle[0].getBoundingClientRect();\n    var th0 = this.$container.find('thead th:eq(0)');\n    var thBox = th0[0].getBoundingClientRect();\n\n    expect(handleBox.left + handleBox.width).toEqual(thBox.left + thBox.width - 1);\n\n    maxed = true;\n\n    render();\n    this.$container.find('thead th:eq(0)').simulate('mouseover');\n\n    handleBox = handle[0].getBoundingClientRect();\n    thBox = th0[0].getBoundingClientRect();\n    expect(handleBox.left + handleBox.width).toEqual(thBox.left + thBox.width - 1);\n  });\n\n  it('should display the resize handle in the correct place after the table has been scrolled', function() {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 20),\n      colHeaders: true,\n      manualColumnResize: true,\n      height: 100,\n      width: 200\n    });\n\n    var mainHolder = hot.view.wt.wtTable.holder;\n\n    var $colHeader = this.$container.find('.ht_clone_top thead tr:eq(0) th:eq(2)');\n    $colHeader.simulate('mouseover');\n    var $handle = this.$container.find('.manualColumnResizer');\n    $handle[0].style.background = 'red';\n\n    expect($colHeader.offset().left + $colHeader.width() - 5).toBeCloseTo($handle.offset().left, 0);\n    expect($colHeader.offset().top).toBeCloseTo($handle.offset().top, 0);\n\n    $(mainHolder).scrollLeft(200);\n    hot.render();\n\n    $colHeader = this.$container.find('.ht_clone_top thead tr:eq(0) th:eq(3)');\n    $colHeader.simulate('mouseover');\n    expect($colHeader.offset().left + $colHeader.width() - 5).toBeCloseTo($handle.offset().left, 0);\n    expect($colHeader.offset().top).toBeCloseTo($handle.offset().top, 0);\n  });\n\n  describe('handle and guide', () => {\n    it('should display the resize handle in the proper position and with a proper size', function() {\n      var hot = handsontable({\n        data: [\n          {id: 1, name: 'Ted', lastName: 'Right'},\n          {id: 2, name: 'Frank', lastName: 'Honest'},\n          {id: 3, name: 'Joan', lastName: 'Well'},\n          {id: 4, name: 'Sid', lastName: 'Strong'},\n          {id: 5, name: 'Jane', lastName: 'Neat'}\n        ],\n        colHeaders: true,\n        manualColumnResize: true\n      });\n\n      var $headerTH = this.$container.find('thead tr:eq(0) th:eq(1)');\n      $headerTH.simulate('mouseover');\n\n      var $handle = $('.manualColumnResizer');\n\n      expect($handle.offset().left).toEqual($headerTH.offset().left + $headerTH.outerWidth() - $handle.outerWidth() - 1);\n      expect($handle.height()).toEqual($headerTH.outerHeight());\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/manualColumnResize/test/manualColumnResize.e2e.js","describe('manualRowMove', () => {\n  var id = 'testContainer';\n  var arrayOfObjects = [\n    {id: 1, name: 'Ted', lastName: 'Right'},\n    {id: 2, name: 'Frank', lastName: 'Honest'},\n    {id: 3, name: 'Joan', lastName: 'Well'},\n    {id: 4, name: 'Sid', lastName: 'Strong'},\n    {id: 5, name: 'Jane', lastName: 'Neat'},\n    {id: 6, name: 'Chuck', lastName: 'Jackson'},\n    {id: 7, name: 'Meg', lastName: 'Jansen'},\n    {id: 8, name: 'Rob', lastName: 'Norris'},\n    {id: 9, name: 'Sean', lastName: 'O\\'Hara'},\n    {id: 10, name: 'Eve', lastName: 'Branson'}\n  ];\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('init', () => {\n    it('should change row order at init', function() {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: [1, 2, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n    });\n  });\n\n  describe('updateSettings', () => {\n    it('should be enabled after specifying it in updateSettings config', function() {\n      handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true\n      });\n\n      updateSettings({\n        manualRowMove: true\n      });\n\n      this.$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n      this.$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseup');\n\n      expect(this.$container.hasClass('after-selection--rows')).toBeGreaterThan(0);\n    });\n\n    it('should change the default row order with updateSettings', function() {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      updateSettings({\n        manualRowMove: [2, 1, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n    });\n\n    it('should change row order with updateSettings', function() {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: [1, 2, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n\n      updateSettings({\n        manualRowMove: [2, 1, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n    });\n\n    it('should reset row order with updateSettings when undefined is passed', function() {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: [1, 2, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n\n      updateSettings({\n        manualRowMove: void 0\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    });\n\n    it('should not change row order with updateSettings when `true` is passed', function() {\n      handsontable({\n        data: arrayOfObjects,\n        manualRowMove: [1, 2, 0]\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n\n      updateSettings({\n        manualRowMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('1');\n    });\n  });\n\n  describe('loadData', () => {\n    it('should increase numbers of rows if it is necessary', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        manualRowMove: true\n      });\n\n      hot.loadData(Handsontable.helper.createSpreadsheetData(10, 10));\n\n      expect(countRows()).toEqual(10);\n      expect(hot.getPlugin('manualRowMove').rowsMapper.__arrayMap.length).toEqual(10);\n    });\n    it('should decrease numbers of rows if it is necessary', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        manualRowMove: true\n      });\n\n      hot.loadData(Handsontable.helper.createSpreadsheetData(2, 2));\n\n      expect(countRows()).toEqual(2);\n      expect(hot.getPlugin('manualRowMove').rowsMapper.__arrayMap.length).toEqual(2);\n    });\n  });\n\n  describe('moving', () => {\n    it('should move row by API', function() {\n      var hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      hot.getPlugin('manualRowMove').moveRow(2, 0);\n      hot.render();\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    });\n\n    it('should move many rows by API', function() {\n      var hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      hot.getPlugin('manualRowMove').moveRows([7, 9, 8], 0);\n      hot.render();\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('8');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('10');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('9');\n    });\n\n    it('should trigger an beforeRowMove event before row move', function() {\n      var beforeMoveRowCallback = jasmine.createSpy('beforeMoveRowCallback');\n\n      var hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        beforeRowMove: beforeMoveRowCallback\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      hot.getPlugin('manualRowMove').moveRows([8, 9, 7], 0);\n      hot.render();\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('9');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('10');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('8');\n\n      expect(beforeMoveRowCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);\n    });\n\n    it('should trigger an afterRowMove event after row move', function() {\n      var afterMoveRowCallback = jasmine.createSpy('afterMoveRowCallback');\n\n      this.$container.height(150);\n\n      var hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        afterRowMove: afterMoveRowCallback\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      hot.getPlugin('manualRowMove').moveRows([8, 9, 7], 0);\n      hot.render();\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('9');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('10');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('8');\n\n      expect(afterMoveRowCallback).toHaveBeenCalledWith([8, 9, 7], 0, void 0, void 0, void 0, void 0);\n    });\n\n    it('should move the second row to the first row', function() {\n      var hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      var $rowsHeaders = this.$container.find('.ht_clone_left tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(0).simulate('mouseover');\n      $rowsHeaders.eq(0).simulate('mousemove');\n      $rowsHeaders.eq(0).simulate('mouseup');\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n    });\n\n    it('should move the second row to the third row', function() {\n      handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('2');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('3');\n\n      var $rowsHeaders = this.$container.find('.ht_clone_left tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(3).simulate('mouseover');\n      $rowsHeaders.eq(3).simulate('mousemove');\n      $rowsHeaders.eq(3).simulate('mouseup');\n\n      expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('1');\n      expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('3');\n      expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('2');\n    });\n\n    it('should not move row if it\\'s not needed', function() {\n      var cache = [];\n\n      handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        afterRowMove(rows, target) {\n          cache.push(rows);\n        }\n      });\n\n      var $rowsHeaders = this.$container.find('.ht_clone_left tr th');\n\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(1).simulate('mouseup');\n      $rowsHeaders.eq(1).simulate('mousedown');\n      $rowsHeaders.eq(3).simulate('mouseup');\n\n      expect(cache.length).toEqual(0);\n    });\n\n    it('should properly scrolling viewport if mouse is over part-visible cell', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        colHeaders: true,\n        rowHeaders: true,\n        manualRowMove: true,\n        width: 600,\n        height: 600,\n        rowHeights: 47\n      });\n\n      var ev = {};\n\n      hot.selectCell(19, 0);\n\n      setTimeout(() => {\n        expect(hot.view.wt.wtTable.getFirstVisibleRow()).toBeGreaterThan(8);\n\n        var $rowsHeaders = spec().$container.find('.ht_clone_left tr th');\n\n        $rowsHeaders.eq(10).simulate('mousedown');\n        $rowsHeaders.eq(10).simulate('mouseup');\n        $rowsHeaders.eq(10).simulate('mousedown');\n        $rowsHeaders.eq(8).simulate('mouseover');\n        $rowsHeaders.eq(8).simulate('mousemove');\n        $rowsHeaders.eq(8).simulate('mouseup');\n      }, 50);\n\n      setTimeout(() => {\n        expect(hot.view.wt.wtTable.getFirstVisibleRow()).toBeLessThan(8);\n        done();\n      }, 150);\n    });\n\n    it('moving row should keep cell meta created using cells function', () => {\n      var hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        cells(row, col) {\n          if (row == 1 && col == 0) {\n            this.readOnly = true;\n          }\n        }\n      });\n\n      var htCore = getHtCore();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n\n      hot.getPlugin('manualRowMove').moveRow(1, 3);\n      hot.render();\n\n      expect(htCore.find('tbody tr:eq(2) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n    });\n\n    it('moving row should keep cell meta created using cell array', () => {\n      var hot = handsontable({\n        data: arrayOfObjects,\n        rowHeaders: true,\n        manualRowMove: true,\n        cell: [\n          {row: 1, col: 0, readOnly: true}\n        ]\n      });\n\n      var htCore = getHtCore();\n\n      expect(htCore.find('tbody tr:eq(1) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n\n      hot.getPlugin('manualRowMove').moveRow(3, 1);\n      hot.render();\n\n      expect(htCore.find('tbody tr:eq(2) td:eq(0)')[0].className.indexOf('htDimmed')).toBeGreaterThan(-1);\n    });\n  });\n\n  describe('undoRedo', () => {\n    it('should back changes', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        rowHeaders: true,\n        manualRowMove: true,\n      });\n      hot.getPlugin('manualRowMove').moveRow(1, 4);\n      hot.render();\n\n      expect(hot.getDataAtCell(3, 0)).toBe('A2');\n\n      hot.undo();\n\n      expect(hot.getDataAtCell(1, 0)).toBe('A2');\n    });\n\n    it('should revert changes', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        rowHeaders: true,\n        manualRowMove: true,\n      });\n      hot.getPlugin('manualRowMove').moveRow(1, 4);\n      hot.render();\n\n      expect(hot.getDataAtCell(3, 0)).toBe('A2');\n\n      hot.undo();\n\n      expect(hot.getDataAtCell(1, 0)).toBe('A2');\n\n      hot.redo();\n\n      expect(hot.getDataAtCell(3, 0)).toBe('A2');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/manualRowMove/test/manualRowMove.e2e.js","describe('manualRowMove', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('UI', () => {\n    it('should append UI elements to wtHider after click on row header', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      var $headerTH = this.$container.find('tbody tr:eq(0) th:eq(0)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(this.$container.find('.ht__manualRowMove--guideline').length).toBe(1);\n      expect(this.$container.find('.ht__manualRowMove--backlight').length).toBe(1);\n    });\n\n    it('should part of UI elements be visible on dragging action', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      var $headerTH = this.$container.find('tbody tr:eq(0) th:eq(0)');\n      $headerTH.simulate('mousedown');\n      $headerTH.simulate('mouseup');\n      $headerTH.simulate('mousedown');\n\n      expect(this.$container.find('.ht__manualRowMove--guideline:visible').length).toBe(0);\n      expect(this.$container.find('.ht__manualRowMove--backlight:visible').length).toBe(1);\n    });\n\n    it('should all of UI elements be visible on dragging action', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        rowHeaders: true,\n        manualRowMove: true\n      });\n\n      var $headers = [\n        this.$container.find('tbody tr:eq(0) th:eq(0)'),\n        this.$container.find('tbody tr:eq(1) th:eq(0)'),\n        this.$container.find('tbody tr:eq(2) th:eq(0)'),\n      ];\n\n      $headers[0].simulate('mousedown');\n      $headers[0].simulate('mouseup');\n      $headers[0].simulate('mousedown');\n      $headers[1].simulate('mouseover');\n      $headers[2].simulate('mouseover');\n\n      expect(this.$container.find('.ht__manualRowMove--guideline:visible').length).toBe(1);\n      expect(this.$container.find('.ht__manualRowMove--backlight:visible').length).toBe(1);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/manualRowMove/test/manualRowMoveUI.e2e.js","describe('manualRowResize', () => {\n  var id = 'test';\n  var defaultRowHeight = 22;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should change row heights at init', function() {\n    handsontable({\n      rowHeaders: true,\n      manualRowResize: [50, 40, 100]\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(51);\n    expect(rowHeight(this.$container, 1)).toEqual(40);\n    expect(rowHeight(this.$container, 2)).toEqual(100);\n  });\n\n  it('should be enabled after specifying it in updateSettings config', function() {\n    var hot = handsontable({\n      data: [\n        {id: 1, name: 'Ted', lastName: 'Right'},\n        {id: 2, name: 'Frank', lastName: 'Honest'},\n        {id: 3, name: 'Joan', lastName: 'Well'},\n        {id: 4, name: 'Sid', lastName: 'Strong'},\n        {id: 5, name: 'Jane', lastName: 'Neat'}\n      ],\n      rowHeaders: true\n    });\n\n    updateSettings({manualRowResize: true});\n\n    this.$container.find('tbody tr:eq(0) th:eq(0)').simulate('mouseover');\n\n    expect($('.manualRowResizer').size()).toBeGreaterThan(0);\n  });\n\n  it('should change the default row height with updateSettings', function() {\n    handsontable({\n      manualRowResize: true\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2); // + Double border\n    expect(rowHeight(this.$container, 1)).toEqual(defaultRowHeight + 1); // + Single border\n    expect(rowHeight(this.$container, 2)).toEqual(defaultRowHeight + 1); // + Single border\n\n    updateSettings({\n      manualRowResize: [60, 50, 80]\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(61);\n    expect(rowHeight(this.$container, 1)).toEqual(50);\n    expect(rowHeight(this.$container, 2)).toEqual(80);\n  });\n\n  it('should change the row height with updateSettings', function() {\n    handsontable({\n      manualRowResize: [60, 50, 80]\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(61);\n    expect(rowHeight(this.$container, 1)).toEqual(50);\n    expect(rowHeight(this.$container, 2)).toEqual(80);\n\n    updateSettings({\n      manualRowResize: [30, 80, 100]\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(31);\n    expect(rowHeight(this.$container, 1)).toEqual(80);\n    expect(rowHeight(this.$container, 2)).toEqual(100);\n  });\n\n  it('should not change the row height when `true` is passing', function() {\n    handsontable({\n      manualRowResize: [60, 50, 80]\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(61);\n    expect(rowHeight(this.$container, 1)).toEqual(50);\n    expect(rowHeight(this.$container, 2)).toEqual(80);\n\n    updateSettings({\n      manualRowResize: true\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(61);\n    expect(rowHeight(this.$container, 1)).toEqual(50);\n    expect(rowHeight(this.$container, 2)).toEqual(80);\n  });\n\n  it('should change the row height to defaults when undefined is passed', function() {\n    handsontable({\n      manualRowResize: [60, 50, 80]\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(61);\n    expect(rowHeight(this.$container, 1)).toEqual(50);\n    expect(rowHeight(this.$container, 2)).toEqual(80);\n\n    updateSettings({\n      manualRowResize: void 0\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2); // + Double border\n    expect(rowHeight(this.$container, 1)).toEqual(defaultRowHeight + 1); // + Single border\n    expect(rowHeight(this.$container, 2)).toEqual(defaultRowHeight + 1); // + Single border\n  });\n\n  it('should reset row height', function() {\n    handsontable({\n      manualRowResize: true\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n    expect(rowHeight(this.$container, 1)).toEqual(defaultRowHeight + 1);\n    expect(rowHeight(this.$container, 2)).toEqual(defaultRowHeight + 1);\n\n    updateSettings({\n      manualRowResize: true\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n    expect(rowHeight(this.$container, 1)).toEqual(defaultRowHeight + 1);\n    expect(rowHeight(this.$container, 2)).toEqual(defaultRowHeight + 1);\n  });\n\n  it('should trigger afterRowResize event after row height changes', function() {\n    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n\n    resizeRow(0, 100);\n    expect(afterRowResizeCallback).toHaveBeenCalledWith(0, 100, void 0, void 0, void 0, void 0);\n    expect(rowHeight(this.$container, 0)).toEqual(101);\n  });\n\n  it('should not trigger afterRowResize event if row height does not change (delta = 0)', function() {\n    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n\n    resizeRow(0, defaultRowHeight);\n    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n  });\n\n  it('should not trigger afterRowResize event after if row height does not change (no mousemove event)', function() {\n    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n\n    var $th = this.$container.find('tbody tr:eq(0) th:eq(0)');\n    $th.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualRowResizer');\n    var resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {\n      clientY: resizerPosition.top\n    });\n\n    $resizer.simulate('mouseup');\n\n    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n  });\n\n  it('should trigger an afterRowResize after row size changes, after double click', function(done) {\n    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      autoRowSize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n\n    var $th = this.$container.find('tbody tr:eq(2) th:eq(0)');\n    $th.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualRowResizer');\n    var resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {\n      clientY: resizerPosition.top\n    });\n    $resizer.simulate('mouseup');\n\n    $resizer.simulate('mousedown', {\n      clientY: resizerPosition.top\n    });\n    $resizer.simulate('mouseup');\n\n    setTimeout(() => {\n      expect(afterRowResizeCallback.calls.count()).toEqual(1);\n      expect(afterRowResizeCallback.calls.argsFor(0)[0]).toEqual(2);\n      expect(afterRowResizeCallback.calls.argsFor(0)[1]).toEqual(defaultRowHeight + 1);\n      expect(rowHeight(spec().$container, 2)).toEqual(defaultRowHeight + 1);\n      done();\n    }, 1000);\n  });\n  it('should not trigger afterRowResize event after if row height does not change (no dblclick event)', function() {\n    var afterRowResizeCallback = jasmine.createSpy('afterRowResizeCallback');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      rowHeaders: true,\n      manualRowResize: true,\n      afterRowResize: afterRowResizeCallback\n    });\n\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n\n    var $th = this.$container.find('tbody tr:eq(2) th:eq(0)');\n    $th.simulate('mouseover');\n\n    var $resizer = this.$container.find('.manualRowResizer');\n    var resizerPosition = $resizer.position();\n\n    $resizer.simulate('mousedown', {\n      clientY: resizerPosition.top\n    });\n    $resizer.simulate('mouseup');\n\n    expect(afterRowResizeCallback).not.toHaveBeenCalled();\n    expect(rowHeight(this.$container, 0)).toEqual(defaultRowHeight + 2);\n  });\n  it('should display the resize handle in the correct place after the table has been scrolled', function() {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 20),\n      rowHeaders: true,\n      manualRowResize: true,\n      height: 100,\n      width: 200\n    });\n\n    var mainHolder = hot.view.wt.wtTable.holder;\n\n    var $rowHeader = this.$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)');\n    $rowHeader.simulate('mouseover');\n    var $handle = this.$container.find('.manualRowResizer');\n    $handle[0].style.background = 'red';\n\n    expect($rowHeader.offset().left).toBeCloseTo($handle.offset().left, 0);\n    expect($rowHeader.offset().top + $rowHeader.height() - 5).toBeCloseTo($handle.offset().top, 0);\n\n    $(mainHolder).scrollTop(200);\n    $(mainHolder).scroll();\n\n    $rowHeader = this.$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)');\n    $rowHeader.simulate('mouseover');\n    expect($rowHeader.offset().left).toBeCloseTo($handle.offset().left, 0);\n    expect($rowHeader.offset().top + $rowHeader.height() - 5).toBeCloseTo($handle.offset().top, 0);\n  });\n\n  it('should autosize selected rows after double click on handler', function(done) {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(9, 9),\n      rowHeaders: true,\n      manualRowResize: true,\n    });\n\n    resizeRow(2, 300);\n\n    var $resizer = this.$container.find('.manualRowResizer');\n    var resizerPosition = $resizer.position();\n\n    this.$container.find('.ht_clone_left tbody tr:eq(1) th:eq(0)').simulate('mousedown');\n    this.$container.find('.ht_clone_left tbody tr:eq(2) th:eq(0)').simulate('mouseover');\n    this.$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mouseover');\n    this.$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mousemove');\n    this.$container.find('.ht_clone_left tbody tr:eq(3) th:eq(0)').simulate('mouseup');\n\n    setTimeout(() => {\n      $resizer.simulate('mousedown', {clientY: resizerPosition.top});\n      $resizer.simulate('mouseup');\n      $resizer.simulate('mousedown', {clientY: resizerPosition.top});\n      $resizer.simulate('mouseup');\n    }, 600);\n\n    setTimeout(() => {\n      expect(rowHeight(spec().$container, 1)).toBeAroundValue(24);\n      expect(rowHeight(spec().$container, 2)).toBeAroundValue(24);\n      expect(rowHeight(spec().$container, 3)).toBeAroundValue(24);\n      done();\n    }, 1600);\n  });\n\n  it('should resize (expanding and narrowing) selected rows', function(done) {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 20),\n      rowHeaders: true,\n      manualRowResize: true\n    });\n\n    resizeRow(2, 60);\n\n    var $rowsHeaders = this.$container.find('.ht_clone_left tr th');\n    this.$container.find('.ht_clone_left tbody tr:eq(1) th:eq(0)').simulate('mouseover');\n\n    $rowsHeaders.eq(1).simulate('mousedown');\n    $rowsHeaders.eq(2).simulate('mouseover');\n    $rowsHeaders.eq(3).simulate('mouseover');\n    $rowsHeaders.eq(3).simulate('mousemove');\n    $rowsHeaders.eq(3).simulate('mouseup');\n\n    var $resizer = this.$container.find('.manualRowResizer');\n    var resizerPosition = $resizer.position();\n\n    setTimeout(() => {\n      $resizer.simulate('mousedown', {clientY: resizerPosition.top});\n      $resizer.simulate('mousemove', {clientY: resizerPosition.top - $rowsHeaders.eq(3).height() + 80});\n      $resizer.simulate('mouseup');\n\n      expect($rowsHeaders.eq(1).height()).toEqual(80);\n      expect($rowsHeaders.eq(2).height()).toEqual(80);\n      expect($rowsHeaders.eq(3).height()).toEqual(80);\n    }, 600);\n\n    setTimeout(() => {\n      $resizer.simulate('mousedown', {clientY: resizerPosition.top});\n      $resizer.simulate('mousemove', {clientY: resizerPosition.top - $rowsHeaders.eq(3).height() + 35});\n      $resizer.simulate('mouseup');\n\n      expect($rowsHeaders.eq(1).height()).toEqual(35);\n      expect($rowsHeaders.eq(2).height()).toEqual(35);\n      expect($rowsHeaders.eq(3).height()).toEqual(35);\n      done();\n    }, 1800);\n  });\n\n  describe('handle and guide', () => {\n    it('should display the resize handle in the proper position and with a proper size', function() {\n      var hot = handsontable({\n        data: [\n          {id: 1, name: 'Ted', lastName: 'Right'},\n          {id: 2, name: 'Frank', lastName: 'Honest'},\n          {id: 3, name: 'Joan', lastName: 'Well'},\n          {id: 4, name: 'Sid', lastName: 'Strong'},\n          {id: 5, name: 'Jane', lastName: 'Neat'}\n        ],\n        rowHeaders: true,\n        manualRowResize: true\n      });\n\n      var $headerTH = this.$container.find('tbody tr:eq(1) th:eq(0)');\n      $headerTH.simulate('mouseover');\n\n      var $handle = $('.manualRowResizer');\n\n      expect($handle.offset().top).toBeCloseTo($headerTH.offset().top + $headerTH.outerHeight() - $handle.outerHeight() - 1, 0);\n      expect($handle.width()).toBeCloseTo($headerTH.outerWidth(), 0);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/manualRowResize/test/manualRowResize.e2e.js","describe('MergeCells', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('mergeCells option', () => {\n    it('should merge cell in startup', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        mergeCells: [\n          {row: 0, col: 0, rowspan: 2, colspan: 2}\n        ]\n      });\n      var TD = hot.rootElement.querySelector('td');\n\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n    });\n  });\n\n  describe('mergeCells updateSettings', () => {\n    it('should allow to overwrite the initial settings using the updateSettings method', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          {row: 0, col: 0, rowspan: 2, colspan: 2}\n        ]\n      });\n      var TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n\n      updateSettings({\n        mergeCells: [\n          {row: 2, col: 2, rowspan: 2, colspan: 2}\n        ]\n      });\n\n      TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe(null);\n      expect(TD.getAttribute('colspan')).toBe(null);\n\n      TD = getCell(2, 2);\n\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n    });\n\n    it('should allow resetting the merged cells by changing it to \\'true\\'', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          {row: 0, col: 0, rowspan: 2, colspan: 2}\n        ]\n      });\n      var TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n\n      updateSettings({\n        mergeCells: true\n      });\n\n      TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe(null);\n      expect(TD.getAttribute('colspan')).toBe(null);\n    });\n\n    it('should allow resetting and turning off the mergeCells plugin by changing mergeCells to \\'false\\'', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          {row: 0, col: 0, rowspan: 2, colspan: 2}\n        ]\n      });\n      var TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe('2');\n      expect(TD.getAttribute('colspan')).toBe('2');\n\n      updateSettings({\n        mergeCells: false\n      });\n\n      TD = hot.rootElement.querySelector('td');\n      expect(TD.getAttribute('rowspan')).toBe(null);\n      expect(TD.getAttribute('colspan')).toBe(null);\n    });\n\n  });\n\n  describe('mergeCells copy', () => {\n    it('should not copy text of cells that are merged into another cell', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        mergeCells: [\n          {row: 0, col: 0, rowspan: 2, colspan: 2}\n        ]\n      });\n      expect(hot.getCopyableText(0, 0, 2, 2)).toBe('A1\\t\\tC1\\n\\t\\tC2\\nA3\\tB3\\tC3');\n    });\n  });\n\n  describe('merged cells selection', () => {\n\n    it('should select the whole range of cells which form a merged cell', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(4, 4),\n        mergeCells: [\n          {\n            row: 0,\n            col: 0,\n            colspan: 4,\n            rowspan: 1\n          }\n        ]\n      });\n\n      var $table = this.$container.find('table.htCore');\n      var $td = $table.find('tr:eq(0) td:eq(0)');\n\n      expect($td.attr('rowspan')).toEqual('1');\n      expect($td.attr('colspan')).toEqual('4');\n\n      expect(hot.getSelected()).toBeUndefined();\n\n      hot.selectCell(0, 0);\n\n      expect(hot.getSelected()).toEqual([0, 0, 0, 3]);\n\n      deselectCell();\n\n      hot.selectCell(0, 1);\n\n      expect(hot.getSelected()).toEqual([0, 0, 0, 3]);\n    });\n\n    it('should always make a rectangular selection, when selecting merged and not merged cells', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(4, 4),\n        mergeCells: [\n          {\n            row: 1,\n            col: 1,\n            colspan: 3,\n            rowspan: 2\n          }\n        ]\n      });\n\n      var $table = this.$container.find('table.htCore');\n      var $td = $table.find('tr:eq(1) td:eq(1)');\n\n      expect($td.attr('rowspan')).toEqual('2');\n      expect($td.attr('colspan')).toEqual('3');\n\n      expect(hot.getSelected()).toBeUndefined();\n\n      hot.selectCell(0, 0);\n\n      expect(hot.getSelected()).toEqual([0, 0, 0, 0]);\n\n      deselectCell();\n\n      hot.selectCell(0, 0, 1, 1);\n\n      expect(hot.getSelected()).not.toEqual([0, 0, 1, 1]);\n      expect(hot.getSelected()).toEqual([0, 0, 2, 3]);\n\n      deselectCell();\n\n      hot.selectCell(0, 1, 1, 1);\n\n      expect(hot.getSelected()).toEqual([0, 1, 2, 3]);\n    });\n\n    it('should not switch the selection start point when selecting from non-merged cells to merged cells', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          {row: 1, col: 1, rowspan: 3, colspan: 3},\n          {row: 3, col: 4, rowspan: 2, colspan: 2}\n        ]\n      });\n\n      $(hot.getCell(6, 6)).simulate('mousedown');\n\n      expect(hot.getSelectedRange().from.col).toEqual(6);\n      expect(hot.getSelectedRange().from.row).toEqual(6);\n\n      $(hot.getCell(1, 1)).simulate('mouseenter');\n\n      expect(hot.getSelectedRange().from.col).toEqual(6);\n      expect(hot.getSelectedRange().from.row).toEqual(6);\n\n      $(hot.getCell(3, 3)).simulate('mouseenter');\n\n      expect(hot.getSelectedRange().from.col).toEqual(6);\n      expect(hot.getSelectedRange().from.row).toEqual(6);\n\n      $(hot.getCell(4, 4)).simulate('mouseenter');\n\n      expect(hot.getSelectedRange().from.col).toEqual(6);\n      expect(hot.getSelectedRange().from.row).toEqual(6);\n\n    });\n\n    it('should select cells in the correct direction when changing selections around a merged range', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n        mergeCells: [\n          {row: 4, col: 4, rowspan: 2, colspan: 2}\n        ]\n      });\n\n      hot.selectCell(5, 5, 5, 2);\n      expect(hot.getSelectedRange().getDirection()).toEqual('SE-NW');\n\n      hot.selectCell(4, 4, 2, 5);\n      expect(hot.getSelectedRange().getDirection()).toEqual('SW-NE');\n\n      hot.selectCell(4, 4, 5, 7);\n      expect(hot.getSelectedRange().getDirection()).toEqual('NW-SE');\n\n      hot.selectCell(4, 5, 7, 5);\n      expect(hot.getSelectedRange().getDirection()).toEqual('NE-SW');\n    });\n\n    it('should not add an area class to the selected cell if a single merged cell is selected', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(6, 6),\n        mergeCells: [\n          {\n            row: 1,\n            col: 1,\n            colspan: 3,\n            rowspan: 2\n          }\n        ]\n      });\n\n      selectCell(1, 1);\n      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);\n\n      selectCell(1, 1, 4, 4);\n      expect(getCell(1, 1).className.indexOf('area')).not.toEqual(-1);\n\n      selectCell(1, 1);\n      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);\n\n      selectCell(0, 0);\n      expect(getCell(1, 1).className.indexOf('area')).toEqual(-1);\n    });\n  });\n\n  describe('merged cells scroll', () => {\n    it('getCell should return merged cell parent', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        mergeCells: [\n          {row: 0, col: 0, rowspan: 2, colspan: 2}\n        ],\n        height: 100,\n        width: 400\n      });\n\n      var mergedCellParent = hot.getCell(0, 0);\n      var mergedCellHidden = hot.getCell(1, 1);\n\n      expect(mergedCellHidden).toBe(mergedCellParent);\n    });\n\n    it('should scroll viewport to beginning of a merged cell when it\\'s clicked', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        mergeCells: [\n          {row: 5, col: 0, rowspan: 2, colspan: 2}\n        ],\n        height: 100,\n        width: 400\n      });\n\n      var mainHolder = hot.view.wt.wtTable.holder;\n\n      mainHolder.scrollTop = 130;\n      hot.render();\n\n      expect(mainHolder.scrollTop).toBe(130);\n\n      var TD = hot.getCell(5, 0);\n      mouseDown(TD);\n      mouseUp(TD);\n      var mergedCellScrollTop = mainHolder.scrollTop;\n      expect(mergedCellScrollTop).toBeLessThan(130);\n      expect(mergedCellScrollTop).toBeGreaterThan(0);\n\n      mainHolder.scrollTop = 0;\n      hot.render();\n\n      mainHolder.scrollTop = 130;\n      hot.render();\n\n      TD = hot.getCell(5, 2);\n      mouseDown(TD);\n      mouseUp(TD);\n      var regularCellScrollTop = mainHolder.scrollTop;\n      expect(mergedCellScrollTop).toBe(regularCellScrollTop);\n    });\n\n    it('should render whole merged cell even when most rows are not in the viewport - scrolled to top', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(40, 5),\n        mergeCells: [\n          {row: 1, col: 0, rowspan: 21, colspan: 2},\n          {row: 21, col: 2, rowspan: 18, colspan: 2}\n        ],\n        height: 100,\n        width: 400\n      });\n\n      expect(hot.countRenderedRows()).toBe(39);\n    });\n\n    it('should render whole merged cell even when most rows are not in the viewport - scrolled to bottom', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(40, 5),\n        mergeCells: [\n          {row: 1, col: 0, rowspan: 21, colspan: 2},\n          {row: 21, col: 2, rowspan: 18, colspan: 2}\n        ],\n        height: 100,\n        width: 400\n      });\n\n      var mainHolder = hot.view.wt.wtTable.holder;\n\n      $(mainHolder).scrollTop(99999);\n      hot.render();\n\n      expect(hot.countRenderedRows()).toBe(39);\n    });\n\n    it('should render whole merged cell even when most columns are not in the viewport - scrolled to the left', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(5, 40),\n        mergeCells: [\n          {row: 0, col: 1, rowspan: 2, colspan: 21},\n          {row: 2, col: 21, rowspan: 2, colspan: 18}\n        ],\n        height: 100,\n        width: 400\n      });\n\n      expect(hot.countRenderedCols()).toBe(39);\n    });\n\n    it('should render whole merged cell even when most columns are not in the viewport - scrolled to the right', function() {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(5, 40),\n        mergeCells: [\n          {row: 0, col: 1, rowspan: 2, colspan: 21},\n          {row: 2, col: 21, rowspan: 2, colspan: 18}\n        ],\n        height: 100,\n        width: 400\n      });\n\n      this.$container.scrollLeft(99999);\n      hot.render();\n\n      expect(hot.countRenderedCols()).toBe(39);\n    });\n\n  });\n\n  describe('merge cells shift', () => {\n    it('should shift the merged cells right, when inserting a column on the left side of them', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          {row: 1, col: 1, rowspan: 2, colspan: 2},\n          {row: 2, col: 5, rowspan: 2, colspan: 2}\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('insert_col', 3, 2);\n\n      expect(hot.mergeCells.mergedCellInfoCollection[0].col).toEqual(1);\n      expect(hot.mergeCells.mergedCellInfoCollection[1].col).toEqual(6);\n    });\n\n    it('should shift the merged cells left, when removing a column on the left side of them', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          {row: 1, col: 1, rowspan: 2, colspan: 2},\n          {row: 2, col: 5, rowspan: 2, colspan: 2}\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_col', 3, 2);\n\n      expect(hot.mergeCells.mergedCellInfoCollection[0].col).toEqual(1);\n      expect(hot.mergeCells.mergedCellInfoCollection[1].col).toEqual(4);\n\n    });\n\n    it('should shift the merged cells down, when inserting a row above them', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          {row: 1, col: 1, rowspan: 2, colspan: 2},\n          {row: 5, col: 5, rowspan: 2, colspan: 2}\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('insert_row', 3, 2);\n\n      expect(hot.mergeCells.mergedCellInfoCollection[0].row).toEqual(1);\n      expect(hot.mergeCells.mergedCellInfoCollection[1].row).toEqual(6);\n    });\n\n    it('should shift the merged cells down, when inserting a row above them', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(20, 20),\n        mergeCells: [\n          {row: 1, col: 1, rowspan: 2, colspan: 2},\n          {row: 5, col: 5, rowspan: 2, colspan: 2}\n        ],\n        height: 400,\n        width: 400\n      });\n\n      hot.alter('remove_row', 3, 2);\n\n      expect(hot.mergeCells.mergedCellInfoCollection[0].row).toEqual(1);\n      expect(hot.mergeCells.mergedCellInfoCollection[1].row).toEqual(4);\n    });\n  });\n\n  xdescribe('canMergeRange', () => {\n    it('should return false if start and end cell is the same', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)\n      });\n      var mergeCells = new Handsontable.plugins.MergeCells(hot);\n      var coordsFrom = new WalkontableCellCoords(0, 1);\n      var cellRange = new WalkontableCellRange(coordsFrom, coordsFrom, new WalkontableCellCoords(0, 1));\n      var result = mergeCells.canMergeRange(cellRange);\n\n      expect(result).toBe(false);\n    });\n\n    it('should return true for 2 consecutive cells in the same column', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)\n      });\n      var mergeCells = new Handsontable.plugins.MergeCells(hot);\n      var coordsFrom = new WalkontableCellCoords(0, 1);\n      var cellRange = new WalkontableCellRange(coordsFrom, coordsFrom, new WalkontableCellCoords(1, 1));\n      var result = mergeCells.canMergeRange(cellRange);\n\n      expect(result).toBe(true);\n    });\n\n    it('should return true for 2 consecutive cells in the same row', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)\n      });\n      var mergeCells = new Handsontable.MergeCells(hot);\n      var coordsFrom = new WalkontableCellCoords(0, 1);\n      var cellRange = new WalkontableCellRange(coordsFrom, coordsFrom, new WalkontableCellCoords(0, 2));\n      var result = mergeCells.canMergeRange(cellRange);\n\n      expect(result).toBe(true);\n    });\n\n    it('should return true for 4 neighboring cells', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5)\n      });\n      var mergeCells = new Handsontable.MergeCells(hot);\n      var coordsFrom = new WalkontableCellCoords(0, 1);\n      var cellRange = new WalkontableCellRange(coordsFrom, coordsFrom, new WalkontableCellCoords(1, 2));\n      var result = mergeCells.canMergeRange(cellRange);\n\n      expect(result).toBe(true);\n    });\n  });\n\n  xdescribe('modifyTransform', () => {\n    it('should not transform arrow right when entering a merged cell', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var coords = new WalkontableCellCoords(1, 0);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      var inDelta = new WalkontableCellCoords(0, 1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(0, 1));\n    });\n\n    it('should transform arrow right when leaving a merged cell', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var coords = new WalkontableCellCoords(1, 1);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      var inDelta = new WalkontableCellCoords(0, 1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(0, 3));\n    });\n\n    it('should transform arrow right when leaving a merged cell (return to desired row)', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n\n      var coords = new WalkontableCellCoords(2, 0);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var inDelta = new WalkontableCellCoords(0, 1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(-1, 1));\n\n      coords = new WalkontableCellCoords(1, 1);\n      currentSelection = new WalkontableCellRange(coords, coords, coords);\n      inDelta = new WalkontableCellCoords(0, 1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(1, 3));\n    });\n\n    it('should transform arrow left when entering a merged cell', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var coords = new WalkontableCellCoords(1, 4);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      var inDelta = new WalkontableCellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(0, -3));\n    });\n\n    it('should not transform arrow left when leaving a merged cell', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var coords = new WalkontableCellCoords(1, 1);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      var inDelta = new WalkontableCellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(0, -1));\n    });\n\n    it('should transform arrow left when leaving a merged cell (return to desired row)', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n\n      var coords = new WalkontableCellCoords(2, 4);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var inDelta = new WalkontableCellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(-1, -3));\n\n      coords = new WalkontableCellCoords(1, 1);\n      currentSelection = new WalkontableCellRange(coords, coords, coords);\n      inDelta = new WalkontableCellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(1, -1));\n    });\n\n    it('should not transform arrow down when entering a merged cell', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var coords = new WalkontableCellCoords(0, 1);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      var inDelta = new WalkontableCellCoords(0, -1);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(0, -1));\n    });\n\n    it('should transform arrow down when leaving a merged cell', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var coords = new WalkontableCellCoords(1, 1);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      var inDelta = new WalkontableCellCoords(1, 0);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(3, 0));\n    });\n\n    it('should transform arrow up when entering a merged cell', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var coords = new WalkontableCellCoords(4, 1);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      var inDelta = new WalkontableCellCoords(-1, 0);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(-3, 0));\n    });\n\n    it('should not transform arrow up when leaving a merged cell', () => {\n      var mergeCellsSettings = [\n        {row: 1, col: 1, rowspan: 3, colspan: 3}\n      ];\n      var coords = new WalkontableCellCoords(1, 1);\n      var currentSelection = new WalkontableCellRange(coords, coords, coords);\n      var mergeCells = new Handsontable.MergeCells(mergeCellsSettings);\n      var inDelta = new WalkontableCellCoords(-1, 0);\n      mergeCells.modifyTransform('modifyTransformStart', currentSelection, inDelta);\n\n      expect(inDelta).toEqual(new WalkontableCellCoords(-1, 0));\n    });\n  });\n\n  describe('ContextMenu', () => {\n    it('should disable `Merge cells` context menu item when context menu was triggered from corner header', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetObjectData(10, 5),\n        rowHeaders: true,\n        colHeaders: true,\n        contextMenu: true,\n        mergeCells: true,\n      });\n\n      $('.ht_clone_top_left_corner .htCore').find('thead').find('th').eq(0).simulate('mousedown', {which: 3});\n      contextMenu();\n\n      expect($('.htContextMenu tbody td.htDisabled').text()).toBe([\n        'Insert column on the left',\n        'Insert column on the right',\n        'Remove row',\n        'Remove column',\n        'Undo',\n        'Redo',\n        'Read only',\n        'Alignment',\n        'Merge cells',\n      ].join(''));\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/mergeCells/test/canMergeRange.e2e.js","describe('HandsontableObserveChanges', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function createHOT(data, observeChanges) {\n    return handsontable({\n      data,\n      width: 200,\n      height: 200,\n      observeChanges\n    });\n  }\n\n  describe('refreshing table after changes have been detected', () => {\n    describe('array data', () => {\n      it('should render newly added row', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        data.push(['A3', 'B3']);\n\n        var htCore = getHtCore();\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(3);\n          expect(htCore.find('col').length).toEqual(2);\n          done();\n        }, 200);\n      });\n\n      it('should render newly added column', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data[0].push('C1');\n        data[1].push('C2');\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(2);\n          expect(htCore.find('col').length).toEqual(3);\n          done();\n        }, 200);\n      });\n\n      it('should render removed row', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data.splice(0, 1); // removes one row at index 0\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(1);\n          expect(htCore.find('col').length).toEqual(2);\n          done();\n        }, 200);\n      });\n\n      it('should render removed column', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data[0].splice(0, 1); // removes one column at index 0 in first row\n        data[1].splice(0, 1); // removes one column at index 0 in second row\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(2);\n          expect(htCore.find('col').length).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should render cell change from string to string', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data[0][0] = 'new string';\n\n        setTimeout(() => {\n          expect(htCore.find('td:eq(0)').html()).toEqual('new string');\n          done();\n        }, 200);\n      });\n\n      it('should render cell change in a new row', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data.push(['A3', 'B3']);\n\n        setTimeout(() => {\n          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n          data[2][0] = 'new string';\n        }, 200);\n\n        setTimeout(() => {\n          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('new string');\n          done();\n        }, 1200);\n      });\n\n      it('should not render cell change when turned off (`observeChanges: false`)', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        createHOT(data, false);\n        var htCore = getHtCore();\n\n        data[0][0] = 'new string';\n\n        setTimeout(() => {\n          expect(htCore.find('td:eq(0)').html()).toEqual('A1');\n          done();\n        }, 100);\n      });\n    });\n    describe('object data', () => {\n      it('should render newly added row', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data.push({prop0: 'A3', prop1: 'B3'});\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(3);\n          expect(htCore.find('col').length).toEqual(2);\n          done();\n        }, 200);\n      });\n\n      it('should render removed row', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data.splice(0, 1); // removes one row at index 0\n\n        setTimeout(() => {\n          expect(htCore.find('tr').length).toEqual(1);\n          expect(htCore.find('col').length).toEqual(2);\n          done();\n        }, 200);\n      });\n\n      it('should render cell change from string to string', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data[0].prop0 = 'new string';\n\n        setTimeout(() => {\n          expect(htCore.find('td:eq(0)').html()).toEqual('new string');\n          done();\n        }, 200);\n      });\n\n      it('should render cell change in a new row', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        data.push({prop0: 'A3', prop1: 'B3'});\n\n        setTimeout(() => {\n          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n          data[2].prop0 = 'new string';\n        }, 200);\n\n        setTimeout(() => {\n          expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('new string');\n          done();\n        }, 1200);\n      });\n\n      it('should not break with undefined data properties', () => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        data[0].prop0 = undefined;\n\n        expect(() => {\n          var hot = createHOT(data, true);\n          var htCore = getHtCore();\n        }).not.toThrow();\n      });\n\n      it('should not render cell change when turned off (`observeChanges: false`)', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        createHOT(data, false);\n        var htCore = getHtCore();\n\n        data[0].prop0 = 'new string';\n\n        setTimeout(() => {\n          expect(htCore.find('td:eq(0)').html()).toEqual('A1');\n          done();\n        }, 200);\n      });\n    });\n  });\n\n  describe('enabling/disabling plugin', () => {\n    it('should be possible to enable plugin using updateSettings', (done) => {\n      var data = Handsontable.helper.createSpreadsheetData(2, 2);\n      var hot = createHOT(data, false);\n      var htCore = getHtCore();\n\n      data[0][0] = 'new string';\n\n      setTimeout(() => {\n        expect(htCore.find('td:eq(0)').html()).toEqual('A1');\n\n        updateSettings({\n          observeChanges: true\n        });\n        data[1][0] = 'another new string';\n      }, 200);\n\n      setTimeout(() => {\n        expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('another new string');\n        done();\n      }, 400);\n    });\n\n    it('should be possible to disable plugin using updateSettings', (done) => {\n      var data = Handsontable.helper.createSpreadsheetData(2, 2);\n      var hot = createHOT(data, true);\n      var htCore = getHtCore();\n\n      data[0][0] = 'new string';\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        updateSettings({\n          observeChanges: false\n        });\n\n        data[1][0] = 'another new string';\n      }, 200);\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        hot.render();\n\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');\n        done();\n      }, 300);\n    });\n\n    it('should be possible to pause observing changes without disabling the plugin', (done) => {\n      var data = Handsontable.helper.createSpreadsheetData(2, 2);\n      var hot = createHOT(data, true);\n      var htCore = getHtCore();\n\n      data[0][0] = 'new string';\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        hot.pauseObservingChanges();\n\n        data[1][0] = 'another new string';\n      }, 200);\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        hot.render();\n\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');\n        done();\n      }, 300);\n    });\n\n    it('should be possible to resume observing changes after it was paused', (done) => {\n      var data = Handsontable.helper.createSpreadsheetData(2, 2);\n      var hot = createHOT(data, true);\n      var htCore = getHtCore();\n\n      hot.pauseObservingChanges();\n\n      data[0][0] = 'new string';\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('A1');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n        hot.resumeObservingChanges();\n        data[1][0] = 'another new string';\n      }, 100);\n\n      setTimeout(() => {\n        expect(htCore.find('tbody tr:eq(0) td:eq(0)').html()).toEqual('new string');\n        expect(htCore.find('tbody tr:eq(1) td:eq(0)').html()).toEqual('another new string');\n        done();\n      }, 1200);\n    });\n  });\n\n  describe('observeChanges fires appropriate events when changes are detected', () => {\n    describe('array data', () => {\n      it('should fire afterChangesObserved event after changes has been noticed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        data[0][0] = 'new string';\n\n        setTimeout(() => {\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterCreateRow event after detecting that new row has been added', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n        hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n        data.push(['A2', 'B2']);\n\n        setTimeout(() => {\n          expect(afterCreateRowCallback.calls.count()).toEqual(1);\n          expect(afterCreateRowCallback).toHaveBeenCalledWith(2, 1, 'ObserveChanges.change', undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveRow event after detecting that row has been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n        hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n        data.pop();\n\n        setTimeout(() => {\n          expect(afterRemoveRowCallback.calls.count()).toEqual(1);\n          expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 1, 'ObserveChanges.change', undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveRow event after detecting that multiple rows have been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n        hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n        data.splice(0, 2);\n\n        setTimeout(() => {\n          expect(afterRemoveRowCallback.calls.count()).toEqual(2);\n\n          // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim\n          var args = [];\n          args.push(afterRemoveRowCallback.calls.argsFor(0));\n          args.push(afterRemoveRowCallback.calls.argsFor(1));\n          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterCreateCol event after detecting that new col has been added', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterCreateColCallback = jasmine.createSpy('afterCreateColCallback');\n        hot.addHook('afterCreateCol', afterCreateColCallback);\n\n        data[0].push('C1');\n        data[1].push('C2');\n\n        setTimeout(() => {\n          expect(afterCreateColCallback.calls.count()).toEqual(1);\n          expect(afterCreateColCallback.calls.argsFor(0)).toEqual([2, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveCol event after detecting that col has been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n        hot.addHook('afterRemoveCol', afterRemoveColCallback);\n\n        data[0].pop();\n        data[1].pop();\n\n        setTimeout(() => {\n          expect(afterRemoveColCallback.calls.count()).toEqual(1);\n          expect(afterRemoveColCallback.calls.argsFor(0)).toEqual([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveCol event after detecting that multiple cols have been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRemoveColCallback = jasmine.createSpy('afterRemoveColCallback');\n        hot.addHook('afterRemoveCol', afterRemoveColCallback);\n\n        data[0].pop();\n        data[0].pop();\n        data[1].pop();\n        data[1].pop();\n\n        setTimeout(() => {\n          expect(afterRemoveColCallback.calls.count()).toEqual(2);\n\n          // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim\n          var args = [];\n          args.push(afterRemoveColCallback.calls.argsFor(0));\n          args.push(afterRemoveColCallback.calls.argsFor(1));\n          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterChange event after detecting that table data has changed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n        hot.addHook('afterChange', afterChangeCallback);\n\n        data[0][0] = 'new string';\n\n        setTimeout(() => {\n          expect(afterChangeCallback.calls.count()).toEqual(1);\n          expect(afterChangeCallback).toHaveBeenCalledWith([0, 0, null, 'new string'], 'ObserveChanges.change', undefined, undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n    });\n    describe('object data', () => {\n      it('should fire afterChangesObserved event after changes has been noticed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        data[0].prop0 = 'new string';\n\n        setTimeout(() => {\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterCreateRow event after detecting that new row has been added', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterCreateRowCallback = jasmine.createSpy('afterCreateRowCallback');\n        hot.addHook('afterCreateRow', afterCreateRowCallback);\n\n        data.push({prop0: 'A2', prop1: 'B2'});\n\n        setTimeout(() => {\n          expect(afterCreateRowCallback.calls.count()).toEqual(1);\n          expect(afterCreateRowCallback).toHaveBeenCalledWith(2, 1, 'ObserveChanges.change', undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveRow event after detecting that row has been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n        hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n        data.pop();\n\n        setTimeout(() => {\n          expect(afterRemoveRowCallback.calls.count()).toEqual(1);\n          expect(afterRemoveRowCallback).toHaveBeenCalledWith(1, 1, 'ObserveChanges.change', undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterRemoveRow event after detecting that multiple rows have been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRemoveRowCallback = jasmine.createSpy('afterRemoveRowCallback');\n        hot.addHook('afterRemoveRow', afterRemoveRowCallback);\n\n        data.splice(0, 2);\n\n        setTimeout(() => {\n          expect(afterRemoveRowCallback.calls.count()).toEqual(2);\n\n          // The order of run hooks depends on whether objectObserve uses native Object.observe or a shim\n          var args = [];\n          args.push(afterRemoveRowCallback.calls.argsFor(0));\n          args.push(afterRemoveRowCallback.calls.argsFor(1));\n          expect(args).toContain([1, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          expect(args).toContain([0, 1, 'ObserveChanges.change', undefined, undefined, undefined]);\n          done();\n        }, 200);\n      });\n\n      it('should fire afterChange event after detecting that table data has changed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n        hot.addHook('afterChange', afterChangeCallback);\n\n        data[0].prop0 = 'new string';\n\n        setTimeout(() => {\n          expect(afterChangeCallback.calls.count()).toEqual(1);\n          expect(afterChangeCallback).toHaveBeenCalledWith([0, 'prop0', null, 'new string'], 'ObserveChanges.change', undefined, undefined, undefined, undefined);\n          done();\n        }, 200);\n      });\n    });\n  });\n\n  describe('using HOT data manipulation methods, when observeChanges plugin is enabled', () => {\n    describe('array data', () => {\n      it('should run render ONCE after detecting that new row has been added', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        alter('insert_row');\n\n        setTimeout(() => {\n          expect(countRows()).toEqual(3);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that row has been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        alter('remove_row');\n\n        setTimeout(() => {\n          expect(countRows()).toEqual(1);\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that new column has been added', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        alter('insert_col');\n\n        setTimeout(() => {\n          expect(countCols()).toEqual(3);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that column has been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        alter('remove_col');\n\n        setTimeout(() => {\n          expect(countCols()).toEqual(1);\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that table data has changed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetData(2, 2);\n        var hot = createHOT(data, true);\n        var htCore = getHtCore();\n\n        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        setDataAtCell(0, 0, 'new value');\n\n        setTimeout(() => {\n          expect(htCore.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('new value');\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n    });\n    describe('object data', () => {\n      it('should run render ONCE after detecting that new row has been added', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        alter('insert_row');\n\n        setTimeout(() => {\n          expect(countRows()).toEqual(3);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that row has been removed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        alter('remove_row');\n\n        setTimeout(() => {\n          expect(countRows()).toEqual(1);\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n\n      it('should run render ONCE after detecting that table data has changed', (done) => {\n        var data = Handsontable.helper.createSpreadsheetObjectData(2, 2);\n        var hot = createHOT(data, true);\n\n        var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n        hot.addHook('afterRender', afterRenderSpy);\n\n        var afterChangesObservedCallback = jasmine.createSpy('afterChangesObservedCallback');\n        hot.addHook('afterChangesObserved', afterChangesObservedCallback);\n\n        setDataAtRowProp(0, 'prop0', 'new value');\n\n        setTimeout(() => {\n          expect(spec().$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('new value');\n          expect(afterChangesObservedCallback.calls.count()).toEqual(1);\n          expect(afterRenderSpy.calls.count()).toEqual(1);\n          done();\n        }, 200);\n      });\n    });\n  });\n\n  describe('refreshing table after changes have been detected', () => {\n    it('should observe changes to new data bound using loadData', (done) => {\n      var data = Handsontable.helper.createSpreadsheetData(2, 2);\n      var newData = Handsontable.helper.createSpreadsheetData(2, 2);\n      var hot = createHOT(data, true);\n      var htCore = getHtCore();\n      hot.loadData(newData);\n\n      var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n      hot.addHook('afterRender', afterRenderSpy);\n\n      newData.push(['A3', 'B3']);\n\n      setTimeout(() => {\n        expect(afterRenderSpy.calls.count()).toBe(1);\n        expect(htCore.find('tr').length).toEqual(3);\n        expect(htCore.find('col').length).toEqual(2);\n        done();\n      }, 200);\n    });\n\n    it('should not observe changes to old data after it was replaced using loadData', (done) => {\n      var data = Handsontable.helper.createSpreadsheetData(2, 2);\n      var newData = Handsontable.helper.createSpreadsheetData(2, 2);\n      var hot = createHOT(data, true);\n      var htCore = getHtCore();\n      hot.loadData(newData);\n\n      var afterRenderSpy = jasmine.createSpy('afterRenderSpy');\n      hot.addHook('afterRender', afterRenderSpy);\n\n      data.push(['A3', 'B3']);\n\n      setTimeout(() => {\n        expect(afterRenderSpy.calls.count()).toBe(0);\n        expect(htCore.find('tr').length).toEqual(2);\n        expect(htCore.find('col').length).toEqual(2);\n        done();\n      }, 1000);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/observeChanges/test/observeChanges.e2e.js","describe('persistentState', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n\n    window.localStorage.clear();\n  });\n\n  it('should save data, when persistentStateSave is run', () => {\n    var hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    var rawStoredData = window.localStorage[`${id}_testData`];\n\n    expect(rawStoredData).toBeDefined();\n\n    var storedData = JSON.parse(rawStoredData);\n\n    expect(storedData).toEqual(100);\n  });\n\n  it('should NOT save data, when persistentStateSave is run, if plugin is not enabled', () => {\n    var hot = handsontable({\n      persistentState: false\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    var rawStoredData = window.localStorage[`${id}_testData`];\n\n    expect(rawStoredData).toBeUndefined();\n\n  });\n\n  it('should load data, when persistentStateLoad is run', () => {\n    var hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    var storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toEqual(100);\n\n  });\n\n  it('should NOT load data, when persistentStateLoad is run, if plugin is not enabled', () => {\n    var hot = handsontable({\n      persistentState: false\n    });\n\n    // We have to manually save data, as persistentStateSave won't work when the plugin is disabled\n    window.localStorage[`${id}_testData`] = JSON.stringify(100);\n\n    var storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toBeUndefined();\n\n  });\n\n  it('should clear the data under the given key, when persistentStateReset is run', () => {\n    var hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    var storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toEqual(100);\n\n    hot.runHooks('persistentStateReset', 'testData');\n\n    storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toBeUndefined();\n  });\n\n  it('should NOT clear the data under the given key, when persistentStateReset is run', () => {\n    var hot = handsontable({\n      persistentState: false\n    });\n\n    // We have to manually save data, as persistentStateSave won't work when the plugin is disabled\n    window.localStorage[`${id}_testData`] = JSON.stringify(100);\n\n    var storedData = {};\n    hot.runHooks('persistentStateReset', 'testData');\n\n    expect(JSON.parse(window.localStorage[`${id}_testData`])).toEqual(100);\n\n  });\n\n  it('should clear all data, when persistentStateReset is run without specifying a key to reset', () => {\n    var hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData0', 100);\n    hot.runHooks('persistentStateSave', 'testData1', 'foo');\n    hot.runHooks('persistentStateSave', 'testData2', 200);\n\n    var storedData = [\n      {},\n      {},\n      {}\n    ];\n    hot.runHooks('persistentStateLoad', 'testData0', storedData[0]);\n    hot.runHooks('persistentStateLoad', 'testData1', storedData[1]);\n    hot.runHooks('persistentStateLoad', 'testData2', storedData[2]);\n\n    expect(storedData[0].value).toEqual(100);\n    expect(storedData[1].value).toEqual('foo');\n    expect(storedData[2].value).toEqual(200);\n\n    hot.runHooks('persistentStateReset');\n\n    storedData = [\n      {},\n      {},\n      {}\n    ];\n    hot.runHooks('persistentStateLoad', 'testData0', storedData[0]);\n    hot.runHooks('persistentStateLoad', 'testData1', storedData[1]);\n    hot.runHooks('persistentStateLoad', 'testData2', storedData[2]);\n\n    expect(storedData[0].value).toBeUndefined();\n    expect(storedData[1].value).toBeUndefined();\n    expect(storedData[2].value).toBeUndefined();\n  });\n\n  it('should allow to DISABLE plugin with updateSettings', () => {\n    var hot = handsontable({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    var storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toEqual(100);\n\n    updateSettings({\n      persistentState: false\n    });\n\n    storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toBeUndefined();\n\n  });\n\n  it('should allow to ENABLE plugin with updateSettings', () => {\n    var hot = handsontable({\n      persistentState: false\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    var storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toBeUndefined();\n\n    updateSettings({\n      persistentState: true\n    });\n\n    hot.runHooks('persistentStateSave', 'testData', 100);\n\n    storedData = {};\n    hot.runHooks('persistentStateLoad', 'testData', storedData);\n\n    expect(storedData.value).toEqual(100);\n\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/persistentState/test/persistentState.e2e.js","describe('Search plugin', () => {\n\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('enabling/disabling plugin', () => {\n    it('should expose `search` object when plugin is enabled', () => {\n\n      var hot = handsontable({\n        search: true\n      });\n\n      expect(hot.search).toBeDefined();\n    });\n\n    it('should NOT expose `search` object when plugin is disabled', () => {\n      var hot = handsontable({\n        search: false\n      });\n\n      expect(hot.search).not.toBeDefined();\n    });\n\n    it('plugin should be disabled by default', () => {\n      var hot = handsontable();\n\n      expect(hot.search).not.toBeDefined();\n    });\n\n    it('should disable plugin using updateSettings', () => {\n      var hot = handsontable({\n        search: true\n      });\n\n      expect(hot.search).toBeDefined();\n\n      updateSettings({\n        search: false\n      });\n\n      expect(hot.search).not.toBeDefined();\n    });\n\n    it('should enable plugin using updateSettings', () => {\n      var hot = handsontable({\n        search: false\n      });\n\n      expect(hot.search).not.toBeDefined();\n\n      updateSettings({\n        search: true\n      });\n\n      expect(hot.search).toBeDefined();\n    });\n  });\n\n  describe('query method', () => {\n    afterEach(() => {\n      Handsontable.plugins.Search.global.setDefaultQueryMethod(Handsontable.plugins.Search.DEFAULT_QUERY_METHOD);\n    });\n\n    it('should use the default query method if no queryMethod is passed to query function', () => {\n      spyOn(Handsontable.plugins.Search, 'DEFAULT_QUERY_METHOD');\n\n      var defaultQueryMethod = Handsontable.plugins.Search.DEFAULT_QUERY_METHOD;\n\n      Handsontable.plugins.Search.global.setDefaultQueryMethod(defaultQueryMethod);\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('A');\n\n      expect(defaultQueryMethod.calls.count()).toEqual(25);\n    });\n\n    it('should use the custom default query method if no queryMethod is passed to query function', () => {\n      var customDefaultQueryMethod = jasmine.createSpy('customDefaultQueryMethod');\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      Handsontable.plugins.Search.global.setDefaultQueryMethod(customDefaultQueryMethod);\n\n      var searchResult = hot.search.query('A');\n\n      expect(customDefaultQueryMethod.calls.count()).toEqual(25);\n    });\n\n    it('should use the query method from the constructor if no queryMethod is passed to query function', () => {\n      var customQueryMethod = jasmine.createSpy('customDefaultQueryMethod');\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: {\n          queryMethod: customQueryMethod\n        }\n      });\n\n      var searchResult = hot.search.query('A');\n\n      expect(customQueryMethod.calls.count()).toEqual(25);\n    });\n\n    it('should use method passed to query function', () => {\n      var customQueryMethod = jasmine.createSpy('customQueryMethod');\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('A', null, customQueryMethod);\n\n      expect(customQueryMethod.calls.count()).toEqual(25);\n    });\n  });\n\n  describe('default query method', () => {\n\n    it('should use query method to find phrase', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('A');\n\n      expect(searchResult.length).toEqual(5);\n\n      for (var i = 0; i < searchResult.length; i++) {\n        expect(searchResult[i].row).toEqual(i);\n        expect(searchResult[i].col).toEqual(0);\n        expect(searchResult[i].data).toEqual(hot.getDataAtCell(i, 0));\n      }\n    });\n\n    it('default query method should be case insensitive', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('a');\n\n      expect(searchResult.length).toEqual(5);\n\n      searchResult = hot.search.query('A');\n\n      expect(searchResult.length).toEqual(5);\n    });\n\n    it('default query method should work with numeric values', () => {\n      var hot = handsontable({\n        data: [\n          [1, 2],\n          [22, 4]\n        ],\n        search: true\n      });\n\n      var searchResult = hot.search.query('2');\n\n      expect(searchResult.length).toEqual(2);\n    });\n\n    it('default query method should interpret query as string, not regex', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('A*');\n\n      expect(searchResult.length).toEqual(0);\n    });\n\n    it('default query method should always return false if query string is empty', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('A');\n\n      expect(searchResult.length).toEqual(5);\n\n      searchResult = hot.search.query('');\n\n      expect(searchResult.length).toEqual(0);\n    });\n\n    it('default query method should always return false if no query string has been specified', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('A');\n\n      expect(searchResult.length).toEqual(5);\n\n      searchResult = hot.search.query();\n\n      expect(searchResult.length).toEqual(0);\n    });\n\n    it('default query method should always return false if no query string is not a string', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('A');\n\n      expect(searchResult.length).toEqual(5);\n\n      searchResult = hot.search.query([1, 2, 3]);\n\n      expect(searchResult.length).toEqual(0);\n    });\n  });\n\n  describe('search callback', () => {\n    afterEach(() => {\n      Handsontable.plugins.Search.global.setDefaultCallback(Handsontable.plugins.Search.DEFAULT_CALLBACK);\n    });\n\n    it('should invoke default callback for each cell', () => {\n      spyOn(Handsontable.plugins.Search, 'DEFAULT_CALLBACK');\n\n      var defaultCallback = Handsontable.plugins.Search.DEFAULT_CALLBACK;\n\n      Handsontable.plugins.Search.global.setDefaultCallback(defaultCallback);\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('A');\n\n      expect(defaultCallback.calls.count()).toEqual(25);\n    });\n\n    it('should change the default callback', () => {\n      spyOn(Handsontable.plugins.Search, 'DEFAULT_CALLBACK');\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var defaultCallback = jasmine.createSpy('defaultCallback');\n      Handsontable.plugins.Search.global.setDefaultCallback(defaultCallback);\n\n      var searchResult = hot.search.query('A');\n\n      expect(Handsontable.plugins.Search.DEFAULT_CALLBACK).not.toHaveBeenCalled();\n      expect(defaultCallback.calls.count()).toEqual(25);\n    });\n\n    it('should invoke callback passed in constructor', () => {\n      var searchCallback = jasmine.createSpy('searchCallback');\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: {\n          callback: searchCallback\n        }\n      });\n\n      var searchResult = hot.search.query('A');\n\n      expect(searchCallback.calls.count()).toEqual(25);\n    });\n\n    it('should invoke custom callback for each cell which has been tested', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchCallback = jasmine.createSpy('searchCallback');\n\n      var searchResult = hot.search.query('A', searchCallback);\n\n      expect(searchCallback.calls.count()).toEqual(25);\n\n      for (var rowIndex = 0, rowCount = countRows(); rowIndex < rowCount; rowIndex++) {\n        for (var colIndex = 0, colCount = countCols(); colIndex < colCount; colIndex++) {\n          var callArgs = searchCallback.calls.argsFor((rowIndex * 5) + colIndex);\n          expect(callArgs[0]).toEqual(hot);\n          expect(callArgs[1]).toEqual(rowIndex);\n          expect(callArgs[2]).toEqual(colIndex);\n          expect(callArgs[3]).toEqual(hot.getDataAtCell(rowIndex, colIndex));\n\n          if (colIndex == 0) {\n            expect(callArgs[4]).toBe(true);\n          } else {\n            expect(callArgs[4]).toBe(false);\n          }\n        }\n      }\n    });\n  });\n\n  describe('default search callback', () => {\n    it('should add isSearchResult = true, to cell properties of all matched cells', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('2');\n\n      for (var rowIndex = 0, rowCount = countRows(); rowIndex < rowCount; rowIndex++) {\n        for (var colIndex = 0, colCount = countCols(); colIndex < colCount; colIndex++) {\n          var cellProperties = getCellMeta(rowIndex, colIndex);\n\n          if (rowIndex == 1) {\n            expect(cellProperties.isSearchResult).toBeTruthy();\n          } else {\n            expect(cellProperties.isSearchResult).toBeFalsy();\n          }\n        }\n      }\n    });\n  });\n\n  describe('search result decorator', () => {\n    it('should add default search result class to cells which mach the query', () => {\n\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: true\n      });\n\n      var searchResult = hot.search.query('2');\n\n      render();\n\n      for (var rowIndex = 0, rowCount = countRows(); rowIndex < rowCount; rowIndex++) {\n        for (var colIndex = 0, colCount = countCols(); colIndex < colCount; colIndex++) {\n          var cell = getCell(rowIndex, colIndex);\n\n          if (rowIndex == 1) {\n            expect($(cell).hasClass(Handsontable.plugins.Search.DEFAULT_SEARCH_RESULT_CLASS)).toBe(true);\n          } else {\n            expect($(cell).hasClass(Handsontable.plugins.Search.DEFAULT_SEARCH_RESULT_CLASS)).toBe(false);\n          }\n        }\n      }\n    });\n\n    it('should add custom search result class to cells which mach the query', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 5),\n        search: {\n          searchResultClass: 'customSearchResultClass'\n        }\n      });\n\n      var searchResult = hot.search.query('2');\n\n      render();\n\n      for (var rowIndex = 0, rowCount = countRows(); rowIndex < rowCount; rowIndex++) {\n        for (var colIndex = 0, colCount = countCols(); colIndex < colCount; colIndex++) {\n          var cell = getCell(rowIndex, colIndex);\n\n          if (rowIndex == 1) {\n            expect($(cell).hasClass('customSearchResultClass')).toBe(true);\n          } else {\n            expect($(cell).hasClass('customSearchResultClass')).toBe(false);\n          }\n        }\n      }\n    });\n  });\n\n  describe('HOT properties compatibility', () => {\n    it('should work properly when the last row is empty', () => { // connected with https://github.com/handsontable/handsontable/issues/1606\n      var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(5, 5),\n          colHeaders: true,\n          search: true,\n          minSpareRows: 1\n        }),\n        errorThrown = false;\n\n      try {\n        hot.search.query('A');\n      } catch (err) {\n        errorThrown = true;\n      }\n\n      expect(errorThrown).toBe(false);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/search/test/search.e2e.js","describe('UndoRedo', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('core features', () => {\n    describe('Array data', () => {\n      describe('undo', () => {\n        it('should undo single change', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n          var HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n          expect(getDataAtCell(0, 0)).toBe('X1');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('A1');\n        });\n\n        it('should undo single change on cell with validator', (done) => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n          });\n          var HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n            done();\n          }, 400);\n        });\n\n        it('should undo creation of a single row', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo creation of multiple rows', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row', 0, 5);\n\n          expect(countRows()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo creation of multiple rows with minSpareRows', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 1),\n            minSpareRows: 2\n          });\n\n          expect(getData()).toEqual([['A1'], ['A2'], [null], [null]]);\n\n          setDataAtCell(2, 0, 'A3');\n          setDataAtCell(4, 0, 'A4');\n\n          expect(getData()).toEqual([['A1'], ['A2'], ['A3'], [null], ['A4'], [null], [null]]);\n\n          HOT.undo();\n          HOT.undo();\n\n          expect(getData()).toEqual([['A1'], ['A2'], [null], [null]]);\n        });\n\n        it('should undo removal of single row', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(3, 2)\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          alter('remove_row', 1);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A3');\n          expect(getDataAtCell(1, 1)).toEqual('B3');\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n        });\n\n        it('should undo removal of multiple rows', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(4, 2)\n          });\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          alter('remove_row', 1, 2);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A4');\n          expect(getDataAtCell(1, 1)).toEqual('B4');\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n        });\n\n        it('should undo creation of a single column (colHeaders: undefined)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3)\n          });\n\n          expect(countCols()).toEqual(3);\n\n          alter('insert_col');\n\n          expect(countCols()).toEqual(4);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(3);\n        });\n\n        it('should undo creation of a single column (colHeaders: true)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3),\n            colHeaders: true\n          });\n\n          expect(countCols()).toEqual(3);\n          expect(getColHeader()).toEqual(['A', 'B', 'C']);\n\n          alter('insert_col');\n\n          expect(countCols()).toEqual(4);\n          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(3);\n          expect(getColHeader()).toEqual(['A', 'B', 'C']);\n        });\n\n        it('should undo creation of a single column (colHeaders: Array)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3),\n            colHeaders: ['Header1', 'Header2', 'Header3']\n          });\n\n          expect(countCols()).toEqual(3);\n          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3']);\n\n          alter('insert_col', 1);\n\n          expect(countCols()).toEqual(4);\n          expect(getColHeader()).toEqual(['Header1', 'B', 'Header2', 'Header3']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(3);\n          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3']);\n        });\n\n        it('should undo creation of multiple columns (colHeaders: undefined)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countCols()).toEqual(2);\n\n          alter('insert_col', 1, 5);\n\n          expect(countCols()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n        });\n\n        it('should undo creation of multiple columns (colHeaders: true)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n            colHeaders: true\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getColHeader()).toEqual(['A', 'B']);\n\n          alter('insert_col', 1, 5);\n\n          expect(countCols()).toEqual(7);\n          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D', 'E', 'F', 'G']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getColHeader()).toEqual(['A', 'B']);\n        });\n\n        it('should undo creation of multiple columns (colHeaders: Array)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n            colHeaders: ['Header1', 'Header2']\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getColHeader()).toEqual(['Header1', 'Header2']);\n\n          alter('insert_col', 1, 5);\n\n          expect(countCols()).toEqual(7);\n          expect(getColHeader()).toEqual(['Header1', 'B', 'C', 'D', 'E', 'F', 'Header2']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getColHeader()).toEqual(['Header1', 'Header2']);\n        });\n\n        it('should undo creation of multiple columns with minSpareCols', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(1, 1),\n            minSpareCols: 2\n          });\n\n          expect(getData()).toEqual([['A1', null, null]]);\n\n          setDataAtCell(0, 1, 'B1');\n          setDataAtCell(0, 3, 'C1');\n\n          expect(getData()).toEqual([['A1', 'B1', null, 'C1', null, null]]);\n\n          HOT.undo();\n          HOT.undo();\n\n          expect(getData()).toEqual([['A1', null, null]]);\n        });\n\n        it('should undo removal of single column (colHeaders: undefined)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 3)\n          });\n\n          expect(countCols()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n\n          alter('remove_col', 1);\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('C2');\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n        });\n\n        it('should undo removal of single column (colHeaders: true)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n            colHeaders: true\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getColHeader()).toEqual(['A', 'B']);\n\n          alter('remove_col');\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getColHeader()).toEqual(['A']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          expect(getColHeader()).toEqual(['A', 'B']);\n        });\n\n        it('should undo removal of single column (colHeaders: Array)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n            colHeaders: ['Header1', 'Header2']\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getColHeader()).toEqual(['Header1', 'Header2']);\n\n          alter('remove_col');\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getColHeader()).toEqual(['Header1']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          expect(getColHeader()).toEqual(['Header1', 'Header2']);\n        });\n\n        it('should undo removal of multiple columns (colHeaders: undefined)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 4)\n          });\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n\n          alter('remove_col', 1, 2);\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('D1');\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('D2');\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n        });\n\n        it('should undo removal of multiple columns (colHeaders: true)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 4),\n            colHeaders: true\n          });\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);\n\n          alter('remove_col', 1, 3);\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n          expect(getColHeader()).toEqual(['A']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n          expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);\n        });\n\n        it('should undo removal of multiple columns (colHeaders: Array)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 4),\n            colHeaders: ['Header1', 'Header2', 'Header3', 'Header4']\n          });\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3', 'Header4']);\n\n          alter('remove_col', 1, 2);\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('D1');\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('D2');\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n          expect(getColHeader()).toEqual(['Header1', 'Header4']);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n          expect(getColHeader()).toEqual(['Header1', 'Header2', 'Header3', 'Header4']);\n        });\n\n        it('should undo removal of multiple columns (with a used manualColumnMove)', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 7),\n            manualColumnMove: [3, 2, 0, 6, 1, 5, 4]\n          });\n\n          expect(countCols()).toEqual(7);\n          expect(getDataAtRow(0)).toEqual(['D1', 'C1', 'A1', 'G1', 'B1', 'F1', 'E1']);\n\n          alter('remove_col', 1, 3);\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtRow(0)).toEqual(['D1', 'B1', 'F1', 'E1']);\n\n          // HOT.undo();\n          //\n          // expect(countCols()).toEqual(7);\n          // expect(getDataAtRow(0)).toEqual(['D1', 'C1', 'A1', 'G1', 'B1', 'F1', 'E1']);\n        });\n\n        it('should undo multiple changes', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n          var HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n          setDataAtCell(1, 0, 'X2');\n          setDataAtCell(0, 1, 'Y1');\n          setDataAtCell(1, 1, 'Y2');\n\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('Y2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('A1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('A1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n        });\n\n        it('should undo multiple changes in cells with validators', (done) => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n          });\n          var HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n          setDataAtCell(1, 0, 'X2');\n          setDataAtCell(0, 1, 'Y1');\n          setDataAtCell(1, 1, 'Y2');\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('Y2');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.undo();\n          }, 400);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.undo();\n          }, 600);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.undo();\n          }, 800);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.undo();\n          }, 1000);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n            done();\n          }, 1200);\n        });\n\n        it('should undo multiple row creations', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n\n          expect(countRows()).toEqual(6);\n\n          HOT.undo();\n          expect(countRows()).toEqual(5);\n\n          HOT.undo();\n          expect(countRows()).toEqual(4);\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo multiple row removals', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(4, 2)\n          });\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          alter('remove_row');\n          alter('remove_row');\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          HOT.undo();\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          HOT.undo();\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n        });\n\n        it('should undo changes only for table where the change actually took place', function() {\n          this.$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n\n          var hot1 = handsontable({\n            data: [\n              [1],\n              [2],\n              [3]\n            ]\n          });\n\n          this.$container2.handsontable({\n            data: [\n              ['A'],\n              ['B'],\n              ['C']\n            ]\n          });\n\n          var hot2 = this.$container2.handsontable('getInstance');\n\n          hot1.setDataAtCell(0, 0, 4);\n          expect(hot1.getDataAtCell(0, 0)).toEqual(4);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot2.undo();\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n          expect(hot1.getDataAtCell(0, 0)).toEqual(4);\n\n          hot1.undo();\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n          expect(hot1.getDataAtCell(0, 0)).toEqual(1);\n\n          hot2.destroy();\n          this.$container2.remove();\n        });\n      });\n      describe('redo', () => {\n        it('should redo single change', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n          var HOT = getInstance();\n\n          setDataAtCell(0, 0, 'new value');\n\n          expect(getDataAtCell(0, 0)).toBe('new value');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('A1');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('new value');\n        });\n\n        it('should redo single change in cell with validator', (done) => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n          });\n          var HOT = getInstance();\n\n          setDataAtCell(0, 0, 'new value');\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('new value');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n\n            HOT.redo();\n          }, 400);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('new value');\n            done();\n          }, 600);\n        });\n\n        it('should redo creation of a single row', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(3);\n        });\n\n        it('should redo creation of multiple rows', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row', 0, 5);\n\n          expect(countRows()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(7);\n        });\n\n        it('should redo removal of single row', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(3, 2)\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          alter('remove_row', 1);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A3');\n          expect(getDataAtCell(1, 1)).toEqual('B3');\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A3');\n          expect(getDataAtCell(1, 1)).toEqual('B3');\n        });\n\n        it('should redo removal of multiple rows', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(4, 2)\n          });\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          alter('remove_row', 1, 2);\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A4');\n          expect(getDataAtCell(1, 1)).toEqual('B4');\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A4');\n          expect(getDataAtCell(1, 1)).toEqual('B4');\n        });\n\n        it('should redo creation of a single column', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countCols()).toEqual(2);\n\n          alter('insert_col');\n\n          expect(countCols()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countCols()).toEqual(3);\n        });\n\n        it('should redo creation of multiple columns', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countCols()).toEqual(2);\n\n          alter('insert_col', 1, 5);\n\n          expect(countCols()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countCols()).toEqual(7);\n        });\n\n        it('should redo removal of single column', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          alter('remove_col');\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          HOT.redo();\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n        });\n\n        it('should redo removal of multiple columns', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 4)\n          });\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n\n          alter('remove_col', 1, 3);\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n\n          HOT.undo();\n\n          expect(countCols()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(0, 2)).toEqual('C1');\n          expect(getDataAtCell(0, 3)).toEqual('D1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(1, 2)).toEqual('C2');\n          expect(getDataAtCell(1, 3)).toEqual('D2');\n\n          HOT.redo();\n\n          expect(countCols()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toBeNull();\n          expect(getDataAtCell(0, 2)).toBeNull();\n          expect(getDataAtCell(0, 3)).toBeNull();\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toBeNull();\n          expect(getDataAtCell(1, 2)).toBeNull();\n          expect(getDataAtCell(1, 3)).toBeNull();\n        });\n\n        it('should redo multiple changes', () => {\n          handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n          var HOT = getInstance();\n\n          setDataAtCell(0, 0, 'X1');\n          setDataAtCell(1, 0, 'X2');\n          setDataAtCell(0, 1, 'Y1');\n          setDataAtCell(1, 1, 'Y2');\n\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('Y2');\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(getDataAtCell(0, 0)).toBe('A1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('A2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('B1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('B2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('Y2');\n\n          HOT.redo();\n          expect(getDataAtCell(0, 0)).toBe('X1');\n          expect(getDataAtCell(1, 0)).toBe('X2');\n          expect(getDataAtCell(0, 1)).toBe('Y1');\n          expect(getDataAtCell(1, 1)).toBe('Y2');\n        });\n\n        it('should redo multiple changes in cell with validator', (done) => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2),\n          });\n\n          setDataAtCell(0, 0, 'X1');\n          setDataAtCell(1, 0, 'X2');\n          setDataAtCell(0, 1, 'Y1');\n          setDataAtCell(1, 1, 'Y2');\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('Y2');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 400);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 600);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 800);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('A1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.redo();\n          }, 1000);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('A2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.redo();\n          }, 1200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('B1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.redo();\n          }, 1400);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('B2');\n\n            HOT.redo();\n          }, 1600);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('Y2');\n\n            HOT.redo();\n          }, 1800);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('X1');\n            expect(getDataAtCell(1, 0)).toBe('X2');\n            expect(getDataAtCell(0, 1)).toBe('Y1');\n            expect(getDataAtCell(1, 1)).toBe('Y2');\n            done();\n          }, 2000);\n        });\n\n        it('should redo multiple row creations', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(2, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n\n          expect(countRows()).toEqual(6);\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n          expect(countRows()).toEqual(3);\n\n          HOT.redo();\n          expect(countRows()).toEqual(4);\n\n          HOT.redo();\n          expect(countRows()).toEqual(5);\n\n          HOT.redo();\n          expect(countRows()).toEqual(6);\n\n          HOT.redo();\n          expect(countRows()).toEqual(6);\n        });\n\n        it('should undo multiple row removals', () => {\n          var HOT = handsontable({\n            data: Handsontable.helper.createSpreadsheetData(4, 2)\n          });\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          alter('remove_row');\n          alter('remove_row');\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(countRows()).toEqual(4);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n          expect(getDataAtCell(3, 0)).toEqual('A4');\n          expect(getDataAtCell(3, 1)).toEqual('B4');\n\n          HOT.redo();\n          expect(countRows()).toEqual(3);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n          expect(getDataAtCell(2, 0)).toEqual('A3');\n          expect(getDataAtCell(2, 1)).toEqual('B3');\n\n          HOT.redo();\n          expect(countRows()).toEqual(2);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n          expect(getDataAtCell(1, 0)).toEqual('A2');\n          expect(getDataAtCell(1, 1)).toEqual('B2');\n\n          HOT.redo();\n          expect(countRows()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n\n          HOT.redo();\n          expect(countRows()).toEqual(1);\n          expect(getDataAtCell(0, 0)).toEqual('A1');\n          expect(getDataAtCell(0, 1)).toEqual('B1');\n        });\n\n        it('should redo changes only for table where the change actually took place', function() {\n          this.$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n\n          var hot1 = handsontable({\n            data: [\n              [1],\n              [2],\n              [3]\n            ]\n          });\n\n          this.$container2.handsontable({\n            data: [\n              ['A'],\n              ['B'],\n              ['C']\n            ]\n          });\n\n          var hot2 = this.$container2.handsontable('getInstance');\n\n          hot1.setDataAtCell(0, 0, 4);\n          expect(hot1.getDataAtCell(0, 0)).toEqual(4);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot1.undo();\n          expect(hot1.getDataAtCell(0, 0)).toEqual(1);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot2.redo();\n          expect(hot1.getDataAtCell(0, 0)).toEqual(1);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot1.redo();\n          expect(hot1.getDataAtCell(0, 0)).toEqual(4);\n          expect(hot2.getDataAtCell(0, 0)).toEqual('A');\n\n          hot2.destroy();\n          this.$container2.remove();\n        });\n      });\n    });\n\n    describe('Object data', () => {\n\n      function createObjectData() {\n        return [\n          {name: 'Timothy', surname: 'Dalton'},\n          {name: 'Sean', surname: 'Connery'},\n          {name: 'Roger', surname: 'Moore'}\n        ];\n      }\n\n      describe('undo', () => {\n        it('should undo single change', () => {\n          handsontable({\n            data: createObjectData()\n          });\n          var HOT = getInstance();\n\n          setDataAtRowProp(0, 0, 'Pearce');\n          expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('Timothy');\n        });\n\n        it('should undo single change in cell with validator', (done) => {\n          handsontable({\n            data: createObjectData(),\n          });\n          var HOT = getInstance();\n\n          setDataAtRowProp(0, 0, 'Pearce');\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('Timothy');\n            done();\n          }, 400);\n        });\n\n        it('should undo creation of a single row', () => {\n          var HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo creation of multiple rows', () => {\n          var HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row', 0, 5);\n\n          expect(countRows()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n        });\n\n        it('should undo removal of single row', () => {\n          var HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n        });\n\n        it('should undo removal of multiple rows', () => {\n          var HOT = handsontable({\n            data: createObjectData()\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          alter('remove_row', 1, 2);\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n          expect(getDataAtRowProp(2, 'name')).toBeNull();\n          expect(getDataAtRowProp(2, 'surname')).toBeNull();\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n        });\n\n        it('should undo multiple changes', () => {\n          handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n          var HOT = getInstance();\n\n          setDataAtRowProp(0, 'name', 'Pierce');\n          setDataAtRowProp(0, 'surname', 'Brosnan');\n          setDataAtRowProp(1, 'name', 'Daniel');\n          setDataAtRowProp(1, 'surname', 'Craig');\n\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.undo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n        });\n\n        it('should undo multiple changes in cells with validators', (done) => {\n          handsontable({\n            data: createObjectData().slice(0, 2),\n          });\n          var HOT = getInstance();\n\n          setDataAtRowProp(0, 'name', 'Pierce');\n          setDataAtRowProp(0, 'surname', 'Brosnan');\n          setDataAtRowProp(1, 'name', 'Daniel');\n          setDataAtRowProp(1, 'surname', 'Craig');\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.undo();\n          }, 400);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.undo();\n          }, 600);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.undo();\n          }, 800);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.undo();\n          }, 1000);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n            done();\n          }, 1200);\n        });\n\n        it('should undo multiple row creations', () => {\n          var HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n\n          expect(countRows()).toEqual(6);\n\n          HOT.undo();\n          expect(countRows()).toEqual(5);\n\n          HOT.undo();\n          expect(countRows()).toEqual(4);\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n\n        });\n\n        it('should undo multiple row removals', () => {\n          var HOT = handsontable({\n            data: createObjectData()\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          alter('remove_row');\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n\n          HOT.undo();\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          HOT.undo();\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n        });\n      });\n\n      describe('redo', () => {\n        it('should redo single change', () => {\n          handsontable({\n            data: createObjectData()\n          });\n          var HOT = getInstance();\n\n          setDataAtRowProp(0, 0, 'Pearce');\n          expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n\n          HOT.undo();\n          expect(getDataAtCell(0, 0)).toBe('Timothy');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n        });\n\n        it('should redo single change in cell with validator', (done) => {\n          handsontable({\n            data: createObjectData(),\n          });\n          var HOT = getInstance();\n\n          setDataAtRowProp(0, 0, 'Pearce');\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            expect(getDataAtCell(0, 0)).toBe('Timothy');\n\n            HOT.redo();\n          }, 400);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 0)).toBe('Pearce');\n            done();\n          }, 600);\n        });\n\n        it('should redo creation of a single row', () => {\n          var HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n\n          expect(countRows()).toEqual(3);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(3);\n        });\n\n        it('should redo creation of multiple rows', () => {\n          var HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row', 0, 5);\n\n          expect(countRows()).toEqual(7);\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(7);\n        });\n\n        it('should redo removal of single row', () => {\n          var HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n        });\n\n        it('should redo removal of multiple rows', () => {\n          var HOT = handsontable({\n            data: createObjectData()\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          alter('remove_row', 1, 2);\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n          expect(getDataAtRowProp(2, 'name')).toBeNull();\n          expect(getDataAtRowProp(2, 'surname')).toBeNull();\n\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          HOT.redo();\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBeNull();\n          expect(getDataAtRowProp(1, 'surname')).toBeNull();\n          expect(getDataAtRowProp(2, 'name')).toBeNull();\n          expect(getDataAtRowProp(2, 'surname')).toBeNull();\n        });\n\n        it('should redo multiple changes', () => {\n          handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n          var HOT = getInstance();\n\n          setDataAtRowProp(0, 'name', 'Pierce');\n          setDataAtRowProp(0, 'surname', 'Brosnan');\n          setDataAtRowProp(1, 'name', 'Daniel');\n          setDataAtRowProp(1, 'surname', 'Craig');\n\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n          HOT.redo();\n          expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n          expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n          expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n          expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n        });\n\n        it('should redo multiple changes in cells with validators', (done) => {\n          handsontable({\n            data: createObjectData().slice(0, 2),\n          });\n          var HOT = getInstance();\n\n          setDataAtRowProp(0, 'name', 'Pierce');\n          setDataAtRowProp(0, 'surname', 'Brosnan');\n          setDataAtRowProp(1, 'name', 'Daniel');\n          setDataAtRowProp(1, 'surname', 'Craig');\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n            HOT.undo();\n          }, 200);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 400);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 600);\n\n          setTimeout(() => {\n            HOT.undo();\n          }, 800);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Timothy');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.redo();\n          }, 1000);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Dalton');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.redo();\n          }, 1200);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Sean');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.redo();\n          }, 1400);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Connery');\n\n            HOT.redo();\n          }, 1600);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n\n            HOT.redo();\n          }, 1800);\n\n          setTimeout(() => {\n            expect(getDataAtRowProp(0, 'name')).toBe('Pierce');\n            expect(getDataAtRowProp(0, 'surname')).toBe('Brosnan');\n            expect(getDataAtRowProp(1, 'name')).toBe('Daniel');\n            expect(getDataAtRowProp(1, 'surname')).toBe('Craig');\n            done();\n          }, 2000);\n        });\n\n        it('should redo multiple row creations', () => {\n          var HOT = handsontable({\n            data: createObjectData().slice(0, 2)\n          });\n\n          expect(countRows()).toEqual(2);\n\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n          alter('insert_row');\n\n          expect(countRows()).toEqual(6);\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(countRows()).toEqual(2);\n\n          HOT.redo();\n          expect(countRows()).toEqual(3);\n\n          HOT.redo();\n          expect(countRows()).toEqual(4);\n\n          HOT.redo();\n          expect(countRows()).toEqual(5);\n\n          HOT.redo();\n          expect(countRows()).toEqual(6);\n\n          HOT.redo();\n          expect(countRows()).toEqual(6);\n        });\n\n        it('should undo multiple row removals', () => {\n          var HOT = handsontable({\n            data: createObjectData()\n          });\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          alter('remove_row');\n          alter('remove_row');\n\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n\n          HOT.undo();\n          HOT.undo();\n          HOT.undo();\n\n          expect(countRows()).toEqual(3);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n          expect(getDataAtRowProp(2, 'name')).toEqual('Roger');\n          expect(getDataAtRowProp(2, 'surname')).toEqual('Moore');\n\n          HOT.redo();\n          expect(countRows()).toEqual(2);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n          expect(getDataAtRowProp(1, 'name')).toEqual('Sean');\n          expect(getDataAtRowProp(1, 'surname')).toEqual('Connery');\n\n          HOT.redo();\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n\n          HOT.redo();\n          expect(countRows()).toEqual(1);\n          expect(getDataAtRowProp(0, 'name')).toEqual('Timothy');\n          expect(getDataAtRowProp(0, 'surname')).toEqual('Dalton');\n        });\n      });\n    });\n  });\n\n  describe('plugin features', () => {\n    describe('cell alignment', () => {\n      it('should undo a sequence of aligning cells', () => {\n        var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(9, 9),\n          contextMenu: true,\n          colWidths: [50, 50, 50, 50, 50, 50, 50, 50, 50],\n          rowHeights: [50, 50, 50, 50, 50, 50, 50, 50, 50]\n        });\n\n        // top 3 rows center\n        selectCell(0, 0, 2, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:center');\n\n        // middle 3 rows unchanged - left\n\n        // bottom 3 rows right\n        selectCell(6, 0, 8, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:right');\n\n        // left 3 columns - middle\n        selectCell(0, 0, 8, 2);\n        hot.getPlugin('contextMenu').executeCommand('alignment:middle');\n\n        // middle 3 columns unchanged - top\n\n        // right 3 columns - bottom\n        selectCell(0, 6, 8, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:bottom');\n\n        var cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(0, 7);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(5, 1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(5, 7);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 5);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 7);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        hot.undo();\n        cellMeta = hot.getCellMeta(0, 7);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(5, 7);\n        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(7, 7);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);\n\n        hot.undo();\n\n        cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(5, 1);\n        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(7, 1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);\n\n        hot.undo();\n\n        cellMeta = hot.getCellMeta(7, 1);\n        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(7, 5);\n        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);\n\n        cellMeta = hot.getCellMeta(7, 7);\n        expect(cellMeta.className.indexOf('htRight')).toEqual(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toEqual(-1);\n\n        hot.undo();\n\n        // check if all cells are either non-adjusted or adjusted to the left (as default)\n        var finish;\n        for (var i = 0; i < 9; i++) {\n          for (var j = 0; j < 9; j++) {\n            cellMeta = hot.getCellMeta(i, j);\n            finish = cellMeta.className === void 0 || cellMeta.className.trim() === '' || cellMeta.className.trim() === 'htLeft';\n            expect(finish).toBe(true);\n          }\n        }\n\n      });\n\n      it('should redo a sequence of aligning cells', () => {\n        var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(9, 9),\n          contextMenu: true,\n          colWidths: [50, 50, 50, 50, 50, 50, 50, 50, 50],\n          rowHeights: [50, 50, 50, 50, 50, 50, 50, 50, 50]\n        });\n\n        // top 3 rows center\n        selectCell(0, 0, 2, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:center');\n\n        // middle 3 rows unchanged - left\n\n        // bottom 3 rows right\n        selectCell(6, 0, 8, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:right');\n\n        // left 3 columns - middle\n        selectCell(0, 0, 8, 2);\n        hot.getPlugin('contextMenu').executeCommand('alignment:middle');\n\n        // middle 3 columns unchanged - top\n\n        // right 3 columns - bottom\n        selectCell(0, 6, 8, 8);\n        hot.getPlugin('contextMenu').executeCommand('alignment:bottom');\n\n        var cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(0, 7);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(5, 1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(5, 7);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 5);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n\n        cellMeta = hot.getCellMeta(7, 7);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n\n        hot.undo();\n        hot.undo();\n        hot.undo();\n        hot.undo();\n\n        // check if all cells are either non-adjusted or adjusted to the left (as default)\n        var finish;\n        for (var i = 0; i < 9; i++) {\n          for (var j = 0; j < 9; j++) {\n            cellMeta = hot.getCellMeta(i, j);\n            finish = cellMeta.className === void 0 || cellMeta.className.trim() === '' || cellMeta.className.trim() === 'htLeft';\n            expect(finish).toBe(true);\n          }\n        }\n\n        hot.redo();\n        cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(1, 5);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(2, 8);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n\n        hot.redo();\n        cellMeta = hot.getCellMeta(6, 0);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(7, 5);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(8, 8);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n\n        hot.redo();\n        cellMeta = hot.getCellMeta(0, 0);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(5, 1);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(8, 2);\n        expect(cellMeta.className.indexOf('htMiddle')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n\n        hot.redo();\n        cellMeta = hot.getCellMeta(0, 6);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htCenter')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(5, 7);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n        cellMeta = hot.getCellMeta(8, 8);\n        expect(cellMeta.className.indexOf('htBottom')).toBeGreaterThan(-1);\n        expect(cellMeta.className.indexOf('htRight')).toBeGreaterThan(-1);\n      });\n    });\n\n    it('should exposed new methods when plugin is enabled', () => {\n      var hot = handsontable({\n        undo: false\n      });\n\n      expect(hot.undo).toBeUndefined();\n      expect(hot.redo).toBeUndefined();\n      expect(hot.isUndoAvailable).toBeUndefined();\n      expect(hot.isRedoAvailable).toBeUndefined();\n      expect(hot.clearUndo).toBeUndefined();\n\n      updateSettings({\n        undo: true\n      });\n\n      expect(typeof hot.undo).toEqual('function');\n      expect(typeof hot.redo).toEqual('function');\n      expect(typeof hot.isUndoAvailable).toEqual('function');\n      expect(typeof hot.isRedoAvailable).toEqual('function');\n      expect(typeof hot.clearUndo).toEqual('function');\n    });\n\n    it('should remove exposed methods when plugin is disbaled', () => {\n      var hot = handsontable({\n        undo: true\n      });\n\n      expect(typeof hot.undo).toEqual('function');\n      expect(typeof hot.redo).toEqual('function');\n      expect(typeof hot.isUndoAvailable).toEqual('function');\n      expect(typeof hot.isRedoAvailable).toEqual('function');\n      expect(typeof hot.clearUndo).toEqual('function');\n\n      updateSettings({\n        undo: false\n      });\n\n      expect(hot.undo).toBeUndefined();\n      expect(hot.redo).toBeUndefined();\n      expect(hot.isUndoAvailable).toBeUndefined();\n      expect(hot.isRedoAvailable).toBeUndefined();\n      expect(hot.clearUndo).toBeUndefined();\n    });\n\n    describe('Keyboard shortcuts', () => {\n      it('should undo single change after hitting CTRL+Z', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(2, 2)\n        });\n        var HOT = getInstance();\n\n        selectCell(0, 0);\n        setDataAtCell(0, 0, 'new value');\n\n        this.$container.simulate('keydown', {ctrlKey: true, keyCode: 'Z'.charCodeAt(0)});\n        expect(getDataAtCell(0, 0)).toBe('A1');\n      });\n\n      it('should redo single change after hitting CTRL+Y', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(2, 2)\n        });\n        var HOT = getInstance();\n\n        selectCell(0, 0);\n        setDataAtCell(0, 0, 'new value');\n\n        expect(getDataAtCell(0, 0)).toBe('new value');\n\n        HOT.undo();\n        expect(getDataAtCell(0, 0)).toBe('A1');\n\n        this.$container.simulate('keydown', {ctrlKey: true, keyCode: 'Y'.charCodeAt(0)});\n\n        expect(getDataAtCell(0, 0)).toBe('new value');\n      });\n\n      it('should redo single change after hitting CTRL+SHIFT+Z', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(2, 2)\n        });\n        var HOT = getInstance();\n\n        selectCell(0, 0);\n        setDataAtCell(0, 0, 'new value');\n\n        expect(getDataAtCell(0, 0)).toBe('new value');\n\n        HOT.undo();\n        expect(getDataAtCell(0, 0)).toBe('A1');\n\n        this.$container.simulate('keydown', {ctrlKey: true, shiftKey: true, keyCode: 'Z'.charCodeAt(0)});\n\n        expect(getDataAtCell(0, 0)).toBe('new value');\n      });\n    });\n  });\n\n  describe('Hooks', () => {\n    it('should fire a `beforeUndo` hook after the undo process begins', (done) => {\n      var beforeUndoSpy = jasmine.createSpy('beforeUndo');\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n      var hookData = null;\n\n      hot.addHook('beforeUndo', beforeUndoSpy);\n      hot.addHook('beforeUndo', (data) => {\n        hookData = data;\n      });\n\n      alter('remove_row', 1);\n\n      setTimeout(() => {\n        hot.undo();\n      }, 10);\n\n      setTimeout(() => {\n        expect(beforeUndoSpy.calls.count()).toEqual(1);\n        expect(hookData).not.toBe(null);\n        expect(hookData.actionType).toEqual('remove_row');\n        expect(hookData.data).toEqual([['A2', 'B2']]);\n        done();\n      }, 100);\n    });\n\n    it('should fire a `beforeRedo` hook before the redo process begins', (done) => {\n      var beforeRedoSpy = jasmine.createSpy('beforeRedo');\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n      var hookData = null;\n\n      hot.addHook('beforeRedo', beforeRedoSpy);\n      hot.addHook('beforeRedo', (data) => {\n        hookData = data;\n      });\n\n      alter('remove_row', 1);\n\n      setTimeout(() => {\n        hot.undo();\n        hot.redo();\n      }, 10);\n\n      setTimeout(() => {\n        expect(beforeRedoSpy.calls.count()).toEqual(1);\n        expect(hookData).not.toBe(null);\n        expect(hookData.actionType).toEqual('remove_row');\n        expect(hookData.data).toEqual([['A2', 'B2']]);\n        done();\n      }, 100);\n    });\n\n    it('should fire a `afterRedo` hook after the redo process begins', (done) => {\n      var afterRedoSpy = jasmine.createSpy('afterRedo');\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(2, 2),\n      });\n      var hookData = null;\n\n      hot.addHook('beforeRedo', afterRedoSpy);\n      hot.addHook('beforeRedo', (data) => {\n        hookData = data;\n      });\n\n      alter('remove_row', 1);\n\n      setTimeout(() => {\n        hot.undo();\n        hot.redo();\n      }, 10);\n\n      setTimeout(() => {\n        expect(afterRedoSpy.calls.count()).toEqual(1);\n        expect(hookData).not.toBe(null);\n        expect(hookData.actionType).toEqual('remove_row');\n        expect(hookData.data).toEqual([['A2', 'B2']]);\n        done();\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// src/plugins/undoRedo/test/UndoRedo.e2e.js","describe('ColHeader', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should not show col headers by default', function() {\n    var that = this;\n    handsontable();\n\n    expect(that.$container.find('thead th').length).toEqual(0);\n  });\n\n  it('should show col headers if true', function() {\n    var that = this;\n    handsontable({\n      colHeaders: true\n    });\n\n    expect(that.$container.find('thead th').length).toBeGreaterThan(0);\n  });\n\n  it('should show default columns headers labelled A-(Z * n)', function() {\n    var that = this;\n    var startCols = 5;\n\n    handsontable({\n      startCols,\n      colHeaders: true\n    });\n\n    var ths = getHtCore().find('thead th');\n    expect(ths.length).toEqual(startCols);\n    expect($.trim(ths.eq(0).text())).toEqual('A');\n    expect($.trim(ths.eq(1).text())).toEqual('B');\n    expect($.trim(ths.eq(2).text())).toEqual('C');\n    expect($.trim(ths.eq(3).text())).toEqual('D');\n    expect($.trim(ths.eq(4).text())).toEqual('E');\n  });\n\n  it('should show default columns headers labelled A-(Z * n) when columns as an array is present', function() {\n    var that = this;\n    var startCols = 5;\n\n    handsontable({\n      startCols,\n      colHeaders: true,\n      columns: [{}, {}, {}, {}, {}]\n    });\n\n    var ths = getHtCore().find('thead th');\n    expect(ths.length).toEqual(startCols);\n    expect($.trim(ths.eq(0).text())).toEqual('A');\n    expect($.trim(ths.eq(1).text())).toEqual('B');\n    expect($.trim(ths.eq(2).text())).toEqual('C');\n    expect($.trim(ths.eq(3).text())).toEqual('D');\n    expect($.trim(ths.eq(4).text())).toEqual('E');\n  });\n\n  it('should show default columns headers labelled A-(Z * n) when columns as a function is present', function() {\n    var that = this;\n    var startCols = 5;\n\n    handsontable({\n      startCols,\n      colHeaders: true,\n      columns(column) {\n        return {};\n      }\n    });\n\n    var ths = getHtCore().find('thead th');\n    expect(ths.length).toEqual(startCols);\n    expect($.trim(ths.eq(0).text())).toEqual('A');\n    expect($.trim(ths.eq(1).text())).toEqual('B');\n    expect($.trim(ths.eq(2).text())).toEqual('C');\n    expect($.trim(ths.eq(3).text())).toEqual('D');\n    expect($.trim(ths.eq(4).text())).toEqual('E');\n  });\n\n  it('should show col headers with custom label', function() {\n    var that = this;\n    var startCols = 5;\n    handsontable({\n      startCols,\n      colHeaders: ['First', 'Second', 'Third']\n    });\n\n    var ths = getHtCore().find('thead th');\n    expect(ths.length).toEqual(startCols);\n    expect($.trim(ths.eq(0).text())).toEqual('First');\n    expect($.trim(ths.eq(1).text())).toEqual('Second');\n    expect($.trim(ths.eq(2).text())).toEqual('Third');\n    expect($.trim(ths.eq(3).text())).toEqual('D');\n    expect($.trim(ths.eq(4).text())).toEqual('E');\n  });\n\n  it('should not show col headers if false', function() {\n    var that = this;\n    handsontable({\n      colHeaders: false\n    });\n\n    expect(that.$container.find('th.htColHeader').length).toEqual(0);\n  });\n\n  it('should hide columns headers after updateSettings', () => {\n    var hot = handsontable({\n      startCols: 5,\n      colHeaders: true\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(5);\n    expect(getTopClone().find('thead th').length).toEqual(5);\n\n    hot.updateSettings({\n      colHeaders: false\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(0);\n    expect(getTopClone().width()).toEqual(0);\n  });\n\n  it('should show/hide columns headers after updateSettings', () => {\n    var hot = handsontable({\n      startCols: 5,\n      colHeaders: true\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(5);\n    expect(getTopClone().find('thead th').length).toEqual(5);\n\n    hot.updateSettings({\n      colHeaders: false\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(0);\n    expect(getTopClone().width()).toEqual(0);\n\n    hot.updateSettings({\n      colHeaders: true\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(5);\n    expect(getTopClone().width()).toBeGreaterThan(0);\n\n    hot.updateSettings({\n      colHeaders: false\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(0);\n    expect(getTopClone().width()).toEqual(0);\n  });\n\n  it('should show columns headers after updateSettings', () => {\n    var hot = handsontable({\n      startCols: 5,\n      colHeaders: false\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(0);\n    expect(getTopClone().find('thead th').length).toEqual(0);\n\n    hot.updateSettings({\n      colHeaders: true\n    });\n\n    expect(getHtCore().find('thead th').length).toEqual(5);\n    expect(getTopClone().find('thead th').length).toEqual(5);\n  });\n\n  it('should show new columns headers after updateSettings', () => {\n    var hot = handsontable({\n      startCols: 3,\n      colHeaders: ['A', 'B', 'C']\n    });\n\n    var htCore = getHtCore();\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('A');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('B');\n    expect(htCore.find('thead th:eq(2)').text()).toEqual('C');\n\n    hot.updateSettings({\n      colHeaders: ['X', 'Y', 'Z']\n    });\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('X');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Y');\n    expect(htCore.find('thead th:eq(2)').text()).toEqual('Z');\n\n  });\n\n  it('should be possible to define colHeaders with a function', () => {\n    var hot = handsontable({\n      startCols: 2,\n      colHeaders(col) {\n        switch (col) {\n          case 0:\n            return 'One';\n          case 1:\n            return 'Two';\n          default:\n            break;\n        }\n      }\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should be possible to set HTML in colHeaders', () => {\n    var hot = handsontable({\n      startCols: 2,\n      colHeaders: ['One <input type=\"checkbox\">', 'Two <input type=\"checkbox\">']\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0) input[type=checkbox]').length).toEqual(1);\n    expect(htCore.find('thead th:eq(1) input[type=checkbox]').length).toEqual(1);\n  });\n\n  it('should be possible to set colHeaders when columns array is present', () => {\n    var hot = handsontable({\n      startCols: 2,\n      colHeaders: ['One', 'Two'],\n      columns: [\n        {type: 'text'},\n        {type: 'text'}\n      ]\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should be possible to set colHeaders when columns function is present', () => {\n    var hot = handsontable({\n      startCols: 2,\n      colHeaders: ['One', 'Two'],\n      columns(column) {\n        var colMeta = {type: 'text'};\n\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('One');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should be possible to set colHeaders using columns title property', () => {\n    var hot = handsontable({\n      startCols: 2,\n      colHeaders: ['One', 'Two'],\n      columns: [\n        {type: 'text', title: 'Special title'},\n        {type: 'text'}\n      ]\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('Special title');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should be possible to set colHeaders using columns title property when columns is a function', () => {\n    var hot = handsontable({\n      startCols: 2,\n      colHeaders: ['One', 'Two'],\n      columns(column) {\n        var colMeta = {type: 'text'};\n\n        if (column === 0) {\n          colMeta.title = 'Special title';\n        }\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    var htCore = getHtCore();\n\n    expect(htCore.find('thead th:eq(0)').text()).toEqual('Special title');\n    expect(htCore.find('thead th:eq(1)').text()).toEqual('Two');\n  });\n\n  it('should resize all the column headers in the overlays, according to the other overlays\\' height', () => {\n    var hot = handsontable({\n      startCols: 5,\n      colHeaders: ['a', 'a', 'a', 'a<BR>a', 'a'],\n      fixedColumnsLeft: 2\n    });\n\n    var topHeaderExample = $('.ht_clone_top').find('thead tr:first-child th:nth-child(1)'),\n      masterHeaderExample = $('.ht_master').find('thead tr:first-child th:nth-child(3)');\n\n    expect(topHeaderExample.height()).toEqual(masterHeaderExample.height());\n  });\n\n  it('should allow defining custom column header height using the columnHeaderHeight config option', function() {\n    var hot = handsontable({\n      startCols: 3,\n      colHeaders: true,\n      columnHeaderHeight: 40\n    });\n\n    hot.render();\n\n    expect(this.$container.find('th').eq(0).height()).toEqual(40);\n  });\n\n  it('should allow defining custom column header heights using the columnHeaderHeight config option, when multiple column header levels are defined', function() {\n    var hot = handsontable({\n      startCols: 3,\n      colHeaders: true,\n      columnHeaderHeight: [45, 65],\n      afterGetColumnHeaderRenderers(array) {\n        array.push((index, TH) => {\n          TH.innerHTML = '';\n\n          var div = document.createElement('div');\n          var span = document.createElement('span');\n\n          div.className = 'relative';\n          span.className = 'colHeader';\n\n          span.innerText = index;\n\n          div.appendChild(span);\n          TH.appendChild(div);\n        });\n\n        return array;\n      }\n    });\n    hot.render();\n\n    expect(this.$container.find('.handsontable.ht_clone_top tr:nth-child(1) th:nth-child(1)').height()).toEqual(45);\n    expect(this.$container.find('.handsontable.ht_clone_top tr:nth-child(2) th:nth-child(1)').height()).toEqual(65);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/ColHeader.spec.js","describe('Core_alter', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfNestedObjects = function() {\n    return [\n      {id: 1,\n        name: {\n          first: 'Ted',\n          last: 'Right'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name'},\n      {id: 2,\n        name: {\n          first: 'Frank',\n          last: 'Honest'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name'},\n      {id: 3,\n        name: {\n          first: 'Joan',\n          last: 'Well'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name'}\n    ];\n  };\n\n  var arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  describe('remove row', () => {\n    it('should remove row', () => {\n      handsontable({\n        minRows: 5,\n        data: arrayOfNestedObjects(),\n        columns: [\n          {data: 'id'},\n          {data: 'name.first'}\n        ]\n      });\n      alter('remove_row', 1);\n\n      expect(getDataAtCell(1, 1)).toEqual('Joan'); // Joan should be moved up\n      expect(getData().length).toEqual(5); // new row should be added by keepEmptyRows\n    });\n\n    it('should fire beforeRemoveRow event before removing row', () => {\n      var onBeforeRemoveRow = jasmine.createSpy('onBeforeRemoveRow');\n\n      var hot = handsontable({\n        data: arrayOfNestedObjects(),\n        columns: [\n          {data: 'id'},\n          {data: 'name.first'}\n        ],\n        beforeRemoveRow: onBeforeRemoveRow,\n      });\n      alter('remove_row', 2, 1, 'customSource');\n\n      expect(onBeforeRemoveRow).toHaveBeenCalledWith(countRows(), 1, [2], 'customSource', undefined, undefined);\n    });\n\n    it('should not remove row if removing has been canceled by beforeRemoveRow event handler', () => {\n      var onBeforeRemoveRow = jasmine.createSpy('onBeforeRemoveRow');\n\n      onBeforeRemoveRow.and.callFake(() => false);\n\n      var hot = handsontable({\n        data: arrayOfNestedObjects(),\n        columns: [\n          {data: 'id'},\n          {data: 'name.first'}\n        ],\n        beforeRemoveRow: onBeforeRemoveRow\n      });\n\n      expect(countRows()).toEqual(3);\n\n      alter('remove_row');\n\n      expect(countRows()).toEqual(3);\n    });\n\n    it('should not remove rows below minRows', () => {\n      handsontable({\n        startRows: 5,\n        minRows: 4\n      });\n      alter('remove_row', 1);\n      alter('remove_row', 1);\n      alter('remove_row', 1);\n\n      expect(countRows()).toEqual(4);\n    });\n\n    it('should not remove cols below minCols', () => {\n      handsontable({\n        startCols: 5,\n        minCols: 4\n      });\n      alter('remove_col', 1);\n      alter('remove_col', 1);\n      alter('remove_col', 1);\n\n      expect(countCols()).toEqual(4);\n    });\n\n    it('should remove one row if amount parameter is empty', function() {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row', 1);\n\n      expect(countRows()).toEqual(4);\n      expect(this.$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a1');\n      expect(this.$container.find('tr:eq(1) td:eq(1)').html()).toEqual('c2');\n    });\n\n    it('should remove as many rows as given in the amount parameter', function() {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row', 1, 3);\n\n      expect(countRows()).toEqual(2);\n      expect(this.$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a1');\n      expect(this.$container.find('tr:eq(1) td:eq(1)').html()).toEqual('e2');\n    });\n\n    it('should not remove more rows that exist', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row', 1, 10);\n\n      expect(countRows()).toEqual(1);\n      expect(getHtCore().find('tr:last td:last').html()).toEqual('a3');\n    });\n\n    it('should remove one row from end if no parameters are given', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row');\n\n      expect(countRows()).toEqual(4);\n      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('d1');\n    });\n\n    it('should remove amount of rows from end if index parameter is not given', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('remove_row', null, 3);\n\n      expect(countRows()).toEqual(2);\n      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('b1');\n    });\n\n    it('should remove rows from table with fixedRows', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3']\n        ],\n        fixedRowsTop: 1,\n        minSpareRows: 0\n      });\n\n      alter('remove_row', 1);\n\n      expect(countRows()).toEqual(1);\n\n    });\n\n    it('should remove all rows from table with fixedRows', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3']\n        ],\n        fixedRowsTop: 1,\n        minSpareRows: 0\n      });\n\n      alter('remove_row', 1);\n      alter('remove_row', 1);\n\n      expect(countRows()).toEqual(0);\n\n    });\n\n    it('should remove row\\'s cellProperties', () => {\n      handsontable({\n        startCols: 1,\n        startRows: 3\n      });\n\n      getCellMeta(0, 0).someValue = [0, 0];\n      getCellMeta(1, 0).someValue = [1, 0];\n      getCellMeta(2, 0).someValue = [2, 0];\n\n      alter('remove_row', 0);\n\n      expect(getCellMeta(0, 0).someValue).toEqual([1, 0]);\n      expect(getCellMeta(1, 0).someValue).toEqual([2, 0]);\n    });\n\n    it('should fire callback on remove row', () => {\n      var outputBefore;\n      var outputAfter;\n\n      handsontable({\n        minRows: 5,\n        data: arrayOfNestedObjects(),\n        columns: [\n          {data: 'id'},\n          {data: 'name.first'}\n        ],\n        beforeRemoveRow(index, amount, removedRows, source) {\n          outputBefore = [index, amount, removedRows, source];\n        },\n        afterRemoveRow(index, amount, removedRows, source) {\n          outputAfter = [index, amount, removedRows, source];\n        }\n      });\n      alter('remove_row', 1, 2, 'customSource');\n\n      expect(outputBefore).toEqual([1, 2, [1, 2], 'customSource']);\n      expect(outputAfter).toEqual([1, 2, [1, 2], 'customSource']);\n    });\n\n    it('should decrement the number of fixed rows, if a fix row is removed', () => {\n      var hot = handsontable({\n        startCols: 1,\n        startRows: 3,\n        fixedRowsTop: 4\n      });\n\n      alter('remove_row', 1, 1);\n      expect(hot.getSettings().fixedRowsTop).toEqual(3);\n      alter('remove_row', 1, 2);\n      expect(hot.getSettings().fixedRowsTop).toEqual(1);\n    });\n\n    it('should shift the cell meta according to the new row layout', () => {\n      var hot = handsontable({\n        startCols: 3,\n        startRows: 4\n      });\n\n      setCellMeta(2, 1, 'className', 'test');\n      alter('remove_row', 1, 1);\n\n      expect(getCellMeta(1, 1).className).toEqual('test');\n    });\n\n    it('should shift the cell meta according to the new rows (>1) layout', () => {\n      var hot = handsontable({\n        startCols: 3,\n        startRows: 4\n      });\n\n      setCellMeta(2, 1, 'className', 'test');\n      alter('remove_row', 0, 2);\n\n      expect(getCellMeta(0, 1).className).toEqual('test');\n    });\n  });\n\n  describe('remove column', () => {\n    it('should remove one column if amount parameter is empty', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col', 1);\n\n      expect(countCols()).toEqual(7);\n      expect(this.$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a');\n      expect(this.$container.find('tr:eq(1) td:eq(1)').html()).toEqual('c');\n    });\n\n    it('should remove as many columns as given in the amount parameter', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col', 1, 3);\n\n      expect(countCols()).toEqual(5);\n      expect(this.$container.find('tr:eq(0) td:eq(0)').html()).toEqual('a');\n      expect(this.$container.find('tr:eq(1) td:eq(1)').html()).toEqual('e');\n    });\n\n    it('should not remove more columns that exist', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col', 6, 3);\n\n      expect(countCols()).toEqual(6);\n      expect(this.$container.find('tr:eq(1) td:last').html()).toEqual('f');\n    });\n\n    it('should remove one column from end if no parameters are given', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col');\n\n      expect(countCols()).toEqual(7);\n      expect(this.$container.find('tr:eq(1) td:last').html()).toEqual('g');\n    });\n\n    it('should remove amount of columns from end if index parameter is not given', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('remove_col', null, 3);\n\n      expect(countCols()).toEqual(5);\n      expect(this.$container.find('tr:eq(1) td:last').html()).toEqual('e');\n    });\n\n    it('should fire beforeRemoveCol event before removing col', () => {\n      var onBeforeRemoveCol = jasmine.createSpy('onBeforeRemoveCol');\n\n      var hot = handsontable({\n        beforeRemoveCol: onBeforeRemoveCol\n      });\n      alter('remove_col');\n\n      expect(onBeforeRemoveCol).toHaveBeenCalledWith(countCols(), 1, [4], undefined, undefined, undefined);\n    });\n\n    it('should not remove column if removing has been canceled by beforeRemoveCol event handler', () => {\n      var onBeforeRemoveCol = jasmine.createSpy('onBeforeRemoveCol');\n\n      onBeforeRemoveCol.and.callFake(() => false);\n\n      var hot = handsontable({\n        beforeRemoveCol: onBeforeRemoveCol\n      });\n\n      expect(countCols()).toEqual(5);\n\n      alter('remove_col');\n\n      expect(countCols()).toEqual(5);\n    });\n\n    it('should fire callback on remove col', () => {\n      var outputBefore;\n      var outputAfter;\n\n      handsontable({\n        minRows: 5,\n        data: arrayOfArrays(),\n        beforeRemoveCol(index, amount, removedCols, source) {\n          outputBefore = [index, amount, removedCols, source];\n        },\n        afterRemoveCol(index, amount, removedCols, source) {\n          outputAfter = [index, amount, removedCols, source];\n        }\n      });\n      alter('remove_col', 1, 2, 'customSource');\n\n      expect(outputBefore).toEqual([1, 2, [1, 2], 'customSource']);\n      expect(outputAfter).toEqual([1, 2, [1, 2], 'customSource']);\n    });\n\n    it('should remove column\\'s properties', () => {\n      handsontable({\n        startCols: 3,\n        startRows: 1\n      });\n\n      getCellMeta(0, 0).someValue = [0, 0];\n      getCellMeta(0, 1).someValue = [0, 1];\n      getCellMeta(0, 2).someValue = [0, 2];\n\n      alter('remove_col', 0);\n\n      expect(getCellMeta(0, 0).someValue).toEqual([0, 1]);\n      expect(getCellMeta(0, 1).someValue).toEqual([0, 2]);\n    });\n\n    it('should remove column when not all rows are visible in the viewport', function() {\n      this.$container.css({\n        height: '100',\n        overflow: 'auto'\n      });\n\n      handsontable({\n        startCols: 3,\n        startRows: 20\n      });\n\n      expect(getHtCore().find('tbody tr').length).toBeLessThan(20);\n      expect(countCols()).toEqual(3);\n\n      alter('remove_col', 0);\n\n      expect(countCols()).toEqual(2);\n    });\n\n    it('should not remove column header together with the column, if headers were NOT specified explicitly', () => {\n\n      handsontable({\n        startCols: 3,\n        startRows: 2,\n        colHeaders: true\n      });\n\n      expect(getColHeader()).toEqual(['A', 'B', 'C']);\n\n      expect(countCols()).toEqual(3);\n\n      alter('remove_col', 1);\n\n      expect(countCols()).toEqual(2);\n\n      expect(getColHeader()).toEqual(['A', 'B']);\n\n    });\n\n    it('should remove column header together with the column, if headers were specified explicitly', () => {\n\n      handsontable({\n        startCols: 3,\n        startRows: 2,\n        colHeaders: ['Header0', 'Header1', 'Header2']\n      });\n\n      expect(getColHeader()).toEqual(['Header0', 'Header1', 'Header2']);\n\n      expect(countCols()).toEqual(3);\n\n      alter('remove_col', 1);\n\n      expect(countCols()).toEqual(2);\n\n      expect(getColHeader()).toEqual(['Header0', 'Header2']);\n\n    });\n\n    it('should decrement the number of fixed columns, if a fix column is removed', () => {\n      var hot = handsontable({\n        startCols: 1,\n        startRows: 3,\n        fixedColumnsLeft: 4\n      });\n\n      alter('remove_col', 1, 1);\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(3);\n      alter('remove_col', 1, 2);\n      expect(hot.getSettings().fixedColumnsLeft).toEqual(1);\n    });\n\n    it('should shift the cell meta according to the new column layout', () => {\n      var hot = handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(1, 2, 'className', 'test');\n      alter('remove_col', 1, 1);\n\n      expect(getCellMeta(1, 1).className).toEqual('test');\n    });\n\n    it('should shift the cell meta according to the new columns (>1) layout', () => {\n      var hot = handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(1, 2, 'className', 'test');\n      alter('remove_col', 0, 2);\n\n      expect(getCellMeta(1, 0).className).toEqual('test');\n    });\n  });\n\n  describe('insert row', () => {\n    it('should insert row at given index', function() {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('insert_row', 1);\n\n      expect(countRows()).toEqual(6);\n      expect(this.$container.find('tr:eq(2) td:eq(0)').html()).toEqual('b1');\n    });\n\n    it('should insert row at the end if index is not given', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('insert_row');\n\n      expect(countRows()).toEqual(6);\n      expect(getHtCore().find('tr:eq(4) td:eq(0)').html()).toEqual('e1');\n\n      expect(getHtCore().find('tr:last td:eq(0)').html()).toEqual('');\n    });\n\n    it('should not change cellMeta after executing `insert row` without parameters (#3581, #3989, #2114)', () => {\n      var greenRenderer = function(instance, td, row, col, prop, value, cellProperties) {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        td.style.backgroundColor = 'green';\n      };\n\n      handsontable({\n        data: [\n          [0, 'a', true],\n          [1, 'b', false],\n          [2, 'c', true],\n          [3, 'd', true]\n        ],\n        cell: [\n          {row: 0, col: 0, renderer: greenRenderer, type: 'text', readOnly: true}\n        ],\n        columns: [\n          {type: 'numeric'},\n          {type: 'text'},\n          {type: 'checkbox'}\n        ]\n      });\n\n      alter('insert_row');\n\n      expect(getCellMeta(1, 0).renderer).not.toBe(greenRenderer);\n      expect(getCellMeta(1, 0).readOnly).toBe(false);\n\n      expect(getCellMeta(4, 0).renderer).not.toBe(greenRenderer);\n      expect(getCellMeta(4, 0).readOnly).toBe(false);\n    });\n\n    it('should add new row which respect defined type of cells after executing `insert_row`', () => {\n      handsontable({\n        data: [\n          [0, 'a', true],\n          [1, 'b', false],\n          [2, 'c', true],\n          [3, 'd', true]\n        ],\n        cell: [\n          {row: 0, col: 0, type: 'text'}\n        ],\n        columns: [\n          {type: 'numeric'},\n          {type: 'text'},\n          {type: 'checkbox'}\n        ]\n      });\n\n      alter('insert_row');\n\n      // added row\n\n      expect(getCellMeta(4, 0).type).toEqual('numeric');\n      expect(getDataAtCell(4, 0)).toEqual(null);\n\n      expect(getCellMeta(4, 2).type).toEqual('checkbox');\n      expect(getDataAtCell(4, 2)).toEqual(null);\n    });\n\n    it('should insert the amount of rows at given index', function() {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('insert_row', 1, 3);\n\n      expect(countRows()).toEqual(8);\n\n      expect(this.$container.find('tr:eq(1) td:eq(0)').html()).toEqual('');\n\n      expect(this.$container.find('tr:eq(4) td:eq(0)').html()).toEqual('b1');\n    });\n\n    it('should insert the amount of rows at the end if index is not given', () => {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ]\n      });\n      alter('insert_row', null, 3);\n\n      expect(countRows()).toEqual(8);\n      expect(getHtCore().find('tr:eq(4) td:eq(0)').html()).toEqual('e1');\n\n      expect(getHtCore().find('tr:eq(5) td:eq(0)').html()).toEqual('');\n      expect(getHtCore().find('tr:eq(6) td:eq(0)').html()).toEqual('');\n      expect(getHtCore().find('tr:eq(7) td:eq(0)').html()).toEqual('');\n    });\n\n    it('should insert not more rows than maxRows', () => {\n      handsontable({\n        startRows: 5,\n        maxRows: 7\n      });\n      alter('insert_row', 1);\n      alter('insert_row', 1);\n      alter('insert_row', 1);\n\n      expect(countRows()).toEqual(7);\n    });\n\n    it('when amount parameter is used, should not insert more rows than allowed by maxRows', function() {\n      handsontable({\n        data: [\n          ['a1', 'a2', 'a3'],\n          ['b1', 'b2', 'b3'],\n          ['c1', 'c2', 'c3'],\n          ['d1', 'd2', 'd3'],\n          ['e1', 'e2', 'e3']\n        ],\n        maxRows: 10\n      });\n      alter('insert_row', 1, 10);\n\n      expect(countRows()).toEqual(10);\n      expect(this.$container.find('tr:eq(6) td:eq(0)').html()).toEqual('b1');\n    });\n\n    it('should not add more source rows than defined in maxRows when trimming rows using the modifyRow hook', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 4),\n        modifyRow(row) {\n          return [8, 9].indexOf(row) > -1 ? null : row;\n        },\n        maxRows: 10\n      });\n\n      expect(hot.countRows()).toEqual(8);\n\n      hot.populateFromArray(7, 0, [['a'], ['b'], ['c']]);\n\n      expect(hot.countSourceRows()).toEqual(10);\n      expect(hot.getDataAtCell(7, 0)).toEqual('a');\n    });\n\n    it('should fire callback on create row', () => {\n      var outputBefore;\n      var outputAfter;\n\n      handsontable({\n        minRows: 5,\n        data: arrayOfNestedObjects(),\n        columns: [\n          {data: 'id'},\n          {data: 'name.first'}\n        ],\n        beforeCreateRow(index, amount, source) {\n          outputBefore = [index, amount, source];\n        },\n        afterCreateRow(index, amount, source) {\n          outputAfter = [index, amount, source];\n        },\n      });\n      alter('insert_row', 3, 1, 'customSource');\n\n      expect(outputBefore).toEqual([3, 1, 'customSource']);\n      expect(outputAfter).toEqual([3, 1, 'customSource']);\n    });\n\n    it('should keep the single-cell selection in the same position as before inserting the row', () => {\n      handsontable({\n        minRows: 5,\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n\n      selectCell(2, 2);\n      alter('insert_row', 2);\n\n      var selected = getSelected();\n      expect(selected[0]).toEqual(3);\n      expect(selected[2]).toEqual(3);\n    });\n\n    it('should shift the cell meta according to the new row layout', () => {\n      var hot = handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(2, 1, 'className', 'test');\n      alter('insert_row', 1, 1);\n\n      expect(getCellMeta(3, 1).className).toEqual('test');\n    });\n\n    it('should shift the cell meta according to the new rows (>1) layout', () => {\n      var hot = handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(2, 1, 'className', 'test');\n      alter('insert_row', 0, 3);\n\n      expect(getCellMeta(5, 1).className).toEqual('test');\n    });\n  });\n\n  describe('insert column', () => {\n    it('should insert column at given index', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('insert_col', 1);\n\n      expect(countCols()).toEqual(9);\n      expect(this.$container.find('tr:eq(1) td:eq(2)').html()).toEqual('b');\n    });\n\n    it('should insert column at the end if index is not given', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('insert_col');\n\n      expect(countCols()).toEqual(9);\n      expect(this.$container.find('tr:eq(1) td:eq(7)').html()).toEqual('h');\n    });\n\n    it('should insert the amount of columns at given index', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('insert_col', 1, 3);\n\n      expect(countCols()).toEqual(11);\n      expect(this.$container.find('tr:eq(1) td:eq(4)').html()).toEqual('b');\n    });\n\n    it('should insert the amount of columns at the end if index is not given', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ]\n      });\n      alter('insert_col', null, 3);\n\n      expect(countCols()).toEqual(11);\n      expect(this.$container.find('tr:eq(1) td:eq(7)').html()).toEqual('h');\n\n      expect(this.$container.find('tr:eq(1) td:eq(8)').html()).toEqual('');\n      expect(this.$container.find('tr:eq(1) td:eq(9)').html()).toEqual('');\n      expect(this.$container.find('tr:eq(1) td:eq(10)').html()).toEqual('');\n    });\n\n    it('should insert not more cols than maxCols', () => {\n      handsontable({\n        startCols: 5,\n        maxCols: 7\n      });\n      alter('insert_col', 1);\n      alter('insert_col', 1);\n      alter('insert_col', 1);\n\n      expect(countCols()).toEqual(7);\n    });\n\n    it('should not insert more columns than allowed by maxCols, when amount parameter is used', function() {\n      handsontable({\n        data: [\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'],\n          ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n        ],\n        maxCols: 10\n      });\n      alter('insert_col', 1, 10);\n\n      expect(countCols()).toEqual(10);\n      expect(this.$container.find('tr:eq(1) td:eq(1)').html()).toEqual('');\n      expect(this.$container.find('tr:eq(1) td:eq(2)').html()).toEqual('');\n      expect(this.$container.find('tr:eq(1) td:eq(3)').html()).toEqual('b');\n    });\n\n    it('should fire callback on create col', () => {\n      var outputBefore;\n      var outputAfter;\n\n      handsontable({\n        minRows: 5,\n        data: arrayOfArrays(),\n        beforeCreateCol(index, amount, source) {\n          outputBefore = [index, amount, source];\n        },\n        afterCreateCol(index, amount, source) {\n          outputAfter = [index, amount, source];\n        },\n      });\n      alter('insert_col', 2, 1, 'customSource');\n\n      expect(outputBefore).toEqual([2, 1, 'customSource']);\n      expect(outputAfter).toEqual([2, 1, 'customSource']);\n    });\n\n    it('should not create column header together with the column, if headers were NOT specified explicitly', () => {\n\n      handsontable({\n        startCols: 3,\n        startRows: 2,\n        colHeaders: true\n      });\n\n      expect(getColHeader()).toEqual(['A', 'B', 'C']);\n\n      expect(countCols()).toEqual(3);\n\n      alter('insert_col', 1);\n\n      expect(countCols()).toEqual(4);\n\n      expect(getColHeader()).toEqual(['A', 'B', 'C', 'D']);\n\n    });\n\n    it('should create column header together with the column, if headers were specified explicitly', () => {\n\n      handsontable({\n        startCols: 3,\n        startRows: 2,\n        colHeaders: ['Header0', 'Header1', 'Header2']\n      });\n\n      expect(getColHeader()).toEqual(['Header0', 'Header1', 'Header2']);\n\n      expect(countCols()).toEqual(3);\n\n      alter('insert_col', 1);\n\n      expect(countCols()).toEqual(4);\n\n      expect(getColHeader()).toEqual(['Header0', 'B', 'Header1', 'Header2']);\n\n    });\n\n    it('should stretch the table after adding another column (if stretching is set to \\'all\\')', function() {\n      this.$container.css({\n        width: 500,\n      });\n\n      var hot = handsontable({\n        startCols: 5,\n        startRows: 10,\n        stretchH: 'all'\n      });\n\n      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);\n      alter('insert_col', null, 1);\n      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);\n      alter('insert_col', null, 1);\n      expect(Handsontable.dom.outerWidth(hot.view.TBODY)).toEqual(500);\n    });\n\n    it('should shift the cell meta according to the new column layout', () => {\n      var hot = handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(1, 2, 'className', 'test');\n      alter('insert_col', 1, 1);\n\n      expect(getCellMeta(1, 3).className).toEqual('test');\n    });\n\n    it('should shift the cell meta according to the new columns (>1) layout', () => {\n      var hot = handsontable({\n        startCols: 4,\n        startRows: 3\n      });\n\n      setCellMeta(1, 2, 'className', 'test');\n      alter('insert_col', 0, 3);\n\n      expect(getCellMeta(1, 5).className).toEqual('test');\n    });\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_alter.spec.js","describe('Core_beforeKeyDown', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should run beforeKeyDown hook', () => {\n    var called = false;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeKeyDown(event) {\n        called = true;\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('arrow_right');\n\n    expect(called).toEqual(true);\n  });\n\n  it('should run afterDocumentKeyDown and beforeKeyDown hook', () => {\n    var called = [];\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      afterDocumentKeyDown() {\n        called.push('afterDocumentKeyDown');\n      },\n      beforeKeyDown() {\n        called.push('beforeKeyDown');\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('arrow_right');\n\n    expect(called).toEqual(['afterDocumentKeyDown', 'beforeKeyDown']);\n  });\n\n  it('should prevent hook from running default action', () => {\n    var called = false;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeKeyDown(event) {\n\n        event = serveImmediatePropagation(event);\n\n        event.stopImmediatePropagation();\n        called = true;\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('arrow_right');\n\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n    expect(getSelected()).not.toEqual([0, 1, 0, 1]);\n  });\n\n  it('should overwrite default behavior of delete key, but not this of right arrow', () => {\n    var called = 0;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeKeyDown(event) {\n        if (event.keyCode === 8) {\n          event.stopImmediatePropagation();\n          getInstance().alter('insert_row', 1, 1);\n        }\n\n        called++;\n      }\n    });\n\n    selectCell(0, 0);\n\n    keyDown('backspace');\n    keyDown('arrow_right');\n\n    expect(getData().length).toEqual(3);\n    expect(getSelected()).toEqual([0, 1, 0, 1]);\n  });\n\n  it('should run beforeKeyDown hook in cell editor handler', () => {\n    var called = 0;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeKeyDown(event) {\n        called++;\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('enter');\n    keyDown('enter');\n\n    expect(called).toEqual(2);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_beforeKeyDown.spec.js","describe('Core_beforechange', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('this.rootElement should point to handsontable rootElement', function() {\n    var output = null;\n\n    handsontable({\n      beforeChange() {\n        output = this.rootElement;\n      }\n    });\n    setDataAtCell(0, 0, 'test');\n\n    expect(output).toEqual(this.$container[0]);\n  });\n\n  it('should remove change from stack', () => {\n    var output = null;\n\n    handsontable({\n      data: [['a', 'b'], ['c', 'd']],\n      beforeChange(changes) {\n        changes[1] = null;\n      },\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    setDataAtCell([[0, 0, 'test'], [1, 0, 'test'], [1, 1, 'test']]);\n\n    expect(getDataAtCell(0, 0)).toEqual('test');\n    expect(getDataAtCell(1, 0)).toEqual('c');\n    expect(getDataAtCell(1, 1)).toEqual('test');\n    expect(output).toEqual([[0, 0, 'a', 'test'], [1, 1, 'd', 'test']]);\n  });\n\n  it('should drop all changes when beforeChange return false', () => {\n    var fired = false;\n\n    handsontable({\n      data: [['a', 'b'], ['c', 'd']],\n      beforeChange(changes) {\n        fired = true;\n        return false;\n      }\n    });\n    setDataAtCell([[0, 0, 'test'], [1, 0, 'test'], [1, 1, 'test']]);\n\n    expect(getDataAtCell(0, 0)).toEqual('a');\n    expect(getDataAtCell(1, 0)).toEqual('c');\n    expect(getDataAtCell(1, 1)).toEqual('d');\n  });\n\n  function beforechangeOnKeyFactory(keyCode) {\n    return function() {\n      var called = false;\n\n      handsontable({\n        beforeChange(changes) {\n          if (changes[0][2] === 'test' && changes[0][3] === '') {\n            called = true;\n          }\n        }\n      });\n\n      setDataAtCell(0, 0, 'test');\n      selectCell(0, 0);\n\n      keyDown(keyCode);\n\n      expect(called).toEqual(true);\n    };\n  }\n\n  it('should be called on Delete key', beforechangeOnKeyFactory(46)); // 46 = Delete key\n\n  it('should be called on Backspace key', beforechangeOnKeyFactory(8)); // 8 = Backspace key\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_beforechange.spec.js","describe('Core_count', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    destroy();\n    this.$container.remove();\n  });\n\n  describe('countVisibleRows', () => {\n    it('should return number of visible rows', () => {\n      var instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        height: 100,\n        width: 600\n      });\n      expect(instance.countVisibleRows()).toEqual(4);\n    });\n\n    it('should return -1 if table is not rendered', function() {\n      this.$container.remove();\n      var instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        width: 100\n      });\n      expect(instance.countVisibleRows()).toEqual(-1);\n    });\n  });\n\n  describe('countRenderedRows', () => {\n    it('should return number of rendered rows', () => {\n      var instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        height: 100,\n        viewportRowRenderingOffset: 0\n      });\n      expect(instance.countRenderedRows()).toEqual(5);\n    });\n\n    it('should return number of rendered rows, including rows rendered becausee of viewportRowRenderingOffset', () => {\n      var instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(50, 10),\n        height: 100,\n        viewportRowRenderingOffset: 20\n      });\n      expect(instance.countRenderedRows()).toEqual(25);\n    });\n\n    it('should return -1 if table is not rendered', function() {\n      this.$container.remove();\n      var instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        width: 100\n      });\n      expect(instance.countRenderedRows()).toEqual(-1);\n    });\n  });\n\n  describe('countVisibleCols', () => {\n    it('should return number of visible columns', () => {\n      var instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        width: 100\n      });\n      expect(instance.countVisibleCols()).toEqual(10);\n    });\n\n    it('should return -1 if table is not rendered', function() {\n      this.$container.remove();\n      var instance = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 10),\n        width: 100\n      });\n\n      expect(instance.countVisibleCols()).toEqual(-1);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_count.spec.js","describe('Core_dataSchema', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as object)', () => {\n    var schema = {id: null, name: {first: null, last: null}, cars: [{brand: null}]},\n      hot = handsontable({\n        data: [],\n        dataSchema: schema,\n        minRows: 5,\n        minCols: 4,\n        colHeaders: ['ID', 'First Name', 'Last Name'],\n        columns: [\n          {data: 'id'},\n          {data: 'name.first'},\n          {data: 'name.last'}\n        ],\n        minSpareRows: 1\n      });\n\n    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as object) when columns is a function', () => {\n    var schema = {id: null, name: {first: null, last: null}, cars: [{brand: null}]},\n      hot = handsontable({\n        data: [],\n        dataSchema: schema,\n        minRows: 5,\n        minCols: 4,\n        colHeaders: ['ID', 'First Name', 'Last Name'],\n        columns(column) {\n          var colMeta = {};\n\n          if (column === 0) {\n            colMeta.data = 'id';\n\n          } else if (column === 1) {\n            colMeta.data = 'name.first';\n\n          } else if (column === 2) {\n            colMeta.data = 'name.last';\n\n          } else {\n            colMeta = null;\n          }\n\n          return colMeta;\n        },\n        minSpareRows: 1\n      });\n\n    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as function)', () => {\n    var schema = {id: null, name: {first: null, last: null}, cars: [{brand: null}]},\n      hot = handsontable({\n        data: [],\n        dataSchema() {\n          return schema;\n        },\n        minRows: 5,\n        minCols: 4,\n        colHeaders: ['ID', 'First Name', 'Last Name'],\n        columns: [\n          {data: 'id'},\n          {data: 'name.first'},\n          {data: 'name.last'}\n        ],\n        minSpareRows: 1\n      });\n    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is defined in settings (as function) when columns is a function', () => {\n    var schema = {id: null, name: {first: null, last: null}, cars: [{brand: null}]},\n      hot = handsontable({\n        data: [],\n        dataSchema() {\n          return schema;\n        },\n        minRows: 5,\n        minCols: 4,\n        colHeaders: ['ID', 'First Name', 'Last Name'],\n        columns(column) {\n          var colMeta = {};\n\n          if (column === 0) {\n            colMeta.data = 'id';\n\n          } else if (column === 1) {\n            colMeta.data = 'name.first';\n\n          } else if (column === 2) {\n            colMeta.data = 'name.last';\n\n          } else {\n            colMeta = null;\n          }\n\n          return colMeta;\n        },\n        minSpareRows: 1\n      });\n    expect(JSON.stringify(hot.getSchema())).toEqual(JSON.stringify(schema));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is generated based on data structure', () => {\n    var hot = handsontable({\n      data: [\n        {id: 1, name: {first: 'Alan', last: 'Pakoli'}, cars: [{brand: 'Ford'}]}\n      ],\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name'],\n      columns: [\n        {data: 'id'},\n        {data: 'name.first'},\n        {data: 'name.last'}\n      ],\n      minSpareRows: 1\n    });\n\n    expect(JSON.stringify(hot.getSchema()))\n      .toEqual(JSON.stringify({id: null, name: {first: null, last: null}, cars: [{brand: null}]}));\n  });\n\n  it('should be equal to `hot.getSchema()` when dataSchema is generated based on data structure when columns is a function', () => {\n    var hot = handsontable({\n      data: [\n        {id: 1, name: {first: 'Alan', last: 'Pakoli'}, cars: [{brand: 'Ford'}]}\n      ],\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name'],\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      minSpareRows: 1\n    });\n\n    expect(JSON.stringify(hot.getSchema()))\n      .toEqual(JSON.stringify({id: null, name: {first: null, last: null}, cars: [{brand: null}]}));\n  });\n\n  it('should create new row from dataSchema', () => {\n    handsontable({\n      data: [],\n      dataSchema: {id: null, name: {first: null, last: null}, address: null},\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n      columns: [\n        {data: 'id'},\n        {data: 'name.first'},\n        {data: 'name.last'},\n        {data: 'address'}\n      ],\n      minSpareRows: 1\n    });\n    selectCell(0, 1);\n\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n    keyDownUp('enter');\n    expect(getData()[0][1]).toEqual('Ted');\n    expect(getSourceData()[0].name.first).toEqual('Ted');\n  });\n\n  it('should create new row from dataSchema when columns is a function', () => {\n    handsontable({\n      data: [],\n      dataSchema: {id: null, name: {first: null, last: null}, address: null},\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else if (column === 3) {\n          colMeta.data = 'address';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      minSpareRows: 1\n    });\n    selectCell(0, 1);\n\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n    keyDownUp('enter');\n    expect(getData()[0][1]).toEqual('Ted');\n    expect(getSourceData()[0].name.first).toEqual('Ted');\n  });\n\n  it('should create new row from dataSchema (functional)', () => {\n    handsontable({\n      data: [],\n      dataSchema(index) {\n        return {id: 1000 + index, name: {first: null, last: null}, address: null};\n      },\n      isEmptyRow(r) {\n        var row = this.getSourceData()[r];\n\n        return (row.name.first === null || row.name.first === '') &&\n          (row.name.last === null || row.name.last === '') &&\n          (row.address === null || row.address === '');\n      },\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n      columns: [\n        {data: 'id'},\n        {data: 'name.first'},\n        {data: 'name.last'},\n        {data: 'address'}\n      ],\n      minSpareRows: 1\n    });\n    selectCell(4, 1);\n\n    expect(countRows()).toEqual(5);\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n\n    // need it in next frame as long as HT is rendered in async\n    keyDownUp('enter');\n    // need it in next frame as long as HT is rendered in async\n    keyDownUp('enter');\n\n    expect(getSourceData()[4].name.first).toEqual('Ted');\n    expect(getSourceData()[4].id).toEqual(1004);\n    expect(getData()[4][1]).toEqual('Ted');\n    expect(getData()[4][0]).toEqual(1004);\n    expect(countRows()).toEqual(6); // row should be added by keepEmptyRows\n  });\n\n  it('should create new row from dataSchema (functional) when columns is a function', () => {\n    handsontable({\n      data: [],\n      dataSchema(index) {\n        return {id: 1000 + index, name: {first: null, last: null}, address: null};\n      },\n      isEmptyRow(r) {\n        var row = this.getSourceData()[r];\n\n        return (row.name.first === null || row.name.first === '') &&\n          (row.name.last === null || row.name.last === '') &&\n          (row.address === null || row.address === '');\n      },\n      minRows: 5,\n      minCols: 4,\n      colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else if (column === 3) {\n          colMeta.data = 'address';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      minSpareRows: 1\n    });\n    selectCell(4, 1);\n\n    expect(countRows()).toEqual(5);\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n\n    // need it in next frame as long as HT is rendered in async\n    keyDownUp('enter');\n    // need it in next frame as long as HT is rendered in async\n    keyDownUp('enter');\n\n    expect(getSourceData()[4].name.first).toEqual('Ted');\n    expect(getSourceData()[4].id).toEqual(1004);\n    expect(getData()[4][1]).toEqual('Ted');\n    expect(getData()[4][0]).toEqual(1004);\n    expect(countRows()).toEqual(6); // row should be added by keepEmptyRows\n  });\n\n  it('should translate prop to col, when prop is a function', () => {\n    var idAccessor = createAccessorForProperty('id');\n    var nameAccessor = createAccessorForProperty('name');\n\n    hot = handsontable({\n      data: [\n        Model({\n          id: 1,\n          name: 'Tom'\n        }),\n        Model({\n          id: 2,\n          name: 'Hanna'\n        }),\n        Model({\n          id: 3,\n          name: 'Jerry'\n        })\n      ],\n      dataSchema: Model,\n      columns: [\n        {\n          data: idAccessor\n        },\n        {\n          data: nameAccessor\n        }\n      ]\n    });\n\n    expect(hot.propToCol(idAccessor)).toEqual(0);\n    expect(hot.propToCol(nameAccessor)).toEqual(1);\n  });\n\n  it('should translate prop to col, when prop and columns is a function', () => {\n    var idAccessor = createAccessorForProperty('id');\n    var nameAccessor = createAccessorForProperty('name');\n\n    hot = handsontable({\n      data: [\n        Model({\n          id: 1,\n          name: 'Tom'\n        }),\n        Model({\n          id: 2,\n          name: 'Hanna'\n        }),\n        Model({\n          id: 3,\n          name: 'Jerry'\n        })\n      ],\n      dataSchema: Model,\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = idAccessor;\n\n        } else if (column === 1) {\n          colMeta.data = nameAccessor;\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(hot.propToCol(idAccessor)).toEqual(0);\n    expect(hot.propToCol(nameAccessor)).toEqual(1);\n  });\n\n  it('should create new row data matched to dataSchema (data type as `array`)', () => {\n    var spy = jasmine.createSpy();\n    var hot = handsontable({\n      data: [[{id: 1}]],\n      dataSchema: [{id: null}],\n      columns: [\n        {data: '0', renderer: spy}\n      ],\n      autoColumnSize: false,\n      autoRowSize: false,\n    });\n\n    expect(spy.calls.count()).toBe(1);\n    expect(spy.calls.argsFor(0)[5]).toEqual({id: 1});\n\n    spy.calls.reset();\n    hot.alter('insert_row', 0);\n\n    expect(spy.calls.count()).toBe(2);\n    expect(spy.calls.argsFor(0)[5]).toEqual({id: null});\n    expect(spy.calls.argsFor(1)[5]).toEqual({id: 1});\n  });\n\n  it('should create new row data matched to dataSchema (data type as `array`) when columns is a function', () => {\n    var spy = jasmine.createSpy();\n    var hot = handsontable({\n      data: [[{id: 1}]],\n      dataSchema: [{id: null}],\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = '0';\n          colMeta.renderer = spy;\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      autoColumnSize: false,\n      autoRowSize: false\n    });\n\n    expect(spy.calls.count()).toBe(1);\n    expect(spy.calls.argsFor(0)[5]).toEqual({id: 1});\n\n    spy.calls.reset();\n    hot.alter('insert_row', 0);\n\n    expect(spy.calls.count()).toBe(2);\n    expect(spy.calls.argsFor(0)[5]).toEqual({id: null});\n    expect(spy.calls.argsFor(1)[5]).toEqual({id: 1});\n  });\n\n  it('should create an array of objects as the source structure, when dataSchema is defined (as an object) but no data is provided', () => {\n    var hot = handsontable({\n      startCols: 2,\n      minSpareRows: 4,\n      dataSchema: {id: null, name: null, surname: null},\n    });\n\n    var dataAtRow = hot.getSourceDataAtRow(0);\n\n    expect(Array.isArray(dataAtRow)).toBe(false);\n    expect(dataAtRow.id).toEqual(null);\n    expect(dataAtRow.name).toEqual(null);\n    expect(dataAtRow.surname).toEqual(null);\n  });\n\n  it('should create an array of objects as the source structure, when dataSchema is defined (as a function) but no data is provided', () => {\n    var hot = handsontable({\n      startCols: 2,\n      minSpareRows: 4,\n      dataSchema() {\n        return {id: null, name: null, surname: null};\n      },\n    });\n\n    var dataAtRow = hot.getSourceDataAtRow(0);\n\n    expect(Array.isArray(dataAtRow)).toBe(false);\n    expect(dataAtRow.id).toEqual(null);\n    expect(dataAtRow.name).toEqual(null);\n    expect(dataAtRow.surname).toEqual(null);\n  });\n\n  it('should create an array of objects as the source structure, when dataSchema is defined (as an array with an object) but no data is provided', () => {\n    var hot = handsontable({\n      startCols: 2,\n      minSpareRows: 4,\n      dataSchema: [{id: null, name: null, surname: null}],\n    });\n\n    var dataAtRow = hot.getSourceDataAtRow(0);\n\n    expect(Array.isArray(dataAtRow)).toBe(false);\n    expect(dataAtRow.id).toEqual(null);\n    expect(dataAtRow.name).toEqual(null);\n    expect(dataAtRow.surname).toEqual(null);\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_dataSchema.spec.js","describe('Core_datachange', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should call onChange callback', () => {\n    var output = null;\n\n    handsontable({\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    setDataAtCell(1, 2, 'test');\n\n    expect(output[0][0]).toEqual(1);\n    expect(output[0][1]).toEqual(2);\n    expect(output[0][2]).toEqual(null);\n    expect(output[0][3]).toEqual('test');\n  });\n\n  it('should use custom source for datachange', () => {\n    var output = null,\n      src = null;\n\n    handsontable({\n      afterChange(changes, source) {\n        output = changes;\n        src = source;\n      }\n    });\n    setDataAtCell(1, 2, 'abc', 'test');\n\n    expect(output[0][3]).toEqual('abc');\n    expect(src).toEqual('test');\n  });\n\n  it('should use custom source for datachange with array', () => {\n    var output = null,\n      src = null;\n\n    handsontable({\n      afterChange(changes, source) {\n        output = changes;\n        src = source;\n      }\n    });\n    setDataAtCell([[1, 2, 'abc']], 'test');\n\n    expect(output[0][3]).toEqual('abc');\n    expect(src).toEqual('test');\n  });\n\n  it('should trigger datachange event', () => {\n    var output = null;\n\n    handsontable();\n    Handsontable.hooks.add('afterChange', (changes) => {\n      output = changes;\n    });\n    setDataAtCell(1, 2, 'test');\n\n    expect(output[0][0]).toEqual(1);\n    expect(output[0][1]).toEqual(2);\n    expect(output[0][2]).toEqual(null);\n    expect(output[0][3]).toEqual('test');\n  });\n\n  it('this.rootElement should point to handsontable rootElement', function() {\n    var output = null;\n    var $container = this.$container;\n\n    handsontable({\n      afterChange() {\n        output = this.rootElement;\n      }\n    });\n    setDataAtCell(0, 0, 'test');\n\n    expect(output).toEqual($container[0]);\n  });\n\n  it('onChange should be triggered after data is rendered to DOM (init)', function() {\n    var output = null;\n    var $container = this.$container;\n\n    handsontable({\n      data: [\n        ['Joe Red']\n      ],\n      afterChange(changes, source) {\n        if (source === 'loadData') {\n          output = $container.find('table.htCore tbody td:first').html();\n        }\n      }\n    });\n\n    expect(output).toEqual('Joe Red');\n  });\n\n  it('onChange should be triggered after data is rendered to DOM (setDataAtCell)', function() {\n    var output = null;\n    var $container = this.$container;\n\n    handsontable({\n      data: [\n        ['Joe Red']\n      ],\n      afterChange(changes, source) {\n        if (source === 'edit') {\n          output = $container.find('table.htCore tbody td:first').html();\n        }\n      }\n    });\n    setDataAtCell(0, 0, 'Alice Red');\n\n    expect(output).toEqual('Alice Red');\n  });\n\n  it('onChange event object should contain documented keys and values when triggered by edit', () => {\n    var sampleData = [\n      {\n        col1: 'a',\n        col2: 'b',\n        col3: 'c'\n      }\n    ];\n    var event = null;\n\n    handsontable({\n      data: sampleData,\n      afterChange(changes, source) {\n        if (source === 'edit') {\n          event = changes.shift();\n        }\n      }\n    });\n    setDataAtCell(0, 0, 'test');\n\n    expect(event[0]).toEqual(0);\n    expect(event[1]).toEqual('col1');\n    expect(event[2]).toEqual('a');\n    expect(event[3]).toEqual('test');\n  });\n\n  it('source parameter should be `edit` when cell value is changed through editor', () => {\n    var sources = [];\n\n    handsontable({\n      data: [\n        ['Joe Red']\n      ],\n      afterChange(changes, source) {\n        sources.push(source);\n      }\n    });\n    selectCell(0, 0);\n\n    keyDown('enter');\n    document.activeElement.value = 'Ted';\n    keyDown('enter');\n\n    expect(sources).toEqual(['loadData', 'edit']); // loadData is always the first source\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_datachange.spec.js","describe('Core_destroy', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should remove table from the root element', function() {\n    handsontable();\n    destroy();\n\n    expect(this.$container.html()).toEqual('');\n  });\n\n  it('should remove events from the root element, document element and window', () => {\n    var x = handsontable();\n\n    expect(x.eventListeners.length > 0).toBeTruthy();\n    destroy();\n    expect(x.eventListeners).toBeNull();\n    $(document.documentElement).off('.copypaste'); // remove copypaste.js listeners, which are not removed by destroy (because copypaste is a singleton for whole page)\n  });\n\n  it('should NOT remove events from document element and window for other Handsontable instances on the page', () => {\n    // test based on Core_selectionSpec.js (should deselect currently selected cell)\n    handsontable();\n\n    var $tmp = $('<div id=\"tmp\"></div>').appendTo(document.body);\n    $tmp.handsontable();\n    $tmp.handsontable('destroy');\n    $tmp.remove();\n\n    selectCell(0, 0);\n\n    $('html').simulate('mousedown');\n\n    expect(getSelected()).toBeUndefined();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_destroy.spec.js","describe('Core_destroyEditor', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('editor should not be visible', () => {\n    handsontable();\n    selectCell(1, 1);\n\n    keyDownUp('enter');\n\n    destroyEditor();\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('value should be saved', () => {\n    handsontable();\n    selectCell(1, 1);\n\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n\n    destroyEditor();\n    expect(getDataAtCell(1, 1)).toEqual('Ted');\n  });\n\n  it('cell should be selected', () => {\n    handsontable();\n    selectCell(1, 1);\n\n    keyDownUp('enter');\n\n    destroyEditor();\n    expect(getSelected()).toEqual([1, 1, 1, 1]);\n  });\n\n  it('should revert original value when param set to true', () => {\n    handsontable();\n    selectCell(1, 1);\n\n    keyDownUp('enter');\n    keyProxy().val('Ted');\n\n    destroyEditor(true);\n    expect(getDataAtCell(1, 1)).toEqual(null);\n  });\n\n  it('should not destroy editor on scroll', function() {\n    this.$container.css({\n      width: 200,\n      height: 100\n    });\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 10)\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    var editor = $('.handsontableInputHolder');\n\n    expect(editor.is(':visible')).toBe(true);\n\n    this.$container.scroll();\n\n    expect(editor.is(':visible')).toBe(true);\n\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_destroyEditor.spec.js","describe('Core_getCellMeta', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should not allow manual editing of a read only cell', () => {\n    var allCellsReadOnly = false;\n\n    handsontable({\n      cells() {\n        return {readOnly: allCellsReadOnly};\n      }\n    });\n    allCellsReadOnly = true;\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('should allow manual editing of cell that is no longer read only', () => {\n    var allCellsReadOnly = true;\n\n    handsontable({\n      cells() {\n        return {readOnly: allCellsReadOnly};\n      }\n    });\n    allCellsReadOnly = false;\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should move the selection to the cell below, when hitting the ENTER key on a read-only cell', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      cells() {\n        return {readOnly: true};\n      }\n    });\n\n    selectCell(0, 0);\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    keyDown('enter');\n    expect(getSelected()).toEqual([1, 0, 1, 0]);\n\n  });\n\n  it('should use default cell editor for a cell that has declared only cell renderer', () => {\n    handsontable({\n      cells() {\n        return {\n          renderer(instance, td, row, col, prop, value, cellProperties) {\n            // taken from demo/renderers.html\n            Handsontable.renderers.TextRenderer.apply(this, arguments);\n            $(td).css({\n              background: 'yellow'\n            });\n          }\n        };\n      }\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    document.activeElement.value = 'new value';\n    destroyEditor();\n    expect(getDataAtCell(2, 2)).toEqual('new value');\n  });\n\n  it('should allow to use type and renderer in `flat` notation', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [0, 9, 8, 7]\n      ],\n      cells(row, col) {\n        if (row === 2 && col === 2) {\n          return {\n            type: 'checkbox',\n            renderer(instance, td, row, col, prop, value, cellProperties) {\n              // taken from demo/renderers.html\n              Handsontable.renderers.TextRenderer.apply(this, arguments);\n\n              td.style.backgroundColor = 'yellow';\n            }\n          };\n        }\n      }\n    });\n\n    expect(getCell(2, 2).style.backgroundColor).toEqual('yellow');\n    expect(getCell(1, 1).style.backgroundColor).toEqual('');\n  });\n\n  it('this in cells should point to cellProperties', () => {\n    var called = 0,\n      _row,\n      _this;\n\n    handsontable({\n      cells(row, col, prop) {\n        called++;\n        _row = row;\n        _this = this;\n      }\n    });\n\n    var HOT = getInstance();\n\n    expect(called).toBeGreaterThan(0);\n    expect(_this.row).toEqual(_row);\n    expect(_this.instance).toBe(HOT);\n  });\n\n  it('should get proper cellProperties when order of displayed rows is different than order of stored data', function() {\n    var hot = handsontable({\n      data: [\n        ['C'],\n        ['A'],\n        ['B']\n      ],\n      minSpareRows: 1,\n      cells(row, col, prop) {\n        var cellProperties = {};\n\n        if (getSourceData()[row][col] === 'A') {\n          cellProperties.readOnly = true;\n        }\n\n        return cellProperties;\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('C');\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htDimmed')).toBe(false);\n\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('A');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').hasClass('htDimmed')).toBe(true);\n\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('B');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').hasClass('htDimmed')).toBe(false);\n\n    // Column sorting changes the order of displayed rows while keeping table data unchanged\n    updateSettings({\n      columnSorting: {\n        column: 0,\n        sortOrder: true\n      }\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').text()).toEqual('A');\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htDimmed')).toBe(true);\n\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').text()).toEqual('B');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(0)').hasClass('htDimmed')).toBe(false);\n\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').text()).toEqual('C');\n    expect(this.$container.find('tbody tr:eq(2) td:eq(0)').hasClass('htDimmed')).toBe(false);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_getCellMeta.spec.js","describe('Core.getColHeader', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('when not configured, should return undefined', () => {\n    handsontable();\n    expect(getColHeader(1)).toBe(null);\n  });\n\n  it('when configured as true, should return the Excel-style column title', () => {\n    handsontable({\n      colHeaders: true\n    });\n    expect(getColHeader(30)).toEqual('AE');\n  });\n\n  it('when configured as array, should return value at index', () => {\n    handsontable({\n      colHeaders: ['One', 'Two', 'Three', 'Four', 'Five']\n    });\n    expect(getColHeader(1)).toEqual('Two');\n  });\n\n  it('when configured as function, should return function output', () => {\n    handsontable({\n      colHeaders(index) {\n        return `col${index}`;\n      }\n    });\n    expect(getColHeader(1)).toEqual('col1');\n  });\n\n  it('when configured as static value, should return the value', () => {\n    handsontable({\n      colHeaders: 'static'\n    });\n    expect(getColHeader(1)).toEqual('static');\n  });\n\n  it('when configured as HTML value, should render that as HTML', () => {\n    handsontable({\n      colHeaders(index) {\n        return `<b>col${index}</b>`;\n      }\n    });\n    expect(getColHeader(1)).toEqual('<b>col1</b>');\n  });\n\n  it('when no argument given, should return as much column headers as there are columns', () => {\n    handsontable({\n      colHeaders: true,\n      startCols: 3\n    });\n    expect(getColHeader()).toEqual(['A', 'B', 'C']);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_getColHeader.spec.js","describe('Core_getDataAt*', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  var arrayOfObjects = function() {\n    return [\n      {\n        'id.a.b.c': 1,\n        id: 1,\n        name: 'Nannie Patel',\n        address: 'Jenkin ville',\n        details: {\n          city: 'Chicago'\n        },\n      },\n      {\n        'id.a.b.c': 2,\n        id: 2,\n        name: 'Łucja Grożny and Środeńczak',\n        address: 'Gardiner',\n        details: {\n          city: 'New York'\n        },\n      },\n    ];\n  };\n\n  it('should return data at specified row', () => {\n    handsontable({\n      data: arrayOfArrays()\n    });\n\n    expect(getDataAtRow(0)).toEqual(['', 'Kia', 'Nissan', 'Toyota', 'Honda']);\n  });\n\n  it('should return data at specified col', () => {\n    handsontable({\n      data: arrayOfArrays()\n    });\n\n    expect(getDataAtCol(1)).toEqual(['Kia', 10, 20, 30]);\n  });\n\n  describe('Core_getDataAtRowProp', () => {\n    it('should return data at specified column', () => {\n      handsontable({\n        data: arrayOfObjects()\n      });\n\n      expect(getDataAtRowProp(1, 'id.a.b.c')).toBe(2);\n      expect(getDataAtRowProp(1, 'id')).toBe(2);\n      expect(getDataAtRowProp(1, 'id')).toBe(2);\n      expect(getDataAtRowProp(1, 'details.city')).toBe('New York');\n    });\n  });\n\n  describe('`modifyData` hook', () => {\n    it('should be fired with specified arguments on every `set`, `get` operation (array of arrays)', () => {\n      var spy = jasmine.createSpy();\n\n      handsontable({\n        data: arrayOfArrays(),\n        autoColumnSize: false,\n        modifyData: spy,\n      });\n\n      expect(spy.calls.count()).toBe(20); // call for all cells\n      expect(spy.calls.argsFor(1)[0]).toBe(0);\n      expect(spy.calls.argsFor(1)[1]).toBe(1);\n      expect(spy.calls.argsFor(1)[2].value).toBe('Kia');\n      expect(spy.calls.argsFor(1)[3]).toBe('get');\n\n      spy.calls.reset();\n      setDataAtCell(2, 3, 'foo');\n\n      expect(spy.calls.count()).toBe(21); // call for all cells + 1 from setDataAtCell\n      expect(spy.calls.argsFor(0)[0]).toBe(2);\n      expect(spy.calls.argsFor(0)[1]).toBe(3);\n      expect(spy.calls.argsFor(0)[2].value).toBe('foo');\n      expect(spy.calls.argsFor(0)[3]).toBe('set');\n    });\n\n    it('should be fired with specified arguments on every `set`, `get` operation (array of objects)', () => {\n      var spy = jasmine.createSpy();\n\n      handsontable({\n        data: arrayOfObjects(),\n        autoColumnSize: false,\n        modifyData: spy,\n      });\n\n      expect(spy.calls.count()).toBe(10); // call for all cells\n      expect(spy.calls.argsFor(2)[0]).toBe(0);\n      expect(spy.calls.argsFor(2)[1]).toBe(2);\n      expect(spy.calls.argsFor(2)[2].value).toBe('Nannie Patel');\n      expect(spy.calls.argsFor(2)[3]).toBe('get');\n\n      spy.calls.reset();\n      setDataAtRowProp(2, 'name', 'foo');\n\n      expect(spy.calls.count()).toBe(16);\n      expect(spy.calls.argsFor(0)[0]).toBe(2);\n      expect(spy.calls.argsFor(0)[1]).toBe(2);\n      expect(spy.calls.argsFor(0)[2].value).toBe('foo');\n      expect(spy.calls.argsFor(0)[3]).toBe('set');\n    });\n\n    it('should overwrite value while loading data', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        modifyData(row, column, valueHolder, ioMode) {\n          if (ioMode === 'get' && row === 1 && column === 2) {\n            valueHolder.value = 'foo';\n          }\n        },\n      });\n\n      expect(getDataAtCell(1, 2)).toBe('foo');\n      expect(getSourceDataAtCell(1, 2)).toBe(11);\n    });\n\n    it('should overwrite value while saving data', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        modifyData(row, column, valueHolder, ioMode) {\n          if (ioMode === 'set' && row === 1 && column === 2) {\n            valueHolder.value = 'foo';\n          }\n        },\n      });\n\n      setDataAtCell(1, 2, 'bar');\n\n      expect(getDataAtCell(1, 2)).toBe('foo');\n      expect(getSourceDataAtCell(1, 2)).toBe('foo');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_getDataAt.spec.js","describe('Core_getDataType', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  it('should return data type at specyfied range (default type)', () => {\n    handsontable({\n      data: arrayOfArrays()\n    });\n\n    expect(getDataType(0, 0)).toEqual('text');\n    expect(getDataType(0, 0, 1, 1)).toEqual('text');\n  });\n\n  it('should return data type at specyfied range (type defined in columns)', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      columns: [\n        {type: 'numeric'},\n        {type: 'text'},\n        {type: 'date'},\n        {type: 'autocomplete'},\n        {type: 'dropdown'},\n      ]\n    });\n\n    expect(getDataType(0, 0)).toEqual('numeric');\n    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');\n    expect(getDataType(0, 1, 1, 1)).toEqual('text');\n    expect(getDataType(0, 2, 1, 2)).toEqual('date');\n    expect(getDataType(3, 3, 3, 3)).toEqual('autocomplete');\n    expect(getDataType(3, 4, 3, 4)).toEqual('dropdown');\n  });\n\n  it('should return data type at specyfied range (type defined in columns) when columns is a function', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.type = 'numeric';\n\n        } else if (column === 1) {\n          colMeta.type = 'text';\n\n        } else if (column === 2) {\n          colMeta.type = 'date';\n\n        } else if (column === 3) {\n          colMeta.type = 'autocomplete';\n\n        } else if (column === 4) {\n          colMeta.type = 'dropdown';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getDataType(0, 0)).toEqual('numeric');\n    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');\n    expect(getDataType(0, 1, 1, 1)).toEqual('text');\n    expect(getDataType(0, 2, 1, 2)).toEqual('date');\n    expect(getDataType(3, 3, 3, 3)).toEqual('autocomplete');\n    expect(getDataType(3, 4, 3, 4)).toEqual('dropdown');\n  });\n\n  it('should return data type at specyfied range (type defined in cells)', () => {\n    handsontable({\n      data: arrayOfArrays(),\n      cells(row, column) {\n        var cellMeta = {};\n\n        if (row === 1 && column === 1) {\n          cellMeta.type = 'date';\n        }\n        if (column === 2) {\n          cellMeta.type = 'checkbox';\n        }\n\n        return cellMeta;\n      }\n    });\n\n    expect(getDataType(0, 0)).toEqual('text');\n    expect(getDataType(1, 1)).toEqual('date');\n    expect(getDataType(1, 2)).toEqual('checkbox');\n    expect(getDataType(0, 0, 1, 1)).toEqual('mixed');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_getDataType.spec.js","describe('Core.getRowHeader', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('when not configured, should return undefined', () => {\n    handsontable();\n    expect(getRowHeader(1)).toEqual(void 0);\n  });\n\n  it('when configured as true, should return the index incremented by 1', () => {\n    handsontable({\n      rowHeaders: true\n    });\n    expect(getRowHeader(1)).toEqual(2);\n  });\n\n  it('when configured as array, should return value at index', () => {\n    handsontable({\n      rowHeaders: ['One', 'Two', 'Three', 'Four', 'Five']\n    });\n    expect(getRowHeader(1)).toEqual('Two');\n  });\n\n  it('when configured as function, should return function output', () => {\n    handsontable({\n      rowHeaders(index) {\n        return `row${index}`;\n      }\n    });\n    expect(getRowHeader(1)).toEqual('row1');\n  });\n\n  it('when configured as static value, should return the value', () => {\n    handsontable({\n      rowHeaders: 'static'\n    });\n    expect(getRowHeader(1)).toEqual('static');\n  });\n\n  it('when configured as HTML value, should render that as HTML', () => {\n    handsontable({\n      rowHeaders(index) {\n        return `<b>row${index}</b>`;\n      }\n    });\n    expect(getRowHeader(1)).toEqual('<b>row1</b>');\n  });\n\n  it('when no argument given, should return as much row headers as there are rows', () => {\n    handsontable({\n      rowHeaders: true,\n      startRows: 3\n    });\n    expect(getRowHeader()).toEqual([1, 2, 3]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_getRowHeader.spec.js","describe('Core_init', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should respect startRows and startCols when no data is provided', function() {\n    this.$container.remove();\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    handsontable();\n\n    expect(countRows()).toEqual(5); // as given in README.md\n    expect(countCols()).toEqual(5); // as given in README.md\n  });\n\n  it('should respect width provided in inline style', function() {\n    this.$container.css({\n      overflow: 'auto',\n      width: '200px'\n    });\n    handsontable({\n      data: [\n        ['ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC']\n      ]\n    });\n\n    expect(this.$container.width()).toEqual(200);\n  });\n\n  it('should respect width provided in CSS class', function() {\n    $('<style>.myTable {overflow: auto; width: 200px}</style>').appendTo('head');\n    this.$container.addClass('myTable');\n    handsontable({\n      data: [\n        ['ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC', 'ABC']\n      ]\n    });\n\n    expect(this.$container.width()).toEqual(200);\n  });\n\n  it('should construct when container is not appended to document', function() {\n    this.$container.remove();\n    handsontable();\n    expect(getData()).toBeTruthy();\n  });\n\n  it('Handsontable.Dom should be available as a helper to the plugins', () => {\n    // all public methods of Handsontable.Dom should be exposed here\n    expect(Handsontable.dom.closest).toBeDefined();\n    expect(Handsontable.dom.isChildOf).toBeDefined();\n    expect(Handsontable.dom.index).toBeDefined();\n    expect(Handsontable.dom.hasClass).toBeDefined();\n    expect(Handsontable.dom.addClass).toBeDefined();\n    expect(Handsontable.dom.removeClass).toBeDefined();\n    expect(Handsontable.dom.removeTextNodes).toBeDefined();\n    expect(Handsontable.dom.empty).toBeDefined();\n    expect(Handsontable.dom.fastInnerHTML).toBeDefined();\n    expect(Handsontable.dom.fastInnerText).toBeDefined();\n    expect(Handsontable.dom.isVisible).toBeDefined();\n    expect(Handsontable.dom.offset).toBeDefined();\n    expect(Handsontable.dom.getComputedStyle).toBeDefined();\n    expect(Handsontable.dom.outerWidth).toBeDefined();\n    expect(Handsontable.dom.outerHeight).toBeDefined();\n    expect(Handsontable.dom.getCaretPosition).toBeDefined();\n    expect(Handsontable.dom.setCaretPosition).toBeDefined();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_init.spec.js","describe('Core.isEmpty*', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('isEmptyRow', () => {\n    it('should be empty row', () => {\n      handsontable();\n      var hot = getInstance();\n      expect(hot.isEmptyRow(0)).toEqual(true);\n    });\n\n    it('should not be empty row', () => {\n      handsontable();\n      setDataAtCell(0, 0, 'test');\n      var hot = getInstance();\n      expect(hot.isEmptyRow(0)).toEqual(false);\n    });\n\n    it('should bind this to instance', () => {\n      handsontable();\n      var hot = getInstance();\n      var check = hot.isEmptyRow;\n      expect(check(0)).toEqual(true); // this may be change in future when we switch to define isEmptyCol in prototype\n    });\n  });\n\n  describe('isEmptyCol', () => {\n    it('should be empty row', () => {\n      handsontable();\n      var hot = getInstance();\n      expect(hot.isEmptyCol(0)).toEqual(true);\n    });\n\n    it('should not be empty row', () => {\n      handsontable();\n      setDataAtCell(0, 0, 'test');\n      var hot = getInstance();\n      expect(hot.isEmptyCol(0)).toEqual(false);\n    });\n\n    it('should bind this to instance', () => {\n      handsontable();\n      var hot = getInstance();\n      var check = hot.isEmptyCol;\n      expect(check(0)).toEqual(true); // this may be change in future when we switch to define isEmptyCol in prototype\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_isEmpty.spec.js","describe('Core_keepEmptyRows', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfNestedObjects = function() {\n    return [\n      {id: 1,\n        name: {\n          first: 'Ted',\n          last: 'Right'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name'},\n      {id: 2,\n        name: {\n          first: 'Frank',\n          last: 'Honest'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name'},\n      {id: 3,\n        name: {\n          first: 'Joan',\n          last: 'Well'\n        },\n        address: 'Street Name',\n        zip: '80410',\n        city: 'City Name'}\n    ];\n  };\n\n  it('should remove columns if needed', function() {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      columns: [\n        {data: 'id'},\n        {data: 'name.first'}\n      ]\n    });\n\n    expect(this.$container.find('tbody tr:first td').length).toEqual(2);\n  });\n\n  it('should remove columns if needed when columns is a function', function() {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(this.$container.find('tbody tr:first td').length).toEqual(2);\n  });\n\n  it('should create columns if needed', function() {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      columns: [\n        {data: 'id'},\n        {data: 'name.first'},\n        {data: 'name.last'},\n        {data: 'address'},\n        {data: 'zip'},\n        {data: 'city'}\n      ]\n    });\n\n    expect(this.$container.find('tbody tr:first td').length).toEqual(6);\n  });\n\n  it('should create columns if needed when columns is a function', function() {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n\n        } else if (column === 1) {\n          colMeta.data = 'name.first';\n\n        } else if (column === 2) {\n          colMeta.data = 'name.last';\n\n        } else if (column === 3) {\n          colMeta.data = 'address';\n\n        } else if (column === 4) {\n          colMeta.data = 'zip';\n\n        } else if (column === 5) {\n          colMeta.data = 'city';\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(this.$container.find('tbody tr:first td').length).toEqual(6);\n  });\n\n  it('should create spare cols and rows on init (array data source)', () => {\n    handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      minCols: 4,\n      minRows: 4,\n      minSpareRows: 4,\n      minSpareCols: 4\n    });\n\n    expect(countCells()).toEqual(36);\n  });\n\n  it('should create spare cols and rows on init (object data source)', function() {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      minRows: 4,\n      minSpareRows: 1\n    });\n\n    expect(countRows()).toEqual(4);\n    expect(countCols()).toEqual(6); // because arrayOfNestedObjects has 6 nested properites and they should be figured out if dataSchema/columns is not given\n    expect(this.$container.find('tbody tr:first td:last').text()).toEqual('City Name');\n  });\n\n  it('should create new row when last cell in last row is edited', () => {\n    var data = [\n      ['one', 'two'],\n      ['three', 'four']\n    ];\n\n    handsontable({\n      data,\n      minRows: 4,\n      minCols: 4,\n      minSpareRows: 1\n    });\n    setDataAtCell(3, 3, 'test');\n\n    expect(data.length).toEqual(5);\n  });\n\n  it('should create new col when last cell in last row is edited', () => {\n    var data = [\n      ['one', 'two'],\n      ['three', 'four']\n    ];\n\n    handsontable({\n      data,\n      minRows: 4,\n      minCols: 4,\n      minSpareCols: 1\n    });\n    setDataAtCell(3, 3, 'test');\n\n    expect(countCols()).toEqual(5);\n  });\n\n  it('should create new row when last cell in last row is edited by autocomplete', (done) => {\n    var data = [\n      {id: 1, color: 'orange' }\n    ];\n\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);\n    });\n\n    handsontable({\n      data,\n      startRows: 5,\n      colHeaders: true,\n      minSpareRows: 1,\n      columns: [\n        {data: 'id', type: 'text'},\n        {\n          data: 'color',\n          editor: 'autocomplete',\n          source: syncSources\n        }\n      ]\n    });\n\n    selectCell(1, 1);\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      keyDown('arrow_down');\n      keyDownUp('enter');\n\n      expect(data.length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should create new row when last cell in last row is edited by autocomplete when columns is a function', (done) => {\n    var data = [\n      {id: 1, color: 'orange' }\n    ];\n\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);\n    });\n\n    handsontable({\n      data,\n      startRows: 5,\n      colHeaders: true,\n      minSpareRows: 1,\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n          colMeta.type = 'text';\n\n        } else if (column === 1) {\n          colMeta.data = 'color';\n          colMeta.editor = 'autocomplete';\n          colMeta.source = syncSources;\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    selectCell(1, 1);\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      keyDown('arrow_down');\n      keyDownUp('enter');\n\n      expect(data.length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should not create more rows that maxRows', () => {\n    handsontable({\n      startRows: 4,\n      maxRows: 6,\n      minSpareRows: 1\n    });\n    setDataAtCell(3, 0, 'test');\n    setDataAtCell(4, 0, 'test');\n    setDataAtCell(5, 0, 'test');\n\n    expect(countRows()).toEqual(6);\n  });\n\n  it('should not create more cols that maxCols', () => {\n    handsontable({\n      startCols: 4,\n      maxCols: 6,\n      minSpareCols: 1\n    });\n    setDataAtCell(0, 3, 'test');\n    setDataAtCell(0, 4, 'test');\n    setDataAtCell(0, 5, 'test');\n\n    expect(countCols()).toEqual(6);\n  });\n\n  it('should ignore minCols if columns is set', () => {\n    handsontable({\n      startCols: 1,\n      minCols: 6,\n      columns: [\n        {},\n        {}\n      ]\n    });\n\n    expect(countCols()).toEqual(2);\n  });\n\n  it('should ignore minCols if columns is set when columns is a function', () => {\n    handsontable({\n      startCols: 1,\n      minCols: 6,\n      columns(column) {\n        var colMeta = {};\n\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(countCols()).toEqual(1);\n  });\n\n  it('columns should have priority over startCols', () => {\n    handsontable({\n      startCols: 3,\n      minCols: 6,\n      columns: [\n        {},\n        {}\n      ]\n    });\n\n    expect(countCols()).toEqual(2);\n  });\n\n  it('columns should have priority over startCols when columns is a function', () => {\n    handsontable({\n      startCols: 3,\n      minCols: 6,\n      columns(column) {\n        var colMeta = {};\n\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(countCols()).toEqual(2);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_keepEmptyRows.spec.js","describe('Core_listen', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should listen to changes when cell is selected', () => {\n    var hot = handsontable();\n    hot.selectCell(0, 0);\n    expect(hot.isListening()).toEqual(true);\n  });\n\n  it('should\\'t listen to changes when cell is selected via `selectCell` when `changeListener` argument is `false`', () => {\n    var hot = handsontable();\n\n    hot.unlisten();\n\n    expect(hot.isListening()).toEqual(false);\n\n    hot.selectCell(0, 0, undefined, undefined, true, false);\n\n    expect(hot.isListening()).toEqual(false);\n  });\n\n  it('should unlisten changes', () => {\n    var hot = handsontable();\n    hot.selectCell(0, 0);\n    expect(hot.isListening()).toEqual(true);\n    hot.unlisten();\n    expect(hot.isListening()).toEqual(false);\n  });\n\n  it('should listen to changes, when called after unlisten', () => {\n    var hot = handsontable();\n    hot.selectCell(0, 0);\n    hot.unlisten();\n    hot.listen();\n    expect(hot.isListening()).toEqual(true);\n  });\n\n  it('when second instance is created, first should unlisten automatically', () => {\n    var $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable();\n    $container1.handsontable('selectCell', 0, 0);\n    var $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable();\n    $container2.handsontable('selectCell', 0, 0);\n\n    expect($container1.handsontable('isListening')).toEqual(false);\n    expect($container2.handsontable('isListening')).toEqual(true);\n\n    $container1.handsontable('destroy');\n    $container1.remove();\n    $container2.handsontable('destroy');\n    $container2.remove();\n  });\n\n  it('when listen is called on first instance, second should unlisten automatically', () => {\n    var $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable();\n    $container1.handsontable('selectCell', 0, 0);\n    var $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable();\n    $container2.handsontable('selectCell', 0, 0);\n\n    $container1.handsontable('listen');\n    expect($container1.handsontable('isListening')).toEqual(true);\n    expect($container2.handsontable('isListening')).toEqual(false);\n\n    $container1.handsontable('destroy');\n    $container1.remove();\n    $container2.handsontable('destroy');\n    $container2.remove();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_listen.spec.js","describe('Core_loadData', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  var arrayOfObjects = function() {\n    return [\n      {id: 1, name: 'Ted', lastName: 'Right'},\n      {id: 2, name: 'Frank', lastName: 'Honest'},\n      {id: 3, name: 'Joan', lastName: 'Well'},\n      {id: 4, name: 'Sid', lastName: 'Strong'},\n      {id: 5, name: 'Jane', lastName: 'Neat'},\n      {id: 6, name: 'Chuck', lastName: 'Jackson'},\n      {id: 7, name: 'Meg', lastName: 'Jansen'},\n      {id: 8, name: 'Rob', lastName: 'Norris'},\n      {id: 9, name: 'Sean', lastName: 'O\\'Hara'},\n      {id: 10, name: 'Eve', lastName: 'Branson'}\n    ];\n  };\n\n  var arrayOfNestedObjects = function() {\n    return [\n      {\n        id: 1,\n        name: {\n          first: 'Ted',\n          last: 'Right'\n        },\n        'full.street': 'Street I',\n      },\n      {\n        id: 2,\n        name: {\n          first: 'Frank',\n          last: 'Honest'\n        },\n        'full.street': 'Street II',\n      },\n      {\n        id: 3,\n        name: {\n          first: 'Joan',\n          last: 'Well'\n        },\n        'full.street': 'Street III',\n      }\n    ];\n  };\n\n  var htmlData = [\n    ['<b>H&M</b>']\n  ];\n\n  it('should allow array of arrays', () => {\n    handsontable();\n    loadData(arrayOfArrays());\n    expect(getDataAtCell(0, 2)).toEqual('Nissan');\n  });\n\n  it('should allow array of objects', () => {\n    handsontable({\n      columns: [\n        {data: 'id'},\n        {data: 'lastName'},\n        {data: 'name'}\n      ]\n    });\n    loadData(arrayOfObjects());\n    expect(getDataAtCell(0, 2)).toEqual('Ted');\n  });\n\n  it('should allow array of objects when columns as a function', () => {\n    handsontable({\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n        } else if (column === 1) {\n          colMeta.data = 'lastName';\n        } else if (column === 2) {\n          colMeta.data = 'name';\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n    loadData(arrayOfObjects());\n    expect(getDataAtCell(0, 2)).toEqual('Ted');\n  });\n\n  it('should allow array of nested objects', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true,\n      columns: [\n        {data: 'id'},\n        {data: 'name.last'},\n        {data: 'name.first'},\n        {data: 'full.street'},\n      ]\n    });\n    expect(getDataAtCell(0, 2)).toEqual('Ted');\n    expect(getDataAtCell(1, 3)).toEqual('Street II');\n    expect(getDataAtRowProp(2, 'full.street')).toEqual('Street III');\n  });\n\n  it('should allow array of nested objects when columns as a function', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true,\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n        } else if (column === 1) {\n          colMeta.data = 'name.last';\n        } else if (column === 2) {\n          colMeta.data = 'name.first';\n        } else if (column === 3) {\n          colMeta.data = 'full.street';\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n    expect(getDataAtCell(0, 2)).toEqual('Ted');\n    expect(getDataAtCell(1, 3)).toEqual('Street II');\n    expect(getDataAtRowProp(2, 'full.street')).toEqual('Street III');\n  });\n\n  it('should figure out default column names for array of nested objects', () => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true\n    });\n    expect(getDataAtCell(0, 2)).toEqual('Right');\n  });\n\n  it('should trigger onChange callback when loaded array of arrays', () => {\n    var called = false;\n\n    handsontable({\n      afterChange(changes, source) {\n        if (source === 'loadData') {\n          called = true;\n        }\n      }\n    });\n    loadData(arrayOfArrays());\n\n    expect(called).toEqual(true);\n  });\n\n  it('should trigger onChange callback when loaded array of objects', () => {\n    var called = false;\n\n    handsontable({\n      afterChange(changes, source) {\n        if (source === 'loadData') {\n          called = true;\n        }\n      }\n    });\n    loadData(arrayOfObjects());\n\n    expect(called).toEqual(true);\n  });\n\n  it('should trigger onChange callback when loaded array of nested objects', () => {\n    var called = false;\n\n    handsontable({\n      afterChange(changes, source) {\n        if (source === 'loadData') {\n          called = true;\n        }\n      }\n    });\n    loadData(arrayOfNestedObjects());\n\n    expect(called).toEqual(true);\n  });\n\n  it('should create new rows for array of arrays (and respect minRows)', () => {\n    handsontable({\n      minRows: 20, // minRows should be respected\n      data: arrayOfArrays()\n    });\n\n    expect(countRows()).toEqual(20); // TODO why this must be checked after render?\n  });\n\n  it('should create new rows for array of nested objects (and respect minRows)', () => {\n    handsontable({\n      minRows: 20, // minRows should be respected\n      data: arrayOfNestedObjects()\n    });\n\n    expect(countRows()).toEqual(20); // TODO why this must be checked after render?\n  });\n\n  it('HTML special chars should be escaped by default', () => {\n    handsontable();\n    loadData(htmlData);\n\n    expect(getCell(0, 0).innerHTML).toEqual('&lt;b&gt;H&amp;M&lt;/b&gt;');\n  });\n\n  it('should create as many rows as needed by array of objects', () => {\n    handsontable({\n      minRows: 6,\n      data: arrayOfObjects()\n    });\n\n    expect(getCell(9, 1).innerHTML).toEqual('Eve');\n  });\n\n  // https://github.com/handsontable/handsontable/pull/233\n  it('should not invoke the cells callback multiple times with the same row/col (without overlays)', () => {\n    var cellsSpy = jasmine.createSpy('cellsSpy');\n\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colWidths: [90, 90, 90, 90],\n      rowHeights: [23, 23, 23, 23],\n      cells: cellsSpy\n    });\n    //\n    expect(cellsSpy.calls.count()).toEqual(43);\n  });\n\n  it('should not invoke the cells callback multiple times with the same row/col (with overlays)', () => {\n    var cellsSpy = jasmine.createSpy('cellsSpy');\n\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true,\n      rowHeaders: true,\n      colWidths: [90, 90, 90, 90],\n      rowHeights: [90, 90, 90, 90],\n      cells: cellsSpy\n    });\n\n    expect(cellsSpy.calls.count()).toEqual(56);\n  });\n\n  it('should remove grid rows if new data source has less of them', () => {\n    var data1 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e'],\n      ['f'],\n      ['g'],\n      ['h']\n    ];\n\n    var data2 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e']\n    ];\n\n    handsontable({\n      data: data1,\n      rowHeaders: true,\n      colHeaders: true\n    });\n    selectCell(7, 0);\n    loadData(data2);\n\n    expect(countRows()).toBe(data2.length);\n    expect(getSelected()).toEqual([4, 0, 4, 0]);\n  });\n\n  it('should remove grid rows if new data source has less of them (with minSpareRows)', () => {\n    var data1 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e'],\n      ['f'],\n      ['g'],\n      ['h']\n    ];\n    var data2 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e']\n    ];\n\n    handsontable({\n      data: data1,\n      minSpareCols: 1,\n      minSpareRows: 1,\n      rowHeaders: true,\n      colHeaders: true\n    });\n    selectCell(8, 0);\n    loadData(data2);\n\n    expect(countRows()).toBe(6); // +1 because of minSpareRows\n    expect(getSelected()).toEqual([5, 0, 5, 0]);\n  });\n\n  it('loading empty data should remove all rows', () => {\n    var data1 = [\n      ['a'],\n      ['b'],\n      ['c'],\n      ['d'],\n      ['e'],\n      ['f'],\n      ['g'],\n      ['h']\n    ];\n\n    var data2 = [];\n\n    handsontable({\n      data: data1,\n      rowHeaders: true,\n      colHeaders: true\n    });\n    selectCell(7, 0);\n    loadData(data2);\n\n    expect(countRows()).toBe(0);\n    expect(getSelected()).toBe(void 0);\n  });\n\n  it('should only have as many columns as in settings', () => {\n    var data1 = arrayOfArrays();\n\n    handsontable({\n      data: data1,\n      columns: [\n        { data: 1 },\n        { data: 3 }\n      ]\n    });\n\n    expect(countCols()).toBe(2);\n  });\n\n  it('should only have as many columns as in settings when columns is a function', () => {\n    var data1 = arrayOfArrays();\n\n    handsontable({\n      data: data1,\n      columns(column) {\n        var colMeta = {\n          data: column\n        };\n\n        if ([1, 3].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(countCols()).toBe(2);\n  });\n\n  it('should throw error when trying to load a string (constructor)', () => {\n    var errors = 0;\n\n    try {\n      handsontable({\n        data: 'string'\n      });\n    } catch (e) {\n      errors++;\n    }\n\n    expect(errors).toBe(1);\n  });\n\n  it('should throw error when trying to load a string (loadData)', () => {\n    var errors = 0;\n\n    try {\n      handsontable();\n      loadData('string');\n    } catch (e) {\n      errors++;\n    }\n\n    expect(errors).toBe(1);\n  });\n\n  it('should load Backbone Collection as data source', () => {\n    // code borrowed from demo/backbone.js\n\n    var CarModel = Backbone.Model.extend({});\n\n    var CarCollection = Backbone.Collection.extend({\n      model: CarModel,\n      // Backbone.Collection doesn't support `splice`, yet! Easy to add.\n      splice: hackedSplice\n    });\n    var cars = new CarCollection();\n\n    cars.add([\n      {make: 'Dodge', model: 'Ram', year: 2012, weight: 6811},\n      {make: 'Toyota', model: 'Camry', year: 2012, weight: 3190},\n      {make: 'Smart', model: 'Fortwo', year: 2012, weight: 1808}\n    ]);\n\n    handsontable({\n      data: cars,\n      columns: [\n        attr('make'),\n        attr('model'),\n        attr('year')\n      ]\n    });\n\n    // use the \"good\" Collection methods to emulate Array.splice\n    function hackedSplice(index, howMany /* model1, ... modelN */) {\n      var args = _.toArray(arguments).slice(2).concat({at: index}),\n        removed = this.models.slice(index, index + howMany);\n      this.remove(removed).add.apply(this, args);\n\n      return removed;\n    }\n\n    // normally, you'd get these from the server with .fetch()\n    function attr(attr) {\n      // this lets us remember `attr` for when when it is get/set\n      return {\n        data(car, value) {\n          if (_.isUndefined(value)) {\n            return car.get(attr);\n          }\n          car.set(attr, value);\n        }\n      };\n    }\n\n    expect(countRows()).toBe(3);\n  });\n\n  it('should load Backbone Collection as data source when columns is a function', () => {\n    // code borrowed from demo/backbone.js\n\n    var CarModel = Backbone.Model.extend({});\n\n    var CarCollection = Backbone.Collection.extend({\n      model: CarModel,\n      // Backbone.Collection doesn't support `splice`, yet! Easy to add.\n      splice: hackedSplice\n    });\n    var cars = new CarCollection();\n\n    cars.add([\n      {make: 'Dodge', model: 'Ram', year: 2012, weight: 6811},\n      {make: 'Toyota', model: 'Camry', year: 2012, weight: 3190},\n      {make: 'Smart', model: 'Fortwo', year: 2012, weight: 1808}\n    ]);\n\n    handsontable({\n      data: cars,\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = attr('make');\n        } else if (column === 1) {\n          colMeta = attr('model');\n        } else if (column === 2) {\n          colMeta = attr('year');\n        }\n\n        return colMeta;\n      }\n    });\n\n    // use the \"good\" Collection methods to emulate Array.splice\n    function hackedSplice(index, howMany /* model1, ... modelN */) {\n      var args = _.toArray(arguments).slice(2).concat({at: index}),\n        removed = this.models.slice(index, index + howMany);\n      this.remove(removed).add.apply(this, args);\n\n      return removed;\n    }\n\n    // normally, you'd get these from the server with .fetch()\n    function attr(attr) {\n      // this lets us remember `attr` for when when it is get/set\n      return {\n        data(car, value) {\n          if (_.isUndefined(value)) {\n            return car.get(attr);\n          }\n\n          car.set(attr, value);\n        }\n      };\n    }\n\n    expect(countRows()).toBe(3);\n  });\n\n  it('should clear cell properties after loadData', () => {\n    handsontable();\n    loadData(arrayOfArrays());\n\n    getCellMeta(0, 0).foo = 'bar';\n\n    expect(getCellMeta(0, 0).foo).toEqual('bar');\n\n    loadData(arrayOfArrays());\n\n    expect(getCellMeta(0, 0).foo).toBeUndefined();\n  });\n\n  it('should clear cell properties after loadData, but before rendering new data', function() {\n    handsontable();\n    loadData(arrayOfArrays());\n\n    getCellMeta(0, 0).valid = false;\n    render();\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n\n    loadData(arrayOfArrays());\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);\n\n  });\n\n  // https://github.com/handsontable/handsontable/issues/1700\n  // can't edit anything after starting editing cell with no nested object\n  it('should correct behave with cell with no nested object data source corresponding to column mapping', () => {\n\n    var objectData = [\n      {id: 1, user: {name: {first: 'Ted', last: 'Right'}}},\n      {id: 2, user: {name: {}}},\n      {id: 3}\n    ];\n\n    handsontable({\n      data: objectData,\n      columns: [\n        {data: 'id'},\n        {data: 'user.name.first'},\n        {data: 'user.name.last'}\n      ]\n    });\n\n    mouseDoubleClick(getCell(1, 1));\n    document.activeElement.value = 'Harry';\n    deselectCell();\n    expect(objectData[1].user.name.first).toEqual('Harry');\n\n    mouseDoubleClick(getCell(2, 1));\n    document.activeElement.value = 'Barry';\n    deselectCell();\n    expect(objectData[2].user.name.first).toEqual('Barry');\n  });\n\n  it('should correct behave with cell with no nested object data source corresponding to column mapping when columns is a function', () => {\n\n    var objectData = [\n      {id: 1, user: {name: {first: 'Ted', last: 'Right'}}},\n      {id: 2, user: {name: {}}},\n      {id: 3}\n    ];\n\n    handsontable({\n      data: objectData,\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {data: 'id'};\n\n        } else if (column === 1) {\n          colMeta = {data: 'user.name.first'};\n\n        } else if (column === 2) {\n          colMeta = {data: 'user.name.last'};\n        }\n\n        return colMeta;\n      }\n    });\n\n    mouseDoubleClick(getCell(1, 1));\n    document.activeElement.value = 'Harry';\n    deselectCell();\n    expect(objectData[1].user.name.first).toEqual('Harry');\n\n    mouseDoubleClick(getCell(2, 1));\n    document.activeElement.value = 'Barry';\n    deselectCell();\n    expect(objectData[2].user.name.first).toEqual('Barry');\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_loadData.spec.js","describe('Core_navigation', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should move to the next cell', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(0, 0);\n    keyDown('arrow_right');\n\n    expect(getSelected()).toEqual([0, 1, 0, 1]);\n  });\n\n  it('should move to the previous cell', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(1, 2);\n    keyDown('arrow_left');\n\n    expect(getSelected()).toEqual([1, 1, 1, 1]);\n  });\n\n  it('should move to the cell above', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(1, 2);\n    keyDown('arrow_up');\n\n    expect(getSelected()).toEqual([0, 2, 0, 2]);\n  });\n\n  it('should move to the cell below', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    selectCell(1, 2);\n    keyDown('arrow_down');\n\n    expect(getSelected()).toEqual([2, 2, 2, 2]);\n  });\n\n  describe('autoWrap disabled', () => {\n    it('should NOT move to the next cell, if already at the last cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: false\n      });\n\n      selectCell(0, 4);\n      keyDown('arrow_right');\n\n      expect(getSelected()).toEqual([0, 4, 0, 4]);\n    });\n\n    it('should NOT move to the previous cell, if already at the first cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: false\n      });\n\n      selectCell(1, 0);\n      keyDown('arrow_left');\n\n      expect(getSelected()).toEqual([1, 0, 1, 0]);\n    });\n\n    it('should NOT move to the cell below, if already at the last cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: false\n      });\n\n      selectCell(4, 0);\n      keyDown('arrow_down');\n\n      expect(getSelected()).toEqual([4, 0, 4, 0]);\n    });\n\n    it('should NOT move to the cell above, if already at the first cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: false\n      });\n\n      selectCell(0, 1);\n      keyDown('arrow_up');\n\n      expect(getSelected()).toEqual([0, 1, 0, 1]);\n    });\n\n  });\n\n  describe('autoWrap enabled', () => {\n    it('should move to the first cell of the next row, if already at the last cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(0, 4);\n      keyDown('arrow_right');\n\n      expect(getSelected()).toEqual([1, 0, 1, 0]);\n    });\n\n    it('should move to the first cell of the previous row, if already at the first cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(1, 0);\n      keyDown('arrow_left');\n\n      expect(getSelected()).toEqual([0, 4, 0, 4]);\n    });\n\n    it('should move to the first cell of the next column, if already at the last cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(4, 1);\n      keyDown('arrow_down');\n\n      expect(getSelected()).toEqual([0, 2, 0, 2]);\n    });\n\n    it('should move to the last cell of the previous column, if already at the first cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(0, 1);\n      keyDown('arrow_up');\n\n      expect(getSelected()).toEqual([4, 0, 4, 0]);\n    });\n\n    it('should move to the first cell of the first row, after trying to get to the next cell in row, being already at the last cell in table', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(4, 4);\n      keyDown('arrow_right');\n\n      expect(getSelected()).toEqual([0, 0, 0, 0]);\n    });\n\n    it('should move to the first cell of the first row, after trying to get to the next cell in column, being already at the last cell in table', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(4, 4);\n      keyDown('arrow_down');\n\n      expect(getSelected()).toEqual([0, 0, 0, 0]);\n    });\n\n    it('should move to the last cell of the last row, after trying to get to the previous cell in row, being already at the first cell in table', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(0, 0);\n      keyDown('arrow_left');\n\n      expect(getSelected()).toEqual([4, 4, 4, 4]);\n    });\n\n    it('should move to the last cell of the last row, after trying to get to the previous cell in column, being already at the first cell in table', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(0, 0);\n      keyDown('arrow_up');\n\n      expect(getSelected()).toEqual([4, 4, 4, 4]);\n    });\n\n    it('should traverse whole table by constantly selecting next cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(0, 0);\n\n      for (var row = 0, rlen = countRows(); row < rlen; row++) {\n        for (var col = 0, clen = countCols(); col < clen; col++) {\n          expect(getSelected()).toEqual([row, col, row, col]);\n          keyDown('arrow_right');\n        }\n      }\n\n      expect(getSelected()).toEqual([0, 0, 0, 0]);\n    });\n\n    it('should traverse whole table by constantly selecting previous cell in row', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapRow: true\n      });\n\n      selectCell(4, 4);\n\n      for (var row = countRows() - 1; row >= 0; row--) {\n        for (var col = countCols() - 1; col >= 0; col--) {\n          expect(getSelected()).toEqual([row, col, row, col]);\n          keyDown('arrow_left');\n        }\n      }\n\n      expect(getSelected()).toEqual([4, 4, 4, 4]);\n    });\n\n    it('should traverse whole table by constantly selecting next cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(0, 0);\n\n      for (var col = 0, clen = countCols(); col < clen; col++) {\n        for (var row = 0, rlen = countRows(); row < rlen; row++) {\n          expect(getSelected()).toEqual([row, col, row, col]);\n          keyDown('arrow_down');\n        }\n      }\n\n      expect(getSelected()).toEqual([0, 0, 0, 0]);\n    });\n\n    it('should traverse whole table by constantly selecting previous cell in column', () => {\n      handsontable({\n        startRows: 5,\n        startCols: 5,\n        autoWrapCol: true\n      });\n\n      selectCell(4, 4);\n\n      for (var col = countCols() - 1; col >= 0; col--) {\n        for (var row = countRows() - 1; row >= 0; row--) {\n          expect(getSelected()).toEqual([row, col, row, col]);\n          keyDown('arrow_up');\n        }\n      }\n\n      expect(getSelected()).toEqual([4, 4, 4, 4]);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_navigation.spec.js","describe('Core_onKeyDown', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should advance to next cell when TAB is pressed', () => {\n    // https://github.com/handsontable/handsontable/issues/151\n    handsontable();\n    selectCell(0, 0);\n    keyDownUp('tab');\n    expect(getSelected()).toEqual([0, 1, 0, 1]);\n  });\n\n  it('should advance to previous cell when shift+TAB is pressed', () => {\n    handsontable();\n    selectCell(1, 1);\n    keyDownUp('shift+tab');\n    expect(getSelected()).toEqual([1, 0, 1, 0]);\n  });\n\n  describe('while editing (quick edit mode)', () => {\n    it('should finish editing and advance to next cell when TAB is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x'); // value to cell trigger quick edit mode\n      keyProxy().val('Ted');\n      keyDownUp('tab');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([1, 2, 1, 2]);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x'); // value to cell trigger quick edit mode\n      keyProxy().val('Ted');\n      keyDownUp('enter');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([2, 1, 2, 1]);\n    });\n\n    it('should finish editing and advance to higher cell when shift+enter is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x'); // trigger quick edit mode\n      keyProxy().val('Ted');\n      keyDownUp('shift+enter');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([0, 1, 0, 1]);\n    });\n\n    it('should finish editing and advance to lower cell when down arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_down');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([2, 1, 2, 1]);\n    });\n\n    it('should finish editing and advance to higher cell when up arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_up');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([0, 1, 0, 1]);\n    });\n\n    it('should finish editing and advance to right cell when right arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([1, 4, 1, 4]);\n    });\n\n    it('should finish editing and advance to left cell when left arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n      Handsontable.dom.setCaretPosition(keyProxy()[0], 0, 0);\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([1, 0, 1, 0]);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed (with sync validator)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        validator(val, cb) {\n          cb(true);\n        },\n        afterValidate: onAfterValidate\n      });\n\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n        expect(getData()[1][1]).toEqual('Ted');\n        expect(getSelected()).toEqual([2, 1, 2, 1]);\n        done();\n      }, 200);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed (with async validator)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        validator(val, cb) {\n          setTimeout(() => {\n            cb(true);\n          }, 10);\n        },\n        afterValidate: onAfterValidate\n      });\n      selectCell(1, 1);\n\n      keyDownUp('x');\n      keyProxy().val('Ted');\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n        expect(getData()[1][1]).toEqual('Ted');\n        expect(getSelected()).toEqual([2, 1, 2, 1]);\n        done();\n      }, 200);\n    });\n  });\n\n  describe('while editing (full edit mode)', () => {\n    it('should finish editing and advance to next cell when TAB is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('tab');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([1, 2, 1, 2]);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('enter');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([2, 1, 2, 1]);\n    });\n\n    it('should finish editing and advance to higher cell when shift+enter is pressed', () => {\n      // https://github.com/handsontable/handsontable/issues/215\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('shift+enter');\n      expect(getData()[1][1]).toEqual('Ted');\n      expect(getSelected()).toEqual([0, 1, 0, 1]);\n    });\n\n    it('shouldn\\'t finish editing and advance to lower cell when down arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_down');\n      expect(getData()[1][1]).toEqual(null);\n      expect(getSelected()).toEqual([1, 1, 1, 1]);\n    });\n\n    it('shouldn\\'t finish editing and advance to higher cell when up arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_up');\n      expect(getData()[1][1]).toEqual(null);\n      expect(getSelected()).toEqual([1, 1, 1, 1]);\n    });\n\n    it('shouldn\\'t finish editing and advance to right cell when right arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      keyDownUp('arrow_right');\n      expect(getData()[1][1]).toEqual(null);\n      expect(getSelected()).toEqual([1, 1, 1, 1]);\n    });\n\n    it('shouldn\\'t finish editing and advance to left cell when left arrow is pressed', () => {\n      handsontable();\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      keyDownUp('arrow_left');\n      expect(getData()[1][1]).toEqual(null);\n      expect(getSelected()).toEqual([1, 1, 1, 1]);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed (with sync validator)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        validator(val, cb) {\n          cb(true);\n        },\n        afterValidate: onAfterValidate\n      });\n\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n        expect(getData()[1][1]).toEqual('Ted');\n        expect(getSelected()).toEqual([2, 1, 2, 1]);\n        done();\n      }, 200);\n    });\n\n    it('should finish editing and advance to lower cell when enter is pressed (with async validator)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        validator(val, cb) {\n          setTimeout(() => {\n            cb(true);\n          }, 10);\n        },\n        afterValidate: onAfterValidate\n      });\n      selectCell(1, 1);\n\n      keyDownUp('enter');\n      keyProxy().val('Ted');\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalled();\n        expect(getData()[1][1]).toEqual('Ted');\n        expect(getSelected()).toEqual([2, 1, 2, 1]);\n        done();\n      }, 200);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_onKeyDown.spec.js","describe('Core_populateFromArray', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda', 'Mix'],\n      ['2008', 10, 11, 12, 13, {a: 1, b: 2}],\n      ['2009', 20, 11, 14, 13, {a: 1, b: 2}],\n      ['2010', 30, 15, 12, 13, {a: 1, b: 2}]\n    ];\n  };\n\n  it('should call onChange callback', () => {\n    var output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(0, 0, [['test', 'test'], ['test', 'test']], 1, 1);\n\n    expect(output).toEqual([[0, 0, '', 'test'], [0, 1, 'Kia', 'test'], [1, 0, '2008', 'test'], [1, 1, 10, 'test']]);\n  });\n\n  it('should populate single value for whole selection', () => {\n    var output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(0, 0, [['test']], 3, 0);\n\n    expect(output).toEqual([[0, 0, '', 'test'], [1, 0, '2008', 'test'], [2, 0, '2009', 'test'], [3, 0, '2010', 'test']]);\n  });\n\n  it('should populate value for whole selection only if populated data isn\\'t an array', () => {\n    var output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(0, 0, [['test'], [[1, 2, 3]]], 3, 0);\n\n    expect(output).toEqual([[0, 0, '', 'test'], [2, 0, '2009', 'test']]);\n  });\n\n  it('should populate value for whole selection only if populated data isn\\'t an object', () => {\n    var output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(0, 0, [['test'], [{test: 1}]], 3, 0);\n\n    expect(output).toEqual([[0, 0, '', 'test'], [2, 0, '2009', 'test']]);\n  });\n\n  it('shouldn\\'t populate value if original value doesn\\'t have the same data structure', () => {\n    var output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      }\n    });\n    populateFromArray(1, 3, [['test']], 1, 5);\n\n    expect(output).toEqual([[1, 3, 12, 'test'], [1, 4, 13, 'test']]);\n  });\n\n  it('should shift values down', () => {\n    var output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      },\n      minSpareRows: 1\n    });\n    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 2, 2, null, 'shift_down');\n\n    expect(getData()).toEqual([\n      ['test', 'test2', 'test', 'Toyota', 'Honda', 'Mix'],\n      ['test3', 'test4', 'test3', 12, 13, { a: 1, b: 2 }],\n      ['test', 'test2', 'test', 14, 13, { a: 1, b: 2 }],\n      ['', 'Kia', 'Nissan', 12, 13, { a: 1, b: 2 }],\n      ['2008', 10, 11, null, null, null],\n      ['2009', 20, 11, null, null, null],\n      ['2010', 30, 15, null, null, null],\n      [null, null, null, null, null, null]\n    ]);\n  });\n\n  it('should shift values right', () => {\n    var output = null;\n\n    handsontable({\n      data: arrayOfArrays(),\n      afterChange(changes) {\n        output = changes;\n      },\n      minSpareCols: 1\n    });\n    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 2, 2, null, 'shift_right');\n\n    expect(getData()).toEqual([\n      ['test', 'test2', 'test', '', 'Kia', 'Nissan', 'Toyota', 'Honda', 'Mix', null],\n      ['test3', 'test4', 'test3', '2008', 10, {a: 1, b: 2}, 12, 13, null, null],\n      ['test', 'test2', 'test', '2009', 20, {a: 1, b: 2}, 14, 13, null, null],\n      ['2010', 30, 15, 12, 13, {a: 1, b: 2}, null, null, null, null]\n    ]);\n  });\n\n  it('should run beforeAutofillInsidePopulate hook for each inserted value', () => {\n    var called = 0;\n\n    var hot = handsontable({\n      data: arrayOfArrays()\n    });\n\n    hot.addHook('beforeAutofillInsidePopulate', (index) => {\n      called++;\n    });\n\n    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 1, 1, 'Autofill.fill', 'overwrite');\n\n    expect(called).toEqual(4);\n  });\n\n  it('should run beforeAutofillInsidePopulate hook and could change cell data before insert if returned object with value property', () => {\n\n    var hot = handsontable({\n      data: arrayOfArrays()\n    });\n\n    hot.addHook('beforeAutofillInsidePopulate', (index) => ({\n      value: 'my_test'\n    }));\n\n    populateFromArray(0, 0, [['test', 'test2'], ['test3', 'test4']], 1, 1, 'Autofill.fill', 'overwrite');\n\n    expect(getDataAtCell(0, 0)).toEqual('my_test');\n  });\n\n  it('should populate 1 row from 2 selected rows', () => {\n    var hot = handsontable({\n      data: arrayOfArrays()\n    });\n\n    populateFromArray(2, 0, [['A1'], ['A2']], 2, 0, 'autofill', null, 'down', [[0]]);\n\n    expect(getDataAtCell(2, 0)).toEqual('A1');\n    expect(getDataAtCell(3, 0)).toEqual('2010');\n  });\n\n  it('should populate 1 column from 2 selected columns`', () => {\n    var hot = handsontable({\n      data: arrayOfArrays()\n    });\n\n    populateFromArray(0, 2, [['A1', 'A2']], 0, 2, 'autofill', null, 'right', [[0]]);\n\n    expect(getDataAtCell(0, 2)).toEqual('A1');\n    expect(getDataAtCell(0, 3)).toEqual('Toyota');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_populateFromArray.spec.js","describe('Core_reCreate', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should correctly re-render corner header when there is multiline content', () => {\n    var settings = {\n      rowHeaders: true,\n      colHeaders(col) {\n        return `Column<br>${col}`;\n      }\n    };\n    handsontable(settings);\n    destroy();\n    handsontable(settings);\n\n    expect(getTopLeftClone().width()).toBe(54);\n    expect(getTopLeftClone().height()).toBe(51);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_reCreate.spec.js","describe('Core_removeCellMeta', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should remove meta for cell', () => {\n    handsontable({\n      data: [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [0, 9, 8, 7]\n      ]\n    });\n    var border = {\n      top: {\n\n      },\n      left: {\n\n      }\n    };\n\n    setCellMeta(0, 0, 'borders', border);\n    expect(getCellMeta(0, 0).borders).toEqual(border);\n\n    removeCellMeta(0, 0, 'borders');\n    expect(getCellMeta(0, 0).borders).toBeUndefined();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_removeCellMeta.spec.js","describe('Core_render', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('all cells should get green background', function() {\n    function greenCell(instance, td, row, col, prop, value, cellProperties) {\n      Handsontable.renderers.TextRenderer.apply(this, arguments);\n      td.style.backgroundColor = 'green';\n\n    }\n\n    handsontable({\n      data: [\n        ['a', 'b'],\n        ['c', 'd']\n      ],\n      minRows: 4,\n      minCols: 4,\n      minSpareRows: 4,\n      minSpareCols: 4,\n      cells() {\n        return {\n          renderer: greenCell\n        };\n      }\n    });\n\n    var $tds = this.$container.find('.htCore tbody td');\n    $tds.each(function() {\n      expect(this.style.backgroundColor).toEqual('green');\n    });\n  });\n\n  it('render should update border dimensions', function() {\n    var data = [\n      ['a', 'b'],\n      ['c', 'd']\n    ];\n\n    handsontable({\n      data,\n      minRows: 4,\n      minCols: 4,\n      minSpareRows: 4,\n      minSpareCols: 4\n    });\n\n    selectCell(1, 1);\n    data[1][1] = 'dddddddddddddddddddd';\n    render();\n\n    var $td = this.$container.find('.htCore tbody tr:eq(1) td:eq(1)');\n    expect(this.$container.find('.wtBorder.current').width()).toBeGreaterThan($td.width());\n  });\n\n  it('should not render table twice', () => {\n    var counter = 0;\n\n    handsontable({\n      data: [\n        ['Joe Red']\n      ],\n      afterRender() {\n        counter++;\n      }\n    });\n    populateFromArray(0, 0, [['t', 'e', 's', 't']]);\n\n    expect(counter).toEqual(2); // 1 from load and 1 from populateFromArray\n  });\n\n  it('should run afterRenderer hook', function() {\n    var lastCellProperties;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      afterRenderer(td, row, col, prop, value, cellProperties) {\n        td.innerHTML = 'Changed by plugin';\n\n        if (!cellProperties) {\n          throw new Error();\n        }\n        lastCellProperties = cellProperties;\n      }\n    });\n\n    expect(this.$container.find('td:eq(0)')[0].innerHTML).toEqual('Changed by plugin');\n    expect(lastCellProperties.row).toEqual(1);\n    expect(lastCellProperties.col).toEqual(4);\n  });\n\n  it('should run beforeRenderer hook', function() {\n    var lastCellProperties;\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeRenderer(td, row, col, prop, value, cellProperties) {\n        td.innerHTML = 'Changed by plugin';\n        lastCellProperties = cellProperties;\n      }\n    });\n\n    // Value is overwritten by text renderer\n    expect(this.$container.find('td:eq(0)')[0].innerHTML).toEqual('1');\n    expect(lastCellProperties.row).toEqual(1);\n    expect(lastCellProperties.col).toEqual(4);\n  });\n\n  it('should reflect changes applied in beforeRenderer into afterRenderer', () => {\n    var afterRenderer = jasmine.createSpy();\n\n    handsontable({\n      data: [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]],\n      beforeRenderer(td, row, col, prop, value, cellProperties) {\n        cellProperties.foo = 'bar';\n      },\n      afterRenderer,\n    });\n\n    expect(afterRenderer.calls.count()).toBe(10);\n    expect(afterRenderer.calls.argsFor(0)[0] instanceof HTMLTableCellElement).toBe(true);\n    expect(afterRenderer.calls.argsFor(0)[1]).toBe(0);\n    expect(afterRenderer.calls.argsFor(0)[2]).toBe(0);\n    expect(afterRenderer.calls.argsFor(0)[3]).toBe(0);\n    expect(afterRenderer.calls.argsFor(0)[4]).toBe(1);\n    expect(afterRenderer.calls.argsFor(0)[5].foo).toBe('bar');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_render.spec.js","describe('Core_selection', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should call onSelection callback', () => {\n    var output = null;\n\n    handsontable({\n      afterSelection(r, c) {\n        output = [r, c];\n      }\n    });\n    selectCell(1, 2);\n\n    expect(output[0]).toEqual(1);\n    expect(output[1]).toEqual(2);\n  });\n\n  it('should trigger selection event', () => {\n    var output = null;\n\n    handsontable();\n    Handsontable.hooks.add('afterSelection', (r, c) => {\n      output = [r, c];\n    });\n    selectCell(1, 2);\n\n    expect(output[0]).toEqual(1);\n    expect(output[1]).toEqual(2);\n  });\n\n  it('this.rootElement should point to handsontable rootElement (onSelection)', function() {\n    var output = null;\n\n    handsontable({\n      afterSelection() {\n        output = this.rootElement;\n      }\n    });\n    selectCell(0, 0);\n\n    expect(output).toEqual(this.$container[0]);\n  });\n\n  it('this.rootElement should point to handsontable rootElement (onSelectionByProp)', function() {\n    var output = null;\n\n    handsontable({\n      afterSelectionByProp() {\n        output = this.rootElement;\n      }\n    });\n    selectCell(0, 0);\n\n    expect(output).toEqual(this.$container[0]);\n  });\n\n  it('should focus external textarea when clicked during editing', () => {\n    var textarea = $('<input type=\"text\">').prependTo($('body'));\n\n    handsontable();\n    selectCell(0, 0);\n\n    keyDown('enter');\n    // $(\"html\").triggerHandler('mouseup');\n    $('html').simulate('mouseup');\n    textarea.focus();\n\n    expect(document.activeElement).toBe(textarea[0]);\n    textarea.remove();\n  });\n\n  it('should deselect currently selected cell', () => {\n    handsontable();\n    selectCell(0, 0);\n\n    $('html').simulate('mousedown');\n\n    expect(getSelected()).toBeUndefined();\n  });\n\n  it('should not deselect the currently selected cell after clicking on a scrollbar', () => {\n    var hot = handsontable({\n      outsideClickDeselects: false,\n      minRows: 20,\n      minCols: 2,\n      width: 400,\n      height: 100\n    });\n    selectCell(0, 0);\n\n    var holderBoundingBox = hot.view.wt.wtTable.holder.getBoundingClientRect(),\n      verticalScrollbarCoords = {\n        x: holderBoundingBox.left + holderBoundingBox.width - 3,\n        y: holderBoundingBox.top + (holderBoundingBox.height / 2)\n      },\n      horizontalScrollbarCoords = {\n        x: holderBoundingBox.left + (holderBoundingBox.width / 2),\n        y: holderBoundingBox.top + holderBoundingBox.height - 3\n      };\n\n    $(hot.view.wt.wtTable.holder).simulate('mousedown', {\n      clientX: verticalScrollbarCoords.x,\n      clientY: verticalScrollbarCoords.y\n    });\n\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n\n    $(hot.view.wt.wtTable.holder).simulate('mousedown', {\n      clientX: horizontalScrollbarCoords.x,\n      clientY: horizontalScrollbarCoords.y\n    });\n\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n  });\n\n  it('should not deselect currently selected cell', () => {\n    handsontable({\n      outsideClickDeselects: false\n    });\n    selectCell(0, 0);\n\n    $('html').simulate('mousedown');\n\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n  });\n\n  it('should allow to focus on external input and hold current selection informations', () => {\n    var textarea = $('<input id=\"test_textarea\" type=\"text\">').prependTo($('body'));\n\n    handsontable({\n      outsideClickDeselects: false\n    });\n    selectCell(0, 0);\n\n    textarea.simulate('mousedown');\n    textarea.focus();\n\n    expect(document.activeElement.id).toEqual('test_textarea');\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n    textarea.remove();\n  });\n\n  it('should allow to type in external input while holding current selection information', () => {\n    var textarea = $('<textarea id=\"test_textarea\"></textarea>').prependTo($('body'));\n    var keyPressed;\n    handsontable({\n      outsideClickDeselects: false\n    });\n    selectCell(0, 0);\n\n    textarea.focus();\n    textarea.simulate('mousedown');\n    textarea.simulate('mouseup');\n\n    textarea.on('keydown', (event) => {\n      keyPressed = event.keyCode;\n    });\n\n    var LETTER_A_KEY = 97;\n\n    $(document.activeElement).simulate('keydown', {\n      keyCode: LETTER_A_KEY\n    });\n\n    // textarea should receive the event and be an active element\n    expect(keyPressed).toEqual(LETTER_A_KEY);\n    expect(document.activeElement).toBe(document.getElementById('test_textarea'));\n\n    // should preserve selection, close editor and save changes\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n    expect(getDataAtCell(0, 0)).toBeNull();\n\n    textarea.remove();\n  });\n\n  it('should allow to type in external input after opening cell editor', () => {\n    var textarea = $('<textarea id=\"test_textarea\"></textarea>').prependTo($('body'));\n    var keyPressed;\n    handsontable({\n      outsideClickDeselects: false\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'Foo';\n\n    textarea.focus();\n    textarea.simulate('mousedown');\n    textarea.simulate('mouseup');\n\n    textarea.on('keydown', (event) => {\n      keyPressed = event.keyCode;\n    });\n\n    var LETTER_A_KEY = 97;\n\n    $(document.activeElement).simulate('keydown', {\n      keyCode: LETTER_A_KEY\n    });\n\n    // textarea should receive the event and be an active element\n    expect(keyPressed).toEqual(LETTER_A_KEY);\n    expect(document.activeElement).toBe(document.getElementById('test_textarea'));\n\n    // should preserve selection, close editor and save changes\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n    expect(getDataAtCell(0, 0)).toEqual('Foo');\n\n    textarea.remove();\n  });\n\n  it('should deselect on outside click if outsideClickDeselects is a function that returns true', () => {\n    var textarea = $('<textarea id=\"test_textarea\"></textarea>').prependTo($('body'));\n    var keyPressed;\n    handsontable({\n      outsideClickDeselects: () => true,\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'Foo';\n\n    textarea.focus();\n    textarea.simulate('mousedown');\n    textarea.simulate('mouseup');\n\n    textarea.on('keydown', (event) => {\n      keyPressed = event.keyCode;\n    });\n\n    var LETTER_A_KEY = 97;\n\n    $(document.activeElement).simulate('keydown', {\n      keyCode: LETTER_A_KEY\n    });\n\n    // textarea should receive the event and be an active element\n    expect(keyPressed).toEqual(LETTER_A_KEY);\n    expect(document.activeElement).toBe(document.getElementById('test_textarea'));\n\n    // should NOT preserve selection\n    expect(getSelected()).toEqual(undefined);\n    expect(getDataAtCell(0, 0)).toEqual('Foo');\n\n    textarea.remove();\n  });\n\n  it('should not deselect on outside click if outsideClickDeselects is a function that returns false', () => {\n    var textarea = $('<textarea id=\"test_textarea\"></textarea>').prependTo($('body'));\n    var keyPressed;\n    handsontable({\n      outsideClickDeselects: () => false,\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'Foo';\n\n    textarea.focus();\n    textarea.simulate('mousedown');\n    textarea.simulate('mouseup');\n\n    textarea.on('keydown', (event) => {\n      keyPressed = event.keyCode;\n    });\n\n    var LETTER_A_KEY = 97;\n\n    $(document.activeElement).simulate('keydown', {\n      keyCode: LETTER_A_KEY\n    });\n\n    // textarea should receive the event and be an active element\n    expect(keyPressed).toEqual(LETTER_A_KEY);\n    expect(document.activeElement).toBe(document.getElementById('test_textarea'));\n\n    // should preserve selection, close editor and save changes\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n    expect(getDataAtCell(0, 0)).toEqual('Foo');\n\n    textarea.remove();\n  });\n\n  it('should fix start range if provided is out of bounds (to the left)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 0);\n    keyDownUp('arrow_left');\n\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n  });\n\n  it('should fix start range if provided is out of bounds (to the top)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 0);\n    keyDownUp('arrow_up');\n\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n  });\n\n  it('should fix start range if provided is out of bounds (to the right)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 4);\n    keyDownUp('arrow_right');\n\n    expect(getSelected()).toEqual([0, 4, 0, 4]);\n  });\n\n  it('should fix start range if provided is out of bounds (to the bottom)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(4, 0);\n    keyDownUp('arrow_down');\n\n    expect(getSelected()).toEqual([4, 0, 4, 0]);\n  });\n\n  it('should fix end range if provided is out of bounds (to the left)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 1);\n    keyDownUp('shift+arrow_left');\n    keyDownUp('shift+arrow_left');\n\n    expect(getSelected()).toEqual([0, 1, 0, 0]);\n  });\n\n  it('should fix end range if provided is out of bounds (to the top)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(1, 0);\n    keyDownUp('shift+arrow_up');\n    keyDownUp('shift+arrow_up');\n\n    expect(getSelected()).toEqual([1, 0, 0, 0]);\n  });\n\n  it('should fix end range if provided is out of bounds (to the right)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 3);\n    keyDownUp('shift+arrow_right');\n    keyDownUp('shift+arrow_right');\n\n    expect(getSelected()).toEqual([0, 3, 0, 4]);\n  });\n\n  it('should fix end range if provided is out of bounds (to the bottom)', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(3, 0);\n    keyDownUp('shift+arrow_down');\n    keyDownUp('shift+arrow_down');\n    keyDownUp('shift+arrow_down');\n\n    expect(getSelected()).toEqual([3, 0, 4, 0]);\n  });\n\n  it('should select multiple cells', () => {\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(3, 0, 4, 1);\n\n    expect(getSelected()).toEqual([3, 0, 4, 1]);\n  });\n\n  it('should call onSelectionEnd as many times as onSelection when `selectCell` is called', () => {\n    var tick = 0,\n      tickEnd = 0;\n\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      afterSelection() {\n        tick++;\n      },\n      afterSelectionEnd() {\n        tickEnd++;\n      }\n    });\n    selectCell(3, 0);\n    selectCell(1, 1);\n\n    expect(tick).toEqual(2);\n    expect(tickEnd).toEqual(2);\n  });\n\n  it('should call onSelectionEnd when user finishes selection by releasing SHIFT key (3 times)', () => {\n    var tick = 0;\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      afterSelectionEnd() {\n        tick++;\n      }\n    });\n    selectCell(3, 0); // makes tick++\n    keyDownUp('shift+arrow_down'); // makes tick++\n    keyDownUp('shift+arrow_down'); // makes tick++\n    keyDownUp('shift+arrow_down'); // makes tick++\n\n    expect(getSelected()).toEqual([3, 0, 4, 0]);\n    expect(tick).toEqual(4);\n  });\n\n  it('should call onSelectionEnd when user finishes selection by releasing SHIFT key (1 time)', () => {\n    var tick = 0;\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      afterSelectionEnd() {\n        tick++;\n      }\n    });\n    selectCell(3, 0); // makes tick++\n    keyDown('shift+arrow_down');\n    keyDown('shift+arrow_down');\n    keyDownUp('shift+arrow_down'); // makes tick++\n\n    expect(getSelected()).toEqual([3, 0, 4, 0]);\n    expect(tick).toEqual(2);\n  });\n\n  it('should select columns by click on header with SHIFT key', function() {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mousedown');\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mouseup');\n\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', {shiftKey: true});\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([0, 1, 4, 4]);\n\n  });\n\n  it('should select rows by click on header with SHIFT key', function() {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      rowHeaders: true\n    });\n\n    this.$container.find('.ht_clone_left tr:eq(1) th:eq(0)').simulate('mousedown');\n    this.$container.find('.ht_clone_left tr:eq(1) th:eq(0)').simulate('mouseup');\n\n    this.$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mousedown', {shiftKey: true});\n    this.$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([1, 0, 4, 4]);\n\n  });\n\n  it('should select columns by click on header with SHIFT key', function() {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mousedown');\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(1)').simulate('mouseup');\n\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', {shiftKey: true});\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([0, 1, 4, 4]);\n\n  });\n\n  it('should change selection after click on row header with SHIFT key', function() {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      rowHeaders: true\n    });\n\n    selectCell(1, 1, 3, 3);\n\n    this.$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mousedown', {shiftKey: true});\n    this.$container.find('.ht_clone_left tr:eq(4) th:eq(0)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([1, 0, 4, 4]);\n\n  });\n\n  it('should change selection after click on column header with SHIFT key', function() {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    selectCell(1, 1, 3, 3);\n\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mousedown', {shiftKey: true});\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(4)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([0, 1, 4, 4]);\n  });\n\n  it('should call onSelection while user selects cells with mouse; onSelectionEnd when user finishes selection', function() {\n    var tick = 0,\n      tickEnd = 0;\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      afterSelection() {\n        tick++;\n      },\n      afterSelectionEnd() {\n        tickEnd++;\n      }\n    });\n\n    this.$container.find('tr:eq(0) td:eq(0)').simulate('mousedown');\n    this.$container.find('tr:eq(0) td:eq(1)').simulate('mouseover');\n    this.$container.find('tr:eq(1) td:eq(3)').simulate('mouseover');\n\n    this.$container.find('tr:eq(1) td:eq(3)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([0, 0, 1, 3]);\n    expect(tick).toEqual(3);\n    expect(tickEnd).toEqual(1);\n  });\n\n  it('should properly select columns, when the user moves the cursor over column headers across two overlays', function() {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      fixedColumnsLeft: 2\n    });\n\n    this.$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mousedown');\n    this.$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseover');\n    this.$container.find('.ht_clone_top tr:eq(0) th:eq(2)').simulate('mouseover');\n    this.$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseover');\n    this.$container.find('.ht_clone_left tr:eq(0) th:eq(1)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([0, 1, 4, 1]);\n  });\n\n  it('should move focus to selected cell', () => {\n    var $input = $('<input>').appendTo(document.body);\n    handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    $input[0].focus();\n    selectCell(0, 0);\n\n    keyDownUp('enter');\n    expect(isEditorVisible()).toEqual(true);\n    $input.remove();\n  });\n\n  // This test should cover the #893 case, but it always passes. It seems like the keydown event (with CTRL key pressed) isn't delivered.\n  it('should not move focus from outside elements on CTRL keydown event, when no cell is selected', () => {\n    var $input = $('<input type=\"text\"/>');\n    $('body').append($input);\n\n    handsontable();\n\n    selectCell(0, 0);\n\n    expect(document.activeElement.nodeName).toBeInArray(['BODY', 'HTML']);\n\n    $input.focus();\n\n    expect(document.activeElement.nodeName).toBe('INPUT');\n\n    // var keyDownEvent = $.Event('keydown', {ctrlKey: true, metaKey: true});\n    // $input.trigger(keyDownEvent);\n\n    $input.simulate('keydown', {ctrlKey: true, metaKey: true});\n\n    expect(document.activeElement.nodeName).toBe('INPUT');\n\n    $input.remove();\n  });\n\n  it('should select the entire column after column header is clicked', function() {\n    var hot = handsontable({\n      width: 200,\n      height: 100,\n      startRows: 50,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    this.$container.find('thead th:eq(0)').simulate('mousedown');\n\n    expect(getSelected()).toEqual([0, 0, 49, 0]);\n    expect(hot.selection.selectedHeader.rows).toBe(false);\n    expect(hot.selection.selectedHeader.cols).toBe(true);\n    expect(hot.selection.selectedHeader.corner).toBe(false);\n  });\n\n  it('should add classname after select column', function() {\n    var hot = handsontable({\n      width: 200,\n      height: 100,\n      startRows: 50,\n      startCols: 5,\n      colHeaders: true\n    });\n\n    this.$container.find('thead th:eq(0)').simulate('mousedown');\n\n    expect(this.$container.hasClass('ht__selection--columns')).toBeTruthy();\n  });\n\n  it('should select the entire column after column header is clicked (in fixed rows/cols corner)', function() {\n    var hot = handsontable({\n      width: 200,\n      height: 100,\n      startRows: 50,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedRowsTop: 2,\n      fixedColumnsLeft: 2\n    });\n\n    this.$container.find('.ht_master thead th:eq(1)').simulate('mousedown');\n\n    expect(getSelected()).toEqual([0, 0, 49, 0]);\n    expect(hot.selection.selectedHeader.rows).toBe(false);\n    expect(hot.selection.selectedHeader.cols).toBe(true);\n    expect(hot.selection.selectedHeader.corner).toBe(false);\n  });\n\n  it('should select the entire fixed column after column header is clicked, after scroll horizontally', function() {\n    var hot = handsontable({\n      width: 200,\n      height: 100,\n      startRows: 50,\n      startCols: 50,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedColumnsLeft: 2\n    });\n\n    hot.render();\n    hot.view.wt.scrollHorizontal(20);\n\n    this.$container.find('.ht_master thead th:eq(2)').simulate('mousedown');\n    this.$container.find('.ht_master thead th:eq(2)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([0, 1, 49, 1]);\n    expect(hot.selection.selectedHeader.rows).toBe(false);\n    expect(hot.selection.selectedHeader.cols).toBe(true);\n    expect(hot.selection.selectedHeader.corner).toBe(false);\n  });\n\n  it('should set the selection end to the first visible row, when dragging the selection from a cell to a column header', (done) => {\n    var hot = handsontable({\n      width: 200,\n      height: 200,\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    hot.view.wt.scrollVertical(10);\n    hot.view.wt.scrollHorizontal(10);\n\n    hot.render();\n\n    setTimeout(() => {\n      $(getCell(12, 11)).simulate('mousedown');\n      spec().$container.find('.ht_clone_top thead th:eq(2)').simulate('mouseover');\n    }, 30);\n\n    setTimeout(() => {\n      expect(getSelected()).toEqual([12, 11, 10, 11]);\n      done();\n    }, 60);\n  });\n\n  it('should set the selection end to the first visible column, when dragging the selection from a cell to a row header', (done) => {\n    var hot = handsontable({\n      width: 200,\n      height: 200,\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    hot.view.wt.scrollVertical(10);\n    hot.view.wt.scrollHorizontal(10);\n\n    hot.render();\n\n    setTimeout(() => {\n      $(getCell(12, 11)).simulate('mousedown');\n      spec().$container.find('.ht_clone_left tbody th:eq(12)').simulate('mouseover');\n    }, 30);\n\n    setTimeout(() => {\n      expect(getSelected()).toEqual([12, 11, 12, 10]);\n      done();\n    }, 60);\n  });\n\n  it('should allow to scroll the table when a whole column is selected and table is longer than it\\'s container', function(done) {\n    var errCount = 0;\n    $(window).on('error.selectionTest', () => {\n      errCount++;\n    });\n\n    var onAfterScrollVertically = jasmine.createSpy('onAfterScrollVertically');\n\n    var hot = handsontable({\n      height: 100,\n      width: 300,\n      startRows: 100,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true,\n      afterScrollVertically: onAfterScrollVertically\n    });\n\n    var mainHolder = hot.view.wt.wtTable.holder;\n\n    mainHolder.scrollTop = 0;\n\n    this.$container.find('thead tr:eq(0) th:eq(2)').simulate('mousedown');\n    this.$container.find('thead tr:eq(0) th:eq(2)').simulate('mouseup');\n\n    mainHolder.scrollTop = 120;\n\n    setTimeout(() => {\n      expect(errCount).toEqual(0); // expect no errors to be thrown\n\n      $(window).off('error.selectionTest');\n      done();\n    }, 100);\n  });\n\n  it('should scroll to the end of the selection, when selecting cells using the keyboard', () => {\n    var hot = handsontable({\n      height: 300,\n      width: 300,\n      startRows: 50,\n      startCols: 50,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedRowsTop: 2,\n      fixedColumnsLeft: 2\n    });\n\n    var mainHolder = hot.view.wt.wtTable.holder;\n\n    mainHolder.scrollTop = 100;\n    selectCell(1, 3);\n    keyDownUp('arrow_down');\n    expect(mainHolder.scrollTop).toEqual(0);\n    mainHolder.scrollTop = 100;\n    selectCell(1, 3);\n    keyDownUp('shift+arrow_down');\n    expect(mainHolder.scrollTop).toEqual(0);\n\n    mainHolder.scrollLeft = 100;\n    selectCell(3, 1);\n    keyDownUp('arrow_right');\n    expect(mainHolder.scrollLeft).toEqual(0);\n    mainHolder.scrollLeft = 100;\n    selectCell(3, 1);\n    keyDownUp('shift+arrow_right');\n    expect(mainHolder.scrollLeft).toEqual(0);\n\n    var lastVisibleColumn = hot.view.wt.wtTable.getLastVisibleColumn();\n    selectCell(3, lastVisibleColumn);\n    keyDownUp('arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 1);\n    keyDownUp('arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 2);\n    keyDownUp('shift+arrow_right');\n    expect(hot.view.wt.wtTable.getLastVisibleColumn()).toEqual(lastVisibleColumn + 3);\n\n    var lastVisibleRow = hot.view.wt.wtTable.getLastVisibleRow();\n    selectCell(lastVisibleRow, 3);\n    keyDownUp('arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 1);\n    keyDownUp('arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 2);\n    keyDownUp('shift+arrow_down');\n    expect(hot.view.wt.wtTable.getLastVisibleRow()).toEqual(lastVisibleRow + 3);\n\n  });\n\n  it('should select the entire row after row header is clicked', function() {\n    var hot = handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    this.$container.find('tr:eq(2) th:eq(0)').simulate('mousedown');\n\n    expect(getSelected()).toEqual([1, 0, 1, 4]);\n    expect(hot.selection.selectedHeader.rows).toBe(true);\n    expect(hot.selection.selectedHeader.cols).toBe(false);\n    expect(hot.selection.selectedHeader.corner).toBe(false);\n  });\n\n  it('should add classname after select row', function() {\n    var hot = handsontable({\n      width: 200,\n      height: 100,\n      startRows: 50,\n      startCols: 5,\n      rowHeaders: true\n    });\n\n    this.$container.find('tbody tr:eq(0) th:eq(0)').simulate('mousedown');\n\n    expect(this.$container.hasClass('ht__selection--rows')).toBeTruthy();\n  });\n\n  it('should select the entire row of a partially fixed table after row header is clicked', function() {\n    handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true,\n      fixedRowsTop: 2,\n      fixedColumnsLeft: 2\n    });\n\n    this.$container.find('tr:eq(2) th:eq(0)').simulate('mousedown');\n    expect(getSelected()).toEqual([1, 0, 1, 4]);\n    this.$container.find('tr:eq(3) th:eq(0)').simulate('mousedown');\n    expect(getSelected()).toEqual([2, 0, 2, 4]);\n  });\n\n  it('should select a cell in a newly added row after automatic row adding, triggered by editing a cell in the last row with minSpareRows > 0, ' +\n    'unless editing happened within the fixed bottom rows', (done) => {\n    var hot = handsontable({\n      startRows: 5,\n      startCols: 2,\n      minSpareRows: 1\n    });\n\n    setTimeout(() => {\n      selectCell(4, 0);\n      keyDownUp('enter');\n    }, 10);\n\n    setTimeout(() => {\n      keyDownUp('enter');\n    }, 100);\n\n    setTimeout(() => {\n      expect(countRows()).toEqual(6);\n      expect(getSelected()).toEqual([5, 0, 5, 0]);\n    }, 200);\n\n    setTimeout(() => {\n      done();\n    }, 250);\n  });\n\n  it('should change selected coords by modifying coords object via `modifyTransformStart` hook', () => {\n    var hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 0);\n\n    hot.addHook('modifyTransformStart', (coords) => {\n      coords.col += 1;\n      coords.row += 1;\n    });\n    keyDown('arrow_down');\n\n    expect(getSelected()).toEqual([2, 1, 2, 1]);\n  });\n\n  it('should change selected coords by modifying coords object via `modifyTransformEnd` hook', () => {\n    var hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    selectCell(0, 0);\n\n    hot.addHook('modifyTransformEnd', (coords) => {\n      coords.col += 2;\n      coords.row += 1;\n    });\n    keyDown('shift+arrow_down');\n\n    expect(getSelected()).toEqual([0, 0, 2, 2]);\n  });\n\n  it('should indicate is coords is out of bounds via `afterModifyTransformStart` hook', () => {\n    var spy = jasmine.createSpy();\n\n    var hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    hot.addHook('afterModifyTransformStart', spy);\n\n    selectCell(2, 0);\n    keyDownUp('arrow_left');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(0);\n    expect(spy.calls.mostRecent().args[2]).toBe(-1);\n\n    spy.calls.reset();\n    selectCell(2, 4);\n    keyDownUp('arrow_right');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(0);\n    expect(spy.calls.mostRecent().args[2]).toBe(1);\n\n    spy.calls.reset();\n    selectCell(4, 2);\n    keyDownUp('arrow_down');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(1);\n    expect(spy.calls.mostRecent().args[2]).toBe(0);\n\n    spy.calls.reset();\n    selectCell(0, 2);\n    keyDownUp('arrow_up');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(-1);\n    expect(spy.calls.mostRecent().args[2]).toBe(0);\n  });\n\n  it('should indicate is coords is out of bounds via `afterModifyTransformEnd` hook', () => {\n    var spy = jasmine.createSpy();\n\n    var hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n    hot.addHook('afterModifyTransformEnd', spy);\n\n    selectCell(2, 0);\n    keyDownUp('shift+arrow_left');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(0);\n    expect(spy.calls.mostRecent().args[2]).toBe(-1);\n\n    spy.calls.reset();\n    selectCell(2, 4);\n    keyDownUp('shift+arrow_right');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(0);\n    expect(spy.calls.mostRecent().args[2]).toBe(1);\n\n    spy.calls.reset();\n    selectCell(4, 2);\n    keyDownUp('shift+arrow_down');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(1);\n    expect(spy.calls.mostRecent().args[2]).toBe(0);\n\n    spy.calls.reset();\n    selectCell(0, 2);\n    keyDownUp('shift+arrow_up');\n\n    expect(spy.calls.mostRecent().args[1]).toBe(-1);\n    expect(spy.calls.mostRecent().args[2]).toBe(0);\n  });\n\n  it('should change selection after left mouse button on one of selected cell', () => {\n    var hot = handsontable({\n      startRows: 5,\n      startCols: 5\n    });\n\n    var cells = $('.ht_master.handsontable td');\n\n    cells.eq(6).simulate('mousedown');\n    cells.eq(18).simulate('mouseover');\n    cells.eq(18).simulate('mouseup');\n\n    expect(hot.getSelected()).toEqual([1, 1, 3, 3]);\n\n    cells.eq(16).simulate('mousedown');\n    cells.eq(16).simulate('mouseup');\n\n    expect(hot.getSelected()).toEqual([3, 1, 3, 1]);\n  });\n\n  it('should select the first row after corner header is clicked', function() {\n    var hot = handsontable({\n      startRows: 5,\n      startCols: 5,\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    this.$container.find('thead').find('th').eq(0).simulate('mousedown');\n\n    expect(getSelected()).toEqual([0, 0, 0, 0]);\n    expect(hot.selection.selectedHeader.rows).toBe(false);\n    expect(hot.selection.selectedHeader.cols).toBe(false);\n    expect(hot.selection.selectedHeader.corner).toBe(true);\n  });\n\n  it('should redraw selection when option `colHeaders` is set and user scrolled', function (done) {\n    var hot = handsontable({\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true,\n      width: 400,\n      height: 200\n    });\n    var cellVerticalPosition;\n    var borderOffsetInPixels = 1;\n    var topBorder;\n\n    selectCell(5, 5);\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(2);\n\n    setTimeout(function () {\n      cellVerticalPosition = hot.getCell(5, 5).offsetTop;\n      topBorder = $('.wtBorder.current')[0];\n      expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);\n      hot.view.wt.wtOverlays.topOverlay.scrollTo(0);\n    }, 100);\n\n    setTimeout(function () {\n      cellVerticalPosition = hot.getCell(5, 5).offsetTop;\n      topBorder = $('.wtBorder.current')[0];\n      expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);\n      done();\n    }, 200);\n  });\n\n  it('should redraw selection on `leftOverlay` when options `colHeaders` and `fixedColumnsLeft` are set, and user scrolled', function (done) {\n    var hot = handsontable({\n      fixedColumnsLeft: 2,\n      startRows: 20,\n      startCols: 20,\n      colHeaders: true,\n      rowHeaders: true,\n      width: 400,\n      height: 200\n    });\n    var cellVerticalPosition;\n    var borderOffsetInPixels = 1;\n    var topBorder;\n\n    selectCell(1, 0);\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(5);\n\n    setTimeout(function () {\n      cellVerticalPosition = hot.getCell(1, 0).offsetTop;\n      topBorder = $('.wtBorder.current')[0];\n      expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);\n      hot.view.wt.wtOverlays.topOverlay.scrollTo(0);\n    }, 100);\n\n    setTimeout(function () {\n      cellVerticalPosition = hot.getCell(1, 0).offsetTop;\n      topBorder = $('.wtBorder.current')[0];\n      expect(topBorder.offsetTop).toEqual(cellVerticalPosition - borderOffsetInPixels);\n      done();\n    }, 200);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_selection.spec.js","describe('Core_setDataAtCell', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfNestedObjects = function() {\n    return [\n      {id: 1,\n        name: {\n          first: 'Ted',\n          last: 'Right'\n        }},\n      {id: 2,\n        name: {\n          first: 'Frank',\n          last: 'Honest'\n        }},\n      {id: 3,\n        name: {\n          first: 'Joan',\n          last: 'Well'\n        }}\n    ];\n  };\n\n  var htmlText = 'Ben & Jerry\\'s';\n\n  it('HTML special chars should be preserved in data map but escaped in DOM', () => {\n    // https://github.com/handsontable/handsontable/issues/147\n    handsontable();\n    var td = setDataAtCell(0, 0, htmlText);\n    selectCell(0, 0);\n\n    $(td).simulate('dblclick');\n    deselectCell();\n\n    expect(getDataAtCell(0, 0)).toEqual(htmlText);\n  });\n\n  it('should correctly paste string that contains \"quotes\"', (done) => {\n    // https://github.com/handsontable/handsontable/issues/205\n    handsontable({});\n    selectCell(0, 0);\n    triggerPaste('1\\nThis is a \"test\" and a test\\n2');\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('1');\n      expect(getDataAtCell(1, 0)).toEqual('This is a \"test\" and a test');\n      expect(getDataAtCell(2, 0)).toEqual('2');\n      done();\n    }, 200);\n  });\n\n  it('should correctly paste string when dataSchema is used', (done) => {\n    // https://github.com/handsontable/handsontable/issues/237\n    handsontable({\n      colHeaders: true,\n      dataSchema: {\n        col1: null,\n        col2: null,\n        col3: null\n      }\n    });\n    selectCell(0, 0);\n    triggerPaste('1\\tTest\\t2');\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('1');\n      expect(getDataAtCell(0, 1)).toEqual('Test');\n      expect(getDataAtCell(0, 2)).toEqual('2');\n      done();\n    }, 200);\n  });\n\n  it('should paste not more rows than maxRows', (done) => {\n    handsontable({\n      minSpareRows: 1,\n      minRows: 5,\n      maxRows: 10,\n    });\n    selectCell(4, 0);\n    triggerPaste('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10');\n\n    setTimeout(() => {\n      expect(countRows()).toEqual(10);\n      expect(getDataAtCell(9, 0)).toEqual('6');\n      done();\n    }, 200);\n  });\n\n  it('should paste not more cols than maxCols', (done) => {\n    handsontable({\n      minSpareCols: 1,\n      minCols: 5,\n      maxCols: 10,\n    });\n    selectCell(0, 4);\n    triggerPaste('1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10');\n\n    setTimeout(() => {\n      expect(countCols()).toEqual(10);\n      expect(getDataAtCell(0, 9)).toEqual('6');\n      done();\n    }, 200);\n  });\n\n  it('should paste not more rows & cols than maxRows & maxCols', (done) => {\n    handsontable({\n      minSpareRows: 1,\n      minSpareCols: 1,\n      minRows: 5,\n      minCols: 5,\n      maxRows: 6,\n      maxCols: 6,\n    });\n    selectCell(4, 4);\n    triggerPaste('1\\t2\\t3\\n4\\t5\\t6\\n7\\t8\\t9');\n\n    setTimeout(() => {\n      expect(countRows()).toEqual(6);\n      expect(countCols()).toEqual(6);\n      expect(getDataAtCell(5, 5)).toEqual('5');\n      done();\n    }, 200);\n  });\n\n  // https://github.com/handsontable/handsontable/issues/250\n  it('should create new rows when pasting into grid with object data source', (done) => {\n    handsontable({\n      data: arrayOfNestedObjects(),\n      colHeaders: true,\n      columns: [\n        {data: 'id'},\n        {data: 'name.last'},\n        {data: 'name.first'}\n      ],\n      minSpareRows: 1,\n    });\n    selectCell(3, 0);\n    triggerPaste('a\\tb\\tc\\nd\\te\\tf\\ng\\th\\ti');\n\n    setTimeout(() => {\n      expect(countRows()).toEqual(7);\n      expect(getDataAtCell(5, 2)).toEqual('i');\n      done();\n    }, 200);\n  });\n\n  // https://handsontable.com/demo/datasources.html\n  it('should work with functional data source', () => {\n    handsontable({\n      data: [\n        model({id: 1, name: 'Ted Right', address: ''}),\n        model({id: 2, name: 'Frank Honest', address: ''}),\n        model({id: 3, name: 'Joan Well', address: ''})\n      ],\n      dataSchema: model,\n      startRows: 5,\n      startCols: 3,\n      colHeaders: ['ID', 'Name', 'Address'],\n      columns: [\n        {data: property('id')},\n        {data: property('name')},\n        {data: property('address')}\n      ],\n      minSpareRows: 1\n    });\n\n    function model(opts) {\n      var _pub = {},\n        _priv = $.extend({\n          id: undefined,\n          name: undefined,\n          address: undefined\n        }, opts);\n\n      _pub.attr = function(attr, val) {\n        if (typeof val === 'undefined') {\n          return _priv[attr];\n        }\n        _priv[attr] = val;\n\n        return _pub;\n      };\n\n      return _pub;\n    }\n\n    function property(attr) {\n      return function(row, value) {\n        return row.attr(attr, value);\n      };\n    }\n\n    expect(getDataAtCell(1, 1)).toEqual('Frank Honest');\n    setDataAtCell(1, 1, 'Something Else');\n    expect(getDataAtCell(1, 1)).toEqual('Something Else');\n  });\n\n  it('should accept changes array as 1st param and source as 2nd param', () => {\n    var callCount = 0,\n      lastSource = '';\n\n    handsontable({\n      afterChange(changes, source) {\n        callCount++;\n        lastSource = source;\n      }\n    });\n\n    setDataAtCell([[0, 0, 'new value']], 'customSource');\n    expect(getDataAtCell(0, 0)).toEqual('new value');\n    expect(lastSource).toEqual('customSource');\n  });\n\n  it('should trigger `afterSetDataAtCell` hook with applied changes', () => {\n    var _changes;\n    var _source;\n\n    handsontable({\n      afterSetDataAtCell(changes, source) {\n        _changes = changes;\n        _source = source;\n      }\n    });\n\n    setDataAtCell(0, 0, 'foo bar', 'customSource');\n\n    expect(_changes).toEqual([[0, 0, null, 'foo bar']]);\n    expect(_source).toBe('customSource');\n    expect(getDataAtCell(0, 0)).toEqual('foo bar');\n  });\n\n  it('should modify value on the fly using `afterSetDataAtCell` hook', () => {\n    handsontable({\n      data: [['a', 'b', 'c'], [1, 2, 3]],\n      afterSetDataAtCell(changes, source) {\n        if (changes[0][3] === 'foo bar') {\n          changes[0][3] = 'bar';\n        }\n        if (changes[0][3] === 22) {\n          changes[0][3] = 33;\n        }\n      }\n    });\n\n    setDataAtCell(0, 0, 'foo bar', 'customSource');\n    setDataAtCell(1, 2, 22, 'customSource');\n\n    expect(getDataAtCell(0, 0)).toBe('bar');\n    expect(getDataAtCell(1, 2)).toBe(33);\n    expect(getData()).toEqual([['bar', 'b', 'c'], [1, 2, 33]]);\n  });\n\n  it('should trigger `afterSetDataAtRowProp` hook with applied changes', () => {\n    var _changes;\n    var _source;\n\n    handsontable({\n      columns: [{data: 'name'}, {data: 'id'}],\n      afterSetDataAtRowProp(changes, source) {\n        _changes = changes;\n        _source = source;\n      }\n    });\n\n    setDataAtRowProp(0, 'name', 'foo bar', 'customSource');\n\n    expect(_changes).toEqual([[0, 'name', void 0, 'foo bar']]);\n    expect(_source).toBe('customSource');\n    expect(getDataAtCell(0, 0)).toBe('foo bar');\n  });\n\n  it('should modify value on the fly using `afterSetDataAtRowProp` hook', () => {\n    handsontable({\n      data: [{name: 'a', id: 1}, {name: 'b', id: 2}, {name: 'c', id: 3}],\n      columns: [{data: 'name'}, {data: 'id'}],\n      afterSetDataAtRowProp(changes, source) {\n        if (changes[0][3] === 'foo bar') {\n          changes[0][3] = 'bar';\n        }\n        if (changes[0][3] === 22) {\n          changes[0][3] = 33;\n        }\n      }\n    });\n\n    setDataAtRowProp(0, 'name', 'foo bar', 'customSource');\n    setDataAtRowProp(1, 'id', 22, 'customSource');\n\n    expect(getDataAtRowProp(0, 'name')).toEqual('bar');\n    expect(getDataAtRowProp(1, 'id')).toBe(33);\n    expect(getData()).toEqual([['bar', 1], ['b', 33], ['c', 3]]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_setDataAtCell.spec.js","describe('Core_splice', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfArrays = function() {\n    return [\n      ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n      ['2008', 10, 11, 12, 13],\n      ['2009', 20, 11, 14, 13],\n      ['2010', 30, 15, 12, 13]\n    ];\n  };\n\n  describe('spliceCol', () => {\n    it('should remove data from specified col', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareRows: 1\n      });\n\n      expect(spliceCol(1, 0, 2)).toEqual(['Kia', 10]);\n      expect(getData(0, 1, 3, 1)).toEqual([[20], [30], [null], [null]]);\n    });\n\n    it('should insert data into specified col', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareRows: 1\n      });\n\n      expect(spliceCol(1, 1, 0, 'test', 'test', 'test')).toEqual([]);\n      expect(getData(0, 1, 6, 1)).toEqual([['Kia'], ['test'], ['test'], ['test'], [10], [20], [30]]);\n    });\n\n    it('should remove and insert data into specified col', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareRows: 1\n      });\n\n      expect(spliceCol(1, 0, 2, 'test', 'test', 'test')).toEqual(['Kia', 10]);\n      expect(getData(0, 1, 4, 1)).toEqual([['test'], ['test'], ['test'], [20], [30]]);\n    });\n  });\n\n  describe('spliceRow', () => {\n    it('should remove data from specified row', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareCols: 1\n      });\n\n      expect(spliceRow(0, 0, 3)).toEqual(['', 'Kia', 'Nissan']);\n      expect(getData(0, 0, 0, 4)).toEqual([['Toyota', 'Honda', null, null, null]]);\n    });\n\n    it('should insert data into specified row', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareCols: 1\n      });\n\n      expect(spliceRow(0, 0, 0, 'test', 'test', 'test')).toEqual([]);\n      expect(getData(0, 0, 0, 7)).toEqual([['test', 'test', 'test', '', 'Kia', 'Nissan', 'Toyota', 'Honda']]);\n    });\n\n    it('should remove and insert data into specified row', () => {\n      handsontable({\n        data: arrayOfArrays(),\n        minSpareCols: 1\n      });\n\n      expect(spliceRow(0, 0, 2, 'test', 'test', 'test')).toEqual(['', 'Kia']);\n      expect(getData(0, 0, 0, 5)).toEqual([['test', 'test', 'test', 'Nissan', 'Toyota', 'Honda']]);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_splice.spec.js","describe('Core_updateSettings', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should inherit cell type', () => {\n\n    handsontable({\n      data: [[1, 2]],\n      columns: [\n        {},\n        {type: 'checkbox'},\n      ],\n      cells(row, col, prop) {\n        if (row === 0 && col === 0) {\n          return {\n            type: 'numeric'\n          };\n        }\n      }\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('numeric');\n    expect(getCellMeta(0, 1).type).toEqual('checkbox');\n\n  });\n\n  it('should inherit cell type when columns is a function', () => {\n    handsontable({\n      data: [[1, 2]],\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {};\n\n        } else if (column === 1) {\n          colMeta = {type: 'checkbox'};\n        }\n\n        return colMeta;\n      },\n      cells(row, col, prop) {\n        if (row === 0 && col === 0) {\n          return {\n            type: 'numeric'\n          };\n        }\n      }\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('numeric');\n    expect(getCellMeta(0, 1).type).toEqual('checkbox');\n  });\n\n  it('should ignore mixed in properties to the cell array option', () => {\n    /* eslint-disable no-array-constructor */\n    /* eslint-disable no-extend-native */\n    Array.prototype.willFail = 'BOOM';\n\n    handsontable({\n      data: [[1, true]],\n      columns: [\n        {type: 'numeric'},\n        {type: 'checkbox'}\n      ]\n    });\n\n    expect(() => {\n      updateSettings({cell: new Array()});\n    }).not.toThrow();\n  });\n\n  it('should ignore mixed in properties to the cell array option when columns is a function', () => {\n    /* eslint-disable no-array-constructor */\n    /* eslint-disable no-extend-native */\n    Array.prototype.willFail = 'BOOM';\n\n    handsontable({\n      data: [[1, true]],\n      columns: function(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {type: 'numeric'};\n\n        } else if (column === 1) {\n          colMeta = {type: 'checkbox'};\n        }\n\n        return colMeta;\n      },\n    });\n\n    expect(() => {\n      updateSettings({cell: new Array()});\n    }).not.toThrow();\n  });\n\n  it('should not reset columns types to text', function() {\n    handsontable({\n      data: [[1, true]],\n      columns: [\n        {type: 'numeric'},\n        {type: 'checkbox'}\n      ]\n    });\n\n    var td = this.$container.find('td');\n\n    expect(td.eq(0).text()).toEqual('1');\n    expect(td.eq(1).text()).toEqual('');\n\n    updateSettings({});\n\n    expect(td.eq(0).text()).toEqual('1');\n    expect(td.eq(1).text()).toEqual('');\n  });\n\n  it('should not reset columns types to text when columns is a function', function() {\n    handsontable({\n      data: [[1, true]],\n      columns: function(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {type: 'numeric'};\n\n        } else if (column === 1) {\n          colMeta = {type: 'checkbox'};\n        }\n\n        return colMeta;\n      }\n    });\n\n    var td = this.$container.find('td');\n\n    expect(td.eq(0).text()).toEqual('1');\n    expect(td.eq(1).text()).toEqual('');\n\n    updateSettings({});\n\n    expect(td.eq(0).text()).toEqual('1');\n    expect(td.eq(1).text()).toEqual('');\n  });\n\n  it('should update readOnly global setting', () => {\n    handsontable({\n      readOnly: true,\n      data: [['foo', 'bar']],\n      columns: [\n        {},\n        {},\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n\n    updateSettings({\n      readOnly: false\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should update readOnly global setting when columns is a function', () => {\n    handsontable({\n      readOnly: true,\n      data: [['foo', 'bar']],\n      columns(column) {\n        var colMeta = {};\n\n        if ([0, 1].indexOf(column) < 0) {\n          colMeta = null;\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n\n    updateSettings({\n      readOnly: false\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should update readOnly columns setting', () => {\n    handsontable({\n      data: [['foo', true]],\n      columns: [\n        {type: 'text', readOnly: true},\n        {type: 'checkbox'}\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n\n    updateSettings({\n      columns: [\n        {type: 'text', readOnly: false},\n        {type: 'checkbox'}\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should update readOnly columns setting when columns is a function', () => {\n    handsontable({\n      data: [['foo', true]],\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {type: 'text', readOnly: true};\n        } else if (column === 1) {\n          colMeta = {type: 'checkbox'};\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n\n    updateSettings({\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {type: 'text', readOnly: false};\n        } else if (column === 1) {\n          colMeta = {type: 'checkbox'};\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(false);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(false);\n  });\n\n  it('should update readOnly columns setting and override global setting', () => {\n    handsontable({\n      readOnly: true,\n      data: [['foo', true]],\n      columns: [\n        {type: 'text'},\n        {type: 'checkbox'}\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n\n    updateSettings({\n      columns: [\n        {type: 'text', readOnly: false},\n        {type: 'checkbox'}\n      ]\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n  });\n\n  it('should update readOnly columns setting and override global setting when columns is a function', () => {\n    handsontable({\n      readOnly: true,\n      data: [['foo', true]],\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {type: 'text'};\n\n        } else if (column === 1) {\n          colMeta = {type: 'checkbox'};\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(true);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n\n    updateSettings({\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {type: 'text', readOnly: false};\n\n        } else if (column === 1) {\n          colMeta = {type: 'checkbox'};\n        }\n\n        return colMeta;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(false);\n    expect($(getCell(0, 0)).hasClass('htDimmed')).toBe(false);\n\n    expect(getCellMeta(0, 1).readOnly).toBe(true);\n    expect($(getCell(0, 1)).hasClass('htDimmed')).toBe(true);\n  });\n\n  it('should not alter the columns object during init', () => {\n    var columns = [\n      {\n        type: 'text'\n      }\n    ];\n\n    var columnsCopy = JSON.parse(JSON.stringify(columns));\n\n    handsontable({\n      columns\n    });\n\n    expect(columns).toEqual(columnsCopy);\n  });\n\n  it('should update column type', () => {\n    var columns = [\n      {\n        type: 'text'\n      }\n    ];\n\n    handsontable({\n      columns\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('text');\n    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.TextRenderer);\n    expect(getCellEditor(0, 0)).toBe(Handsontable.editors.TextEditor);\n\n    columns[0].type = 'date';\n\n    updateSettings({\n      columns\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('date');\n    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.AutocompleteRenderer);\n    expect(getCellEditor(0, 0)).toEqual(Handsontable.editors.DateEditor);\n  });\n\n  it('should update cell type functions, even if new type does not implement all of those functions', () => {\n    var columns = [\n      {\n        type: 'numeric'\n      }\n    ];\n\n    handsontable({\n      columns\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('numeric');\n    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.NumericRenderer);\n    expect(getCellEditor(0, 0)).toBe(Handsontable.editors.NumericEditor);\n    expect(getCellValidator(0, 0)).toBe(Handsontable.cellTypes.numeric.validator);\n\n    columns[0].type = 'text';\n\n    updateSettings({\n      columns\n    });\n\n    expect(getCellMeta(0, 0).type).toEqual('text');\n    expect(getCellRenderer(0, 0)).toBe(Handsontable.renderers.TextRenderer);\n    expect(getCellEditor(0, 0)).toEqual(Handsontable.editors.TextEditor);\n    expect(Handsontable.cellTypes.text.validator).toBeUndefined();\n    expect(getCellValidator(0, 0)).toBeUndefined();\n  });\n\n  it('should allow updating the table height', function() {\n    var hot = handsontable({\n      startRows: 22,\n      startCols: 5\n    });\n\n    var initialHeight = parseInt(this.$container[0].style.height, 10);\n\n    updateSettings({\n      height: 300\n    });\n\n    expect(parseInt(this.$container[0].style.height, 10)).toEqual(300);\n    expect(parseInt(this.$container[0].style.height, 10)).not.toEqual(initialHeight);\n  });\n\n  it('should not reset the table height, when the updateSettings config object doesn\\'t have any height specified', function() {\n    var hot = handsontable({\n      startRows: 22,\n      startCols: 5,\n      height: 300\n    });\n\n    var initialHeight = this.$container[0].style.height;\n\n    updateSettings({\n      rowHeaders: true\n    });\n\n    expect(parseInt(this.$container[0].style.height, 10)).toEqual(parseInt(initialHeight, 10));\n  });\n\n  it('should allow resetting the table height', function() {\n    var hot = handsontable({\n      startRows: 22,\n      startCols: 5,\n      height: 300\n    });\n\n    var initialHeight = this.$container[0].style.height;\n\n    updateSettings({\n      height: null\n    });\n\n    expect(parseInt(this.$container[0].style.height, 10)).not.toEqual(parseInt(initialHeight, 10));\n  });\n\n  it('should allow updating the stretching type', () => {\n    var hot = handsontable({\n      stretchH: 'last'\n    });\n\n    expect(hot.view.wt.getSetting('stretchH')).toEqual('last');\n\n    updateSettings({\n      stretchH: 'all'\n    });\n\n    expect(hot.view.wt.getSetting('stretchH')).toEqual('all');\n\n    updateSettings({\n      stretchH: 'none'\n    });\n\n    expect(hot.view.wt.getSetting('stretchH')).toEqual('none');\n\n    updateSettings({\n      stretchH: 'last'\n    });\n\n    expect(hot.view.wt.getSetting('stretchH')).toEqual('last');\n  });\n\n  it('should change colHeader\\'s row height if is needed', function() {\n    var hot = handsontable({\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    var rowHeights = [];\n\n    rowHeights.push(this.$container.find('.ht_clone_top_left_corner thead th')[0].clientHeight);\n    updateSettings({\n      colHeaders: ['A<br/>A']\n    });\n\n    rowHeights.push(this.$container.find('.ht_clone_top_left_corner thead th')[0].clientHeight);\n\n    expect(rowHeights[0]).toBeLessThan(rowHeights[1]);\n  });\n\n  it('should not overwrite properties (created by columns defined as function) of cells below the viewport by updateSettings #4029', function() {\n    var rows = 50;\n    var columns = 2;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(columns, rows),\n      columns: function (col) {\n        var colProp = {\n          data: 'prop' + col,\n          readOnly: true\n        };\n\n        if (col === 1) {\n          colProp.type = 'checkbox';\n        }\n\n        return colProp;\n      }\n    });\n\n    updateSettings({});\n    expect(getCellMeta(rows, 0).readOnly).toEqual(true);\n    expect(getCellMeta(rows, 1).type).toEqual('checkbox');\n\n    rows = 100;\n\n    updateSettings({data: Handsontable.helper.createSpreadsheetObjectData(columns, rows)});\n    expect(getCellMeta(rows, 0).readOnly).toEqual(true);\n    expect(getCellMeta(rows, 1).type).toEqual('checkbox');\n\n    updateSettings({\n      columns: function (col) {\n        var colProp = {\n          data: 'prop' + col,\n          type: 'numeric'\n        };\n\n        return colProp;\n      }\n    });\n    expect(getCellMeta(0, 1).type).toEqual('numeric');\n    expect(getCellMeta(0, 1).readOnly).toEqual(false);\n    expect(getCellMeta(rows, 1).type).toEqual('numeric');\n    expect(getCellMeta(rows, 1).readOnly).toEqual(false);\n  });\n\n  it('should not overwrite properties (created by columns defined as array) of cells below the viewport by updateSettings #4029', function() {\n    var rows = 50;\n    var columns = 2;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(columns, rows),\n      columns: [\n        {\n          type: 'numeric',\n          format: '0,0.00 $'\n        },\n        {\n          type: 'text',\n          readOnly: true\n        }\n      ]\n    });\n\n    updateSettings({});\n    expect(getCellMeta(rows, 0).type).toEqual('numeric');\n    expect(getCellMeta(rows, 1).readOnly).toEqual(true);\n\n    rows = 100;\n\n    updateSettings({data: Handsontable.helper.createSpreadsheetObjectData(columns, rows)});\n    expect(getCellMeta(rows, 0).type).toEqual('numeric');\n    expect(getCellMeta(rows, 1).readOnly).toEqual(true);\n\n    updateSettings({\n      columns: [\n        {\n          type: 'text',\n          readOnly: true\n        },\n        {\n          type: 'numeric',\n          format: '0,0.00 $'\n        }\n      ]\n    });\n    expect(getCellMeta(0, 0).type).toEqual('text');\n    expect(getCellMeta(0, 0).readOnly).toEqual(true);\n    expect(getCellMeta(0, 1).type).toEqual('numeric');\n    expect(getCellMeta(0, 1).readOnly).toEqual(false);\n    expect(getCellMeta(rows, 0).type).toEqual('text');\n    expect(getCellMeta(rows, 1).type).toEqual('numeric');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_update.spec.js","describe('Core_validate', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfObjects = function() {\n    return [\n      {id: 1, name: 'Ted', lastName: 'Right'},\n      {id: 2, name: 'Frank', lastName: 'Honest'},\n      {id: 3, name: 'Joan', lastName: 'Well'},\n      {id: 4, name: 'Sid', lastName: 'Strong'},\n      {id: 5, name: 'Jane', lastName: 'Neat'},\n      {id: 6, name: 'Chuck', lastName: 'Jackson'},\n      {id: 7, name: 'Meg', lastName: 'Jansen'},\n      {id: 8, name: 'Rob', lastName: 'Norris'},\n      {id: 9, name: 'Sean', lastName: 'O\\'Hara'},\n      {id: 10, name: 'Eve', lastName: 'Branson'}\n    ];\n  };\n\n  it('should call beforeValidate', () => {\n    var fired = null;\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      beforeValidate() {\n        fired = true;\n      }\n    });\n    setDataAtCell(2, 0, 'test');\n\n    expect(fired).toEqual(true);\n  });\n\n  it('should call beforeValidate when columns is a function', () => {\n    var fired = null;\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n          colMeta.type = 'numeric';\n\n        } else if (column === 1) {\n          colMeta.data = 'name';\n\n        } else if (column === 2) {\n          colMeta.data = 'lastName';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      beforeValidate() {\n        fired = true;\n      }\n    });\n    setDataAtCell(2, 0, 'test');\n\n    expect(fired).toBe(true);\n  });\n\n  it('should call afterValidate', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate.calls.count()).toBe(1);\n      done();\n    }, 200);\n  });\n\n  it('should call afterValidate when columns is a function', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n          colMeta.type = 'numeric';\n\n        } else if (column === 1) {\n          colMeta.data = 'name';\n\n        } else if (column === 2) {\n          colMeta.data = 'lastName';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate.calls.count()).toBe(1);\n      done();\n    }, 200);\n  });\n\n  it('beforeValidate can manipulate value', (done) => {\n    var result = null;\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    onAfterValidate.and.callFake((valid, value) => {\n      result = value;\n    });\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      beforeValidate(value) {\n        value = 999;\n        return value;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(result).toBe(999);\n      done();\n    }, 200);\n  });\n\n  it('beforeValidate can manipulate value when columns is a function', (done) => {\n    var result = null;\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    onAfterValidate.and.callFake((valid, value) => {\n      result = value;\n    });\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = {};\n\n        if (column === 0) {\n          colMeta.data = 'id';\n          colMeta.type = 'numeric';\n\n        } else if (column === 1) {\n          colMeta.data = 'name';\n\n        } else if (column === 2) {\n          colMeta.data = 'lastName';\n\n        } else {\n          colMeta = null;\n        }\n\n        return colMeta;\n      },\n      beforeValidate(value) {\n        value = 999;\n        return value;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(result).toBe(999);\n      done();\n    }, 200);\n  });\n\n  it('should be able to define custom validator function', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id',\n          validator(value, cb) {\n            cb(true);\n          }},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('should be able to define custom validator function when columns is a function', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(true);\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = {data: 'name'};\n\n        } else if (column === 2) {\n          colMeta = {data: 'lastName'};\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('should be able to define custom validator RegExp', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', validator: /^\\d+$/ },\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('should be able to define custom validator RegExp when columns is a function', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {data: 'id', validator: /^\\d+$/};\n\n        } else if (column === 1) {\n          colMeta = {data: 'name'};\n\n        } else if (column === 2) {\n          colMeta = {data: 'lastName'};\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('this in validator should point to cellProperties', (done) => {\n    var result = null;\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {\n          data: 'id',\n          validator(value, cb) {\n            result = this;\n            cb(true);\n          }\n        },\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(result.instance).toEqual(getInstance());\n      done();\n    }, 200);\n  });\n\n  it('this in validator should point to cellProperties when columns is a function', (done) => {\n    var result = null;\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              result = this;\n              cb(true);\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = {data: 'name'};\n\n        } else if (column === 2) {\n          colMeta = {data: 'lastName'};\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 0, 123);\n\n    setTimeout(() => {\n      expect(result.instance).toEqual(getInstance());\n      done();\n    }, 200);\n  });\n\n  it('should not throw error after calling validateCells without first argument', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value == 'B1') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    expect(hot.validateCells).not.toThrow();\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - on validateCells', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value == 'B1') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(() => {\n      hot.render();\n    });\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - when we trigger validateCell', function(done) {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, cb) {\n        cb(false);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    expect(this.$container.find('td:not(.htInvalid)').length).toEqual(4);\n\n    hot.validateCell(hot.getDataAtCell(1, 1), hot.getCellMeta(1, 1), () => {});\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(3);\n      done();\n    }, 200);\n  });\n\n  it('should remove class name `htInvalid` from an cell that does validate - when we change validator rules', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var isValid = false;\n    var validator = function() {\n      return isValid;\n    };\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, cb) {\n        cb(validator());\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(() => {});\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(4);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(0);\n\n      isValid = true;\n      onAfterValidate.calls.reset();\n      hot.validateCell(hot.getDataAtCell(1, 1), hot.getCellMeta(1, 1), () => {});\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(3);\n      expect(spec().$container.find('td:not(.htInvalid)').length).toEqual(1);\n      done();\n    }, 400);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - on edit', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value == 'test') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'test');\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      done();\n    }, 200);\n  });\n\n  it('should add class name `htInvalid` to a cell without removing other classes', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var validator = jasmine.createSpy('validator');\n\n    validator.and.callFake((value, callb) => {\n      if (value == 123) {\n        callb(false);\n      } else {\n        callb(true);\n      }\n    });\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      type: 'numeric',\n      validator,\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(0, 0, 123);\n\n    setTimeout(() => {\n      expect(validator.calls.count()).toEqual(1);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htNumeric')).toEqual(true);\n      onAfterValidate.calls.reset();\n      setDataAtCell(0, 0, 124);\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htNumeric')).toEqual(true);\n      done();\n    }, 400);\n  });\n\n  it('should add class name `htInvalid` to an cell that does not validate - after validateCells', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'test');\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(0);\n      updateSettings({\n        validator(value, callb) {\n          if (value == 'test') {\n            callb(false);\n          } else {\n            callb(true);\n          }\n        }\n      });\n\n      onAfterValidate.calls.reset();\n\n      hot.validateCells(() => {});\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('td.htInvalid').length).toEqual(1);\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      done();\n    }, 400);\n  });\n\n  it('should remove class name `htInvalid` when cell is edited to validate', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callb) {\n        if (value == 'A1') {\n          callb(false);\n        } else {\n          callb(true);\n        }\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(() => {\n      hot.render();\n    });\n\n    setTimeout(() => {\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(true);\n      onAfterValidate.calls.reset();\n      setDataAtCell(0, 0, 'test');\n    }, 200);\n\n    setTimeout(() => {\n      expect(spec().$container.find('tr:eq(0) td:eq(0)').hasClass('htInvalid')).toEqual(false);\n      done();\n    }, 400);\n  });\n\n  it('should call callback with first argument as `true` if all cells are valid', (done) => {\n    var onValidate = jasmine.createSpy('onValidate');\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callback) {\n        callback(true);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(true);\n      done();\n    }, 200);\n  });\n\n  it('should call callback with first argument as `false` if one of cells is invalid', (done) => {\n    var onValidate = jasmine.createSpy('onValidate');\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(2, 2),\n      validator(value, callback) {\n        callback(false);\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      done();\n    }, 200);\n  });\n\n  it('should not allow for changes where data is invalid (multiple changes, async)', (done) => {\n    var validatedChanges;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callb) {\n        setTimeout(() => {\n          if (value === 'fail') {\n            callb(false);\n          } else {\n            callb(true);\n          }\n        }, 10);\n      },\n      afterChange(changes, source) {\n        if (source !== 'loadData') {\n          validatedChanges = changes;\n        }\n      }\n    });\n\n    populateFromArray(0, 0, [\n      ['A1-new'],\n      ['fail'],\n      ['A3-new']\n    ]);\n\n    setTimeout(() => {\n      expect(validatedChanges.length).toEqual(2);\n      expect(validatedChanges[0]).toEqual([0, 0, 'A1', 'A1-new']);\n      expect(validatedChanges[1]).toEqual([2, 0, 'A3', 'A3-new']);\n      expect(getDataAtCell(0, 0)).toEqual('A1-new');\n      expect(getDataAtCell(1, 0)).toEqual('A2');\n      expect(getDataAtCell(2, 0)).toEqual('A3-new');\n      expect(getCellMeta(0, 0).valid).toBe(true);\n      expect(getCellMeta(1, 0).valid).toBe(true);\n      expect(getCellMeta(2, 0).valid).toBe(true);\n      done();\n    }, 200);\n  });\n\n  it('should call beforeChange exactly once after cell value edit and validator is synchronous', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var onBeforeChange = jasmine.createSpy('onBeforeChange');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        callback(true);\n      },\n      beforeChange: onBeforeChange,\n      afterValidate: onAfterValidate\n    });\n\n    expect(onBeforeChange.calls.count()).toEqual(0);\n\n    hot.setDataAtCell(0, 0, 10);\n\n    setTimeout(() => {\n      expect(onBeforeChange.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call beforeChange exactly once after cell value edit and validator is asynchronous', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var onBeforeChange = jasmine.createSpy('onBeforeChange');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          callback(true);\n        }, 10);\n      },\n      beforeChange: onBeforeChange,\n      afterValidate: onAfterValidate\n    });\n\n    expect(onBeforeChange.calls.count()).toEqual(0);\n\n    hot.setDataAtCell(0, 0, 10);\n\n    setTimeout(() => {\n      expect(onBeforeChange.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call afterChange exactly once after cell value edit and validator is synchronous', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var onAfterChange = jasmine.createSpy('onAfterChange');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        callback(true);\n      },\n      afterChange: onAfterChange,\n      afterValidate: onAfterValidate\n    });\n\n    expect(onAfterChange.calls.count()).toEqual(1); // loadData\n\n    hot.setDataAtCell(0, 0, 10);\n\n    setTimeout(() => {\n      expect(onAfterChange.calls.count()).toEqual(2);\n      done();\n    }, 200);\n  });\n\n  it('should call afterChange exactly once after cell value edit and validator is asynchronous', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var onAfterChange = jasmine.createSpy('onAfterChange');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          callback(true);\n        }, 10);\n      },\n      afterChange: onAfterChange,\n      afterValidate: onAfterValidate\n    });\n\n    expect(onAfterChange.calls.count()).toEqual(1); // loadData\n\n    hot.setDataAtCell(0, 0, 10);\n\n    setTimeout(() => {\n      expect(onAfterChange.calls.count()).toEqual(2);\n      done();\n    }, 200);\n  });\n\n  it('edited cell should stay on screen until value is validated', (done) => {\n    var isEditorVisibleBeforeChange;\n    var isEditorVisibleAfterChange;\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n    var onAfterChange = jasmine.createSpy('onAfterChange');\n\n    onAfterValidate.and.callFake(() => {\n      isEditorVisibleBeforeChange = isEditorVisible();\n    });\n    onAfterChange.and.callFake(() => {\n      isEditorVisibleAfterChange = isEditorVisible();\n    });\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      afterValidate: onAfterValidate,\n      afterChange: onAfterChange,\n      validator(value, callback) {\n        setTimeout(() => {\n          callback(true);\n        }, 100);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'Ted';\n\n    onAfterValidate.calls.reset();\n    onAfterChange.calls.reset();\n\n    keyDown('enter');\n\n    expect(document.activeElement.nodeName).toEqual('TEXTAREA');\n\n    setTimeout(() => {\n      expect(isEditorVisibleBeforeChange).toBe(true);\n      expect(isEditorVisibleAfterChange).toBe(true);\n      expect(isEditorVisible()).toBe(false);\n      done();\n    }, 200);\n  });\n\n  it('should validate edited cell after selecting another cell', (done) => {\n    var validated = false;\n    var validatedValue;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          validated = true;\n          validatedValue = value;\n          callback(true);\n        }, 100);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(0, 1);\n\n    setTimeout(() => {\n      expect(validatedValue).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should leave the new value in editor if it does not validate (async validation), after hitting ENTER', (done) => {\n    var validated = false;\n    var validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          validated = true;\n          validationResult = value.length == 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(document.activeElement.value).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should leave the new value in editor if it does not validate (sync validation), after hitting ENTER', (done) => {\n    var validated = false;\n    var validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        validated = true;\n        validationResult = value.length == 2;\n        callback(validationResult);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(document.activeElement.value).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should leave the new value in editor if it does not validate (async validation), after selecting another cell', (done) => {\n    var validated = false;\n    var validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          setTimeout(() => {\n            validated = true;\n          }, 0);\n\n          validationResult = value.length == 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(1, 0);\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(document.activeElement.value).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should leave the new value in editor if it does not validate (sync validation), after selecting another cell', (done) => {\n    var validated = false;\n    var validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        validationResult = value.length == 2;\n        callback(validationResult);\n\n        /* Setting this variable has to be async, because we are not interested in when the validation happens, but when\n         the callback is being called. Since internally all the callbacks are processed asynchronously (even if they are\n         synchronous) end of validator function is not the equivalent of whole validation routine end.\n         If it still sounds weird, take a look at HandsontableTextEditorClass.prototype.finishEditing method.\n         */\n\n        setTimeout(() => {\n          validated = true;\n        }, 0);\n      }\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(1, 0);\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(document.activeElement.value).toEqual('Ted');\n      done();\n    }, 200);\n  });\n\n  it('should close the editor and save the new value if validation fails and allowInvalid is set to \"true\"', (done) => {\n    var validated = false;\n    var validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: true,\n      validator(value, callback) {\n        setTimeout(() => {\n\n          validated = true;\n          validationResult = value.length == 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'Ted';\n\n    selectCell(1, 0);\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(getDataAtCell(0, 0)).toEqual('Ted');\n      expect(getCell(0, 0).className).toMatch(/htInvalid/);\n      done();\n    }, 200);\n  });\n\n  it('should close the editor and save the new value after double clicking on a cell, if the previously edited cell validated correctly', (done) => {\n    var validated = false;\n    var validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n\n          validated = true;\n          validationResult = value.length == 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    var editor = $('.handsontableInputHolder');\n    expect(editor.is(':visible')).toBe(true);\n\n    document.activeElement.value = 'AA';\n\n    expect(document.activeElement.value).toEqual('AA');\n\n    var cell = $(getCell(1, 0));\n    var clicks = 0;\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks++;\n    }, 0);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks++;\n    }, 100);\n\n    setTimeout(() => {\n      expect(editor.is(':visible')).toBe(false);\n      expect(validationResult).toBe(true);\n      expect(getDataAtCell(0, 0)).toEqual('AA');\n      done();\n    }, 300);\n  });\n\n  it('should close the editor and restore the original value after double clicking on a cell, if the previously edited cell have not validated', (done) => {\n    var validated = false;\n    var validationResult;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      allowInvalid: false,\n      validator(value, callback) {\n        setTimeout(() => {\n          validated = true;\n          validationResult = value.length == 2;\n          callback(validationResult);\n        }, 100);\n      }\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    document.activeElement.value = 'AAA';\n\n    expect(document.activeElement.value).toEqual('AAA');\n\n    var cell = $(getCell(1, 0));\n    var clicks = 0;\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks++;\n    }, 0);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks++;\n    }, 100);\n\n    setTimeout(() => {\n      expect(validationResult).toBe(false);\n      expect(getDataAtCell(0, 0)).toEqual('A1');\n      done();\n    }, 300);\n  });\n\n  it('should listen to key changes after cell is corrected (allowInvalid: false)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        {data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            cb(parseInt(val, 10) > 100);\n          }},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    document.activeElement.value = '99';\n\n    onAfterValidate.calls.reset();\n\n    keyDownUp('enter'); // should be ignored\n\n    setTimeout(() => {\n      expect(isEditorVisible()).toBe(true);\n      document.activeElement.value = '999';\n\n      onAfterValidate.calls.reset();\n      keyDownUp('enter'); // should be accepted\n    }, 200);\n\n    setTimeout(() => {\n      expect(isEditorVisible()).toBe(false);\n      expect(getSelected()).toEqual([3, 0, 3, 0]);\n\n      keyDownUp('arrow_up');\n      expect(getSelected()).toEqual([2, 0, 2, 0]);\n      done();\n    }, 400);\n  });\n\n  it('should allow keyboard movement when cell is being validated (move DOWN)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        {data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            setTimeout(() => {\n              cb(parseInt(val, 10) > 100);\n            }, 100);\n          }},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    document.activeElement.value = '999';\n    keyDownUp('enter');\n\n    expect(getSelected()).toEqual([3, 0, 3, 0]);\n\n    keyDownUp('arrow_down');\n    keyDownUp('arrow_down');\n    expect(isEditorVisible()).toBe(true);\n    expect(getSelected()).toEqual([5, 0, 5, 0]);\n\n    setTimeout(() => {\n      expect(isEditorVisible()).toBe(false);\n      expect(getSelected()).toEqual([5, 0, 5, 0]); // only enterMove and first arrow_down is performed\n      done();\n    }, 200);\n  });\n\n  it('should not allow keyboard movement until cell is validated (move UP)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        {data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            setTimeout(() => {\n              cb(parseInt(val, 10) > 100);\n            }, 100);\n          }},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    document.activeElement.value = '999';\n    keyDownUp('enter');\n\n    expect(getSelected()).toEqual([3, 0, 3, 0]);\n\n    keyDownUp('arrow_up');\n    keyDownUp('arrow_up');\n    expect(isEditorVisible()).toBe(true);\n    expect(getSelected()).toEqual([1, 0, 1, 0]);\n\n    setTimeout(() => {\n      expect(isEditorVisible()).toBe(false);\n      expect(getSelected()).toEqual([1, 0, 1, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should not allow keyboard movement until cell is validated (move RIGHT)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        {data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            setTimeout(() => {\n              cb(parseInt(val, 10) > 100);\n            }, 100);\n          }},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    document.activeElement.value = '999';\n    keyDownUp('enter'); // should be accepted but only after 100 ms\n    expect(getSelected()).toEqual([3, 0, 3, 0]);\n\n    keyDownUp('arrow_right');\n    keyDownUp('arrow_right');\n    expect(isEditorVisible()).toBe(true);\n    expect(getSelected()).toEqual([3, 2, 3, 2]);\n\n    setTimeout(() => {\n      expect(isEditorVisible()).toBe(false);\n      expect(getSelected()).toEqual([3, 2, 3, 2]);\n      done();\n    }, 200);\n  });\n\n  it('should not allow keyboard movement until cell is validated (move LEFT)', function(done) {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    hot = handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        {data: 'name'},\n        {data: 'lastName'},\n        {data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            setTimeout(() => {\n              cb(parseInt(val, 10) > 100);\n            }, 100);\n          }}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(2, 2);\n\n    keyDownUp('enter');\n    document.activeElement.value = '999';\n    keyDownUp('enter'); // should be accepted but only after 100 ms\n    expect(getSelected()).toEqual([3, 2, 3, 2]);\n\n    this.$container.simulate('keydown', {keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT});\n    this.$container.simulate('keyup', {keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT});\n    this.$container.simulate('keydown', {keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT});\n    this.$container.simulate('keyup', {keyCode: Handsontable.helper.KEY_CODES.ARROW_LEFT});\n\n    expect(isEditorVisible()).toBe(true);\n    expect(getSelected()).toEqual([3, 0, 3, 0]);\n\n    setTimeout(() => {\n      expect(isEditorVisible()).toBe(false);\n      expect(getSelected()).toEqual([3, 0, 3, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should not validate cell if editing has been canceled', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(0, 0);\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n    setTimeout(() => {\n      expect(onAfterValidate).not.toHaveBeenCalled();\n      done();\n    }, 100);\n  });\n\n  it('should not validate cell if editing has been canceled when columns is a function', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {data: 'id'};\n\n        } else if (column === 1) {\n          colMeta = {data: 'name'};\n\n        } else if (column === 2) {\n          colMeta = {data: 'lastName'};\n\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(0, 0);\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n    setTimeout(() => {\n      expect(onAfterValidate).not.toHaveBeenCalled();\n      done();\n    }, 100);\n  });\n\n  it('should leave cell invalid if editing has been canceled', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id',\n          validator(value, cb) {\n            cb(false);\n          }},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'foo');\n\n    setTimeout(() => {\n      expect(getCellMeta(0, 0).valid).toBe(false);\n\n      selectCell(0, 0);\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n      keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n      expect(getCellMeta(0, 0).valid).toBe(false);\n      done();\n    }, 200);\n  });\n\n  it('should leave cell invalid if editing has been canceled when columns is a function', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(false);\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = {data: 'name'};\n\n        } else if (column === 2) {\n          colMeta = {data: 'lastName'};\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'foo');\n\n    setTimeout(() => {\n      expect(getCellMeta(0, 0).valid).toBe(false);\n\n      selectCell(0, 0);\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n      keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n      expect(getCellMeta(0, 0).valid).toBe(false);\n      done();\n    }, 200);\n  });\n\n  it('should open an appropriate editor after cell value is valid again', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {\n          data: 'id',\n          validator(value, cb) {\n            cb(value == parseInt(value, 10));\n          },\n          allowInvalid: false\n        },\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(0, 0);\n\n    var activeEditor = hot.getActiveEditor();\n\n    expect(activeEditor.row).toEqual(0);\n    expect(activeEditor.col).toEqual(0);\n\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n    activeEditor.setValue('foo');\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes, close editor\n\n    setTimeout(() => {\n      onAfterValidate.calls.reset();\n      activeEditor = hot.getActiveEditor();\n\n      expect(activeEditor.isOpened()).toBe(true); // value is invalid, so editor stays opened\n      expect(activeEditor.row).toEqual(0);\n      expect(activeEditor.col).toEqual(0);\n\n      activeEditor.setValue(2);\n\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes and move to cell below (row: 1, col: ś0)\n    }, 200);\n\n    setTimeout(() => {\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n\n      activeEditor = hot.getActiveEditor();\n      expect(activeEditor.row).toEqual(1);\n      expect(activeEditor.col).toEqual(0);\n      done();\n    }, 400);\n  });\n\n  it('should open an appropriate editor after cell value is valid again when columns is a function', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(value == parseInt(value, 10));\n            },\n            allowInvalid: false\n          };\n\n        } else if (column === 1) {\n          colMeta = {data: 'name'};\n\n        } else if (column === 2) {\n          colMeta = {data: 'lastName'};\n\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(0, 0);\n\n    var activeEditor = hot.getActiveEditor();\n\n    expect(activeEditor.row).toEqual(0);\n    expect(activeEditor.col).toEqual(0);\n\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n    activeEditor.setValue('foo');\n    keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes, close editor\n\n    setTimeout(() => {\n      onAfterValidate.calls.reset();\n      activeEditor = hot.getActiveEditor();\n\n      expect(activeEditor.isOpened()).toBe(true); // value is invalid, so editor stays opened\n      expect(activeEditor.row).toEqual(0);\n      expect(activeEditor.col).toEqual(0);\n\n      activeEditor.setValue(2);\n\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // save changes and move to cell below (row: 1, col: ś0)\n    }, 200);\n\n    setTimeout(() => {\n      keyDownUp(Handsontable.helper.KEY_CODES.ENTER); // open editor\n\n      activeEditor = hot.getActiveEditor();\n      expect(activeEditor.row).toEqual(1);\n      expect(activeEditor.col).toEqual(0);\n      done();\n    }, 400);\n  });\n\n  it('should call the validation callback only once, when using the validateCells method on a mixed set of data', (done) => {\n    var onValidate = jasmine.createSpy('onValidate');\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    var hot = handsontable({\n      data: [\n        {id: 'sth', name: 'Steve'},\n        {id: 'sth else', name: 'Bob'}\n      ],\n      columns: [\n        {\n          data: 'id',\n          validator(value, cb) {\n            cb(value == parseInt(value, 10));\n          }\n        },\n        {data: 'name'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      expect(onValidate.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should call the validation callback only once, when using the validateCells method on a mixed set of data and when columns is a function', (done) => {\n    var onValidate = jasmine.createSpy('onValidate');\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    var hot = handsontable({\n      data: [\n        {id: 'sth', name: 'Steve'},\n        {id: 'sth else', name: 'Bob'}\n      ],\n      columns(column) {\n        var colMeta = null;\n\n        if (column === 0) {\n          colMeta = {\n            data: 'id',\n            validator(value, cb) {\n              cb(value == parseInt(value, 10));\n            }\n          };\n\n        } else if (column === 1) {\n          colMeta = {data: 'name'};\n        }\n\n        return colMeta;\n      },\n      afterValidate: onAfterValidate\n    });\n\n    hot.validateCells(onValidate);\n\n    setTimeout(() => {\n      expect(onValidate).toHaveBeenCalledWith(false);\n      expect(onValidate.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_validate.spec.js","describe('Core_view', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should focus cell after viewport is scrolled using down arrow', function() {\n    this.$container[0].style.width = '400px';\n    this.$container[0].style.height = '60px';\n\n    handsontable({\n      startRows: 20\n    });\n    selectCell(0, 0);\n\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n\n    expect(getSelected()).toEqual([4, 0, 4, 0]);\n\n    keyDown('enter');\n\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should not render \"undefined\" class name', function() {\n    this.$container[0].style.width = '501px';\n    this.$container[0].style.height = '100px';\n    this.$container[0].style.overflow = 'hidden';\n\n    var hot = handsontable({\n      startRows: 10,\n      startCols: 5,\n      colWidths: [47, 47, 47, 47, 47],\n      rowHeaders: true,\n      colHeaders: true,\n      stretchH: 'all'\n    });\n\n    selectCell(0, 0);\n\n    expect(this.$container.find('.undefined').length).toBe(0);\n  });\n\n  it('should scroll viewport when partially visible cell is clicked', function() {\n    this.$container[0].style.width = '400px';\n    this.$container[0].style.height = '60px';\n\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 3),\n      height: 60\n    });\n\n    var htCore = getHtCore();\n    var scrollTop = hot.rootElement.querySelector('.wtHolder').scrollTop;\n\n    expect(scrollTop).toBe(0);\n    expect(this.$container.height()).toEqual(60);\n    expect(this.$container.find('.wtHolder .wtHider').height()).toBeGreaterThan(60);\n\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    htCore.find('tr:eq(3) td:eq(0)').simulate('mousedown');\n\n    expect(hot.rootElement.querySelector('.wtHolder').scrollTop).toBeGreaterThan(scrollTop);\n    expect(getSelected()).toEqual([3, 0, 3, 0]);\n  });\n\n  it('should scroll viewport without cell selection', function() {\n    this.$container[0].style.width = '400px';\n\n    var hot1 = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 20),\n      height: 100\n    });\n\n    hot1.scrollViewportTo(10, 10);\n\n    var wtHolder = this.$container.find('.ht_master .wtHolder');\n\n    expect(wtHolder[0].scrollTop).toEqual(230);\n    expect(wtHolder[0].scrollLeft).toEqual(500);\n\n  });\n\n  it('should not throw error while scrolling viewport to 0, 0 (empty data)', function() {\n    this.$container[0].style.width = '400px';\n\n    var hot1 = handsontable({\n      data: [],\n      height: 100\n    });\n\n    expect(() => {\n      hot1.view.scrollViewport({row: 0, col: 0});\n    }).not.toThrow();\n  });\n\n  it('should throw error while scrolling viewport below 0 (empty data)', function() {\n    this.$container[0].style.width = '400px';\n\n    var hot1 = handsontable({\n      data: [],\n      height: 100\n    });\n\n    expect(() => {\n      hot1.view.scrollViewport({row: -1, col: 0});\n    }).toThrow();\n    expect(() => {\n      hot1.view.scrollViewport({row: 0, col: -1});\n    }).toThrow();\n    expect(() => {\n      hot1.view.scrollViewport({row: -1, col: -1});\n    }).toThrow();\n  });\n\n  it('should scroll viewport, respecting fixed rows', function() {\n    this.$container[0].style.width = '400px';\n    this.$container[0].style.height = '60px';\n\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 9),\n      fixedRowsTop: 1,\n      height: 60\n    });\n\n    var htCore = getHtCore();\n    var scrollTop = hot.rootElement.querySelector('.wtHolder').scrollTop;\n\n    expect(scrollTop).toBe(0);\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(0) td:eq(1)').html()).toEqual('B1');\n    expect(htCore.find('tr:eq(0) td:eq(2)').html()).toEqual('C1');\n\n    selectCell(0, 0);\n\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n\n    expect(hot.rootElement.querySelector('.wtHolder').scrollTop).toBeGreaterThan(scrollTop);\n  });\n\n  it('should enable to change fixedRowsTop with updateSettings', function() {\n    this.$container[0].style.width = '400px';\n    this.$container[0].style.height = '60px';\n\n    var HOT = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 9),\n      fixedRowsTop: 1,\n      width: 200,\n      height: 100\n    });\n\n    selectCell(0, 0);\n\n    var htCore = getHtCore();\n    var topClone = getTopClone();\n\n    expect(topClone.find('tr').length).toEqual(1);\n    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n    expect(htCore.find('tr:eq(3) td:eq(0)').html()).toEqual('A4');\n\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n    keyDown('arrow_down');\n\n    expect(topClone.find('tr').length).toEqual(1);\n    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n\n    HOT.updateSettings({\n      fixedRowsTop: 2\n    });\n\n    expect(topClone.find('tr').length).toEqual(2);\n    expect(topClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(topClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n    expect(htCore.find('tr:eq(3) td:eq(0)').html()).toEqual('A4');\n  });\n\n  it('should scroll viewport, respecting fixed columns', function() {\n    this.$container[0].style.width = '200px';\n    this.$container[0].style.height = '100px';\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 9),\n      fixedColumnsLeft: 1\n    });\n\n    var htCore = getHtCore();\n    var leftClone = this.$container.find('.ht_clone_left');\n\n    expect(leftClone.find('tr:eq(0) td').length).toEqual(1);\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    expect(htCore.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(htCore.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(htCore.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    selectCell(0, 3);\n\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n  });\n\n  it('should enable to change fixedColumnsLeft with updateSettings', function() {\n    this.$container[0].style.width = '200px';\n    this.$container[0].style.height = '100px';\n\n    var HOT = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 9),\n      fixedColumnsLeft: 1\n    });\n\n    selectCell(0, 0);\n\n    var leftClone = this.$container.find('.ht_clone_left');\n\n    expect(leftClone.find('tr:eq(0) td').length).toEqual(1);\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n    keyDown('arrow_right');\n\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n\n    selectCell(0, 0);\n\n    HOT.updateSettings({\n      fixedColumnsLeft: 2\n    });\n\n    expect(leftClone.find('tr:eq(0) td').length).toEqual(2);\n    expect(leftClone.find('tr:eq(0) td:eq(0)').html()).toEqual('A1');\n    expect(leftClone.find('tr:eq(0) td:eq(1)').html()).toEqual('B1');\n    expect(leftClone.find('tr:eq(1) td:eq(0)').html()).toEqual('A2');\n    expect(leftClone.find('tr:eq(1) td:eq(1)').html()).toEqual('B2');\n    expect(leftClone.find('tr:eq(2) td:eq(0)').html()).toEqual('A3');\n    expect(leftClone.find('tr:eq(2) td:eq(1)').html()).toEqual('B3');\n\n  });\n\n  it('should not scroll viewport when last cell is clicked', () => {\n    handsontable({\n      startRows: 40\n    });\n\n    var lastScroll;\n\n    $(window).scrollTop(10000);\n    lastScroll = $(window).scrollTop();\n    render(); // renders synchronously so we don't have to put stuff in waits/runs\n    selectCell(39, 0);\n\n    expect($(window).scrollTop()).toEqual(lastScroll);\n\n    keyDown('arrow_right');\n\n    expect(getSelected()).toEqual([39, 1, 39, 1]);\n    expect($(window).scrollTop()).toEqual(lastScroll);\n  });\n\n  it('should not shrink table when width and height is not specified for container', function(done) {\n    var initHeight;\n\n    this.$container[0].style.overflow = 'hidden';\n    this.$container.wrap('<div style=\"width: 50px;\"></div>');\n    handsontable({\n      startRows: 10,\n      startCols: 10\n    });\n\n    setTimeout(() => {\n      initHeight = spec().$container.height();\n    }, 250);\n\n    setTimeout(() => {\n      expect(spec().$container.height()).toEqual(initHeight);\n      done();\n    }, 500);\n  });\n\n  it('should allow height to be a number', function() {\n    handsontable({\n      startRows: 10,\n      startCols: 10,\n      height: 107\n    });\n\n    expect(this.$container.height()).toEqual(107);\n  });\n\n  it('should allow height to be a function', function() {\n    handsontable({\n      startRows: 10,\n      startCols: 10,\n      height() {\n        return 107;\n      }\n    });\n\n    expect(this.$container.height()).toEqual(107);\n  });\n\n  it('should allow width to be a number', function() {\n    handsontable({\n      startRows: 10,\n      startCols: 10,\n      width: 107,\n    });\n\n    expect(this.$container.width()).toEqual(107); // rootElement is full width but this should do the trick\n  });\n\n  it('should allow width to be a function', function() {\n    handsontable({\n      startRows: 10,\n      startCols: 10,\n      width() {\n        return 107;\n      }\n    });\n\n    expect(this.$container.width()).toEqual(107); // rootElement is full width but this should do the trick\n  });\n\n  it('should fire beforeRender event after table has been scrolled', function(done) {\n    this.$container[0].style.width = '400px';\n    this.$container[0].style.height = '60px';\n    this.$container[0].style.overflow = 'hidden';\n\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(100, 3)\n    });\n\n    var beforeRenderCallback = jasmine.createSpy('beforeRenderCallback');\n\n    hot.addHook('beforeRender', beforeRenderCallback);\n    this.$container.find('.ht_master .wtHolder').scrollTop(1000);\n\n    setTimeout(() => {\n      expect(beforeRenderCallback.calls.count()).toBe(1);\n      done();\n    }, 200);\n  });\n\n  it('should fire afterRender event after table has been scrolled', function(done) {\n    this.$container[0].style.width = '400px';\n    this.$container[0].style.height = '60px';\n    this.$container[0].style.overflow = 'hidden';\n\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 3)\n    });\n\n    var afterRenderCallback = jasmine.createSpy('afterRenderCallback');\n    hot.addHook('afterRender', afterRenderCallback);\n    this.$container.find('.ht_master .wtHolder').first().scrollTop(1000);\n\n    setTimeout(() => {\n      expect(afterRenderCallback.calls.count()).toBe(1);\n      done();\n    }, 200);\n  });\n\n  it('should fire afterRender event after table physically rendered', function(done) {\n    this.$container[0].style.width = '400px';\n    this.$container[0].style.height = '60px';\n    this.$container[0].style.overflow = 'hidden';\n\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 3)\n    });\n\n    hot.addHook('afterRender', () => {\n      hot.view.wt.wtTable.holder.style.overflow = 'scroll';\n      hot.view.wt.wtTable.holder.style.width = '220px';\n    });\n    this.$container.find('.ht_master .wtHolder').first().scrollTop(1000);\n\n    setTimeout(() => {\n      // after afterRender hook triggered element style shouldn't changed\n      expect(hot.view.wt.wtTable.holder.style.overflow).toBe('scroll');\n      expect(hot.view.wt.wtTable.holder.style.width).toBe('220px');\n      done();\n    }, 100);\n  });\n\n  // TODO fix these tests - https://github.com/handsontable/handsontable/issues/1559\n  describe('maximumVisibleElementWidth', () => {\n    it('should return maximum width until right edge of the viewport', () => {\n      var hot = handsontable({\n        startRows: 2,\n        startCols: 10,\n        width: 100,\n        height: 100,\n      });\n\n      expect(hot.view.maximumVisibleElementWidth(0)).toEqual(100);\n    });\n\n    it('should return maximum width until right edge of the viewport (excluding the scrollbar)', () => {\n      var hot = handsontable({\n        startRows: 10,\n        startCols: 10,\n        width: 100,\n        height: 100,\n      });\n\n      expect(hot.view.maximumVisibleElementWidth(200)).toBeLessThan(100);\n    });\n  });\n\n  describe('maximumVisibleElementHeight', () => {\n    it('should return maximum height until bottom edge of the viewport', () => {\n      var hot = handsontable({\n        startRows: 10,\n        startCols: 2,\n        width: 120,\n        height: 100,\n      });\n\n      expect(hot.view.maximumVisibleElementHeight(0)).toEqual(100);\n    });\n\n    it('should return maximum height until bottom edge of the viewport (excluding the scrollbar)', () => {\n      var hot = handsontable({\n        startRows: 10,\n        startCols: 10,\n        width: 120,\n        height: 100,\n      });\n\n      expect(hot.view.maximumVisibleElementHeight()).toBeLessThan(100);\n    });\n  });\n\n  describe('fixed column row heights', () => {\n    it('should be the same as the row heights in the main table', () => {\n      var hot = handsontable({\n        data: [['A', 'B', 'C', 'D'], ['a', 'b', 'c\\nc', 'd'], ['aa', 'bb', 'cc', 'dd']],\n        startRows: 3,\n        startCols: 4,\n        fixedColumnsLeft: 2,\n      });\n\n      expect(hot.getCell(1, 2).clientHeight).toEqual(hot.getCell(1, 1).clientHeight);\n\n      hot.setDataAtCell(1, 2, 'c');\n\n      expect(hot.getCell(1, 2).clientHeight).toEqual(hot.getCell(1, 1).clientHeight);\n    });\n\n    it('should be the same as the row heights in the main table (after scroll)', function() {\n      var myData = Handsontable.helper.createSpreadsheetData(20, 4);\n      myData[1][3] = 'very\\nlong\\ntext';\n      myData[5][3] = 'very\\nlong\\ntext';\n      myData[10][3] = 'very\\nlong\\ntext';\n      myData[15][3] = 'very\\nlong\\ntext';\n\n      var hot = handsontable({\n        data: myData,\n        startRows: 3,\n        startCols: 4,\n        fixedRowsTop: 2,\n        fixedColumnsLeft: 2,\n        width: 200,\n        height: 200\n      });\n\n      var mainHolder = hot.view.wt.wtTable.holder;\n\n      $(mainHolder).scrollTop(200);\n      hot.render();\n\n      var masterTD = this.$container.find('.ht_master tbody tr:eq(5) td:eq(1)')[0];\n      var cloneTD = this.$container.find('.ht_clone_left tbody tr:eq(5) td:eq(1)')[0];\n\n      expect(cloneTD.clientHeight).toEqual(masterTD.clientHeight);\n    });\n\n    it('should be the same as the row heights in the main table (after scroll, in corner)', function() {\n      var myData = Handsontable.helper.createSpreadsheetData(20, 4);\n      myData[1][3] = 'very\\nlong\\ntext';\n      myData[5][3] = 'very\\nlong\\ntext';\n      myData[10][3] = 'very\\nlong\\ntext';\n      myData[15][3] = 'very\\nlong\\ntext';\n\n      var hot = handsontable({\n        data: myData,\n        startRows: 3,\n        startCols: 4,\n        fixedRowsTop: 2,\n        fixedColumnsLeft: 2,\n        width: 200,\n        height: 200\n      });\n\n      var rowHeight = hot.getCell(1, 3).clientHeight;\n      var mainHolder = hot.view.wt.wtTable.holder;\n\n      expect(this.$container.find('.ht_clone_top_left_corner tbody tr:eq(1) td:eq(1)')[0].clientHeight).toEqual(rowHeight);\n\n      $(mainHolder).scrollTop(200);\n      hot.render();\n\n      expect(this.$container.find('.ht_clone_top_left_corner tbody tr:eq(1) td:eq(1)')[0].clientHeight).toEqual(rowHeight);\n    });\n  });\n\n  describe('fixed column widths', () => {\n    it('should set the columns width correctly after changes made during updateSettings', function() {\n      var hot = handsontable({\n        startRows: 2,\n        fixedColumnsLeft: 2,\n        columns: [{\n          width: 50\n        }, {\n          width: 80\n        }, {\n          width: 110\n        }, {\n          width: 140\n        }, {\n          width: 30\n        }, {\n          width: 30\n        }, {\n          width: 30\n        }]\n      });\n\n      var leftClone = this.$container.find('.ht_clone_left');\n\n      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);\n\n      hot.updateSettings({\n        manualColumnMove: [2, 0, 1],\n        fixedColumnsLeft: 1\n      });\n\n      expect(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0]).toBe(undefined);\n\n      hot.updateSettings({\n        manualColumnMove: false,\n        fixedColumnsLeft: 2\n      });\n\n      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);\n    });\n\n    it('should set the columns width correctly after changes made during updateSettings when columns is a function', function() {\n      var hot = handsontable({\n        startCols: 7,\n        startRows: 2,\n        fixedColumnsLeft: 2,\n        columns(column) {\n          var colMeta = {};\n\n          if (column === 0) {\n            colMeta.width = 50;\n\n          } else if (column === 1) {\n            colMeta.width = 80;\n\n          } else if (column === 2) {\n            colMeta.width = 110;\n\n          } else if (column === 3) {\n            colMeta.width = 140;\n\n          } else if ([4, 5, 6].indexOf(column) > -1) {\n            colMeta.width = 30;\n\n          } else {\n            colMeta = null;\n          }\n\n          return colMeta;\n        }\n      });\n\n      var leftClone = this.$container.find('.ht_clone_left');\n\n      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);\n\n      hot.updateSettings({\n        manualColumnMove: [2, 0, 1],\n        fixedColumnsLeft: 1\n      });\n\n      expect(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0]).toBe(undefined);\n\n      hot.updateSettings({\n        manualColumnMove: false,\n        fixedColumnsLeft: 2\n      });\n\n      expect(Handsontable.dom.outerWidth(leftClone.find('tbody tr:nth-child(1) td:nth-child(2)')[0])).toEqual(80);\n    });\n  });\n\n  describe('stretchH', () => {\n    it('should stretch all visible columns with the ratio appropriate to the container\\'s width', function() {\n      this.$container[0].style.width = '300px';\n\n      var hot = handsontable({\n          startRows: 5,\n          startCols: 5,\n          rowHeaders: true,\n          colHeaders: true,\n          stretchH: 'all'\n        }),\n        rowHeaderWidth = hot.view.wt.wtViewport.getRowHeaderWidth(),\n        expectedCellWidth = (parseInt(this.$container[0].style.width, 10) - rowHeaderWidth) / 5;\n\n      expect(getCell(0, 0).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 1).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 2).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 3).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 4).offsetWidth).toEqual(expectedCellWidth);\n\n      this.$container[0].style.width = '';\n      this.$container.wrap('<div class=\"temp_wrapper\" style=\"width:400px;\"></div>');\n      hot.render();\n\n      expectedCellWidth = (parseInt($('.temp_wrapper')[0].style.width, 10) - rowHeaderWidth) / 5;\n\n      expect(getCell(0, 0).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 1).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 2).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 3).offsetWidth).toEqual(expectedCellWidth);\n      expect(getCell(0, 4).offsetWidth).toEqual(expectedCellWidth);\n\n      this.$container.unwrap();\n    });\n\n    it('should stretch all visible columns with overflow hidden', function() {\n      this.$container[0].style.width = '501px';\n      this.$container[0].style.height = '100px';\n      this.$container[0].style.overflow = 'hidden';\n\n      var hot = handsontable({\n        startRows: 10,\n        startCols: 5,\n        colWidths: [47, 47, 47, 47, 47],\n        rowHeaders: true,\n        colHeaders: true,\n        stretchH: 'all'\n      });\n\n      var masterTH = this.$container[0].querySelectorAll('.ht_master thead tr th');\n      var overlayTH = this.$container[0].querySelectorAll('.ht_clone_top thead tr th');\n\n      expect(masterTH[0].offsetWidth).toEqual(50);\n      expect(overlayTH[0].offsetWidth).toEqual(50);\n\n      expect(masterTH[1].offsetWidth).toBeInArray([86, 87, 88, 90]);\n      expect(overlayTH[1].offsetWidth).toBeInArray([86, 87, 88, 90]); // if you get 90, it means it is calculated before scrollbars were applied, or show scroll on scrolling is enabled\n\n      expect(masterTH[2].offsetWidth).toEqual(overlayTH[2].offsetWidth);\n      expect(masterTH[3].offsetWidth).toEqual(overlayTH[3].offsetWidth);\n      expect(masterTH[4].offsetWidth).toEqual(overlayTH[4].offsetWidth);\n      expect(masterTH[5].offsetWidth).toEqual(overlayTH[5].offsetWidth);\n    });\n\n    it('should respect stretched widths returned in beforeStretchingColumnWidth hook', function() {\n      this.$container[0].style.width = '501px';\n      this.$container[0].style.height = '100px';\n      this.$container[0].style.overflow = 'hidden';\n\n      var callbackSpy = jasmine.createSpy();\n\n      callbackSpy.and.callFake((width, column) => {\n        if (column === 1) {\n          return 150;\n        }\n\n        return width;\n      });\n\n      var hot = handsontable({\n        startRows: 2,\n        startCols: 5,\n        rowHeaders: true,\n        colHeaders: true,\n        stretchH: 'all',\n        beforeStretchingColumnWidth: callbackSpy\n      });\n\n      var $columnHeaders = this.$container.find('thead tr:eq(0) th');\n\n      expect($columnHeaders.eq(0).width()).toEqual(48);\n      expect($columnHeaders.eq(1).width()).toEqual(73);\n      expect($columnHeaders.eq(2).width()).toEqual(149);\n      expect($columnHeaders.eq(3).width()).toEqual(74);\n      expect($columnHeaders.eq(4).width()).toEqual(74);\n\n      expect(callbackSpy).toHaveBeenCalled();\n      // First cycle to check what columns has permanent width\n      expect(callbackSpy.calls.argsFor(0)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(0)[1]).toBe(0);\n      expect(callbackSpy.calls.argsFor(1)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(1)[1]).toBe(1);\n      expect(callbackSpy.calls.argsFor(2)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(2)[1]).toBe(2);\n      expect(callbackSpy.calls.argsFor(3)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(3)[1]).toBe(3);\n      expect(callbackSpy.calls.argsFor(4)[0]).not.toBeDefined();\n      expect(callbackSpy.calls.argsFor(4)[1]).toBe(4);\n      // // Second cycle retrieve stretched width or permanent width\n      expect(callbackSpy.calls.argsFor(5)[0]).toBe(75);\n      expect(callbackSpy.calls.argsFor(6)[0]).toBe(75);\n      expect(callbackSpy.calls.argsFor(7)[0]).toBe(75);\n      expect(callbackSpy.calls.argsFor(8)[0]).toBe(75);\n      expect(callbackSpy.calls.argsFor(9)[0]).toBe(75);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Core_view.spec.js","describe('Handsontable.Dom', () => {\n\n  describe('offset', () => {\n    var $window = $(window),\n      $forceScrollbar = $('<div id=\"forceScrollbar\"></div>').css({\n        position: 'absolute',\n        height: '4000px',\n        width: '4000px',\n        top: 0,\n        left: 0\n      });\n\n    beforeEach(function() {\n      $forceScrollbar.appendTo(document.body);\n      this.$div = $('<div id=\"test\"></div>').appendTo($forceScrollbar);\n      this.div = this.$div[0];\n    });\n\n    afterEach(function() {\n      this.$div.remove();\n      $forceScrollbar.remove();\n    });\n\n    describe('top', () => {\n      it('should return offset top with position absolute', function() {\n        this.$div.css({position: 'absolute', top: 200});\n\n        expect(Handsontable.dom.offset(this.div).top).toEqual(200);\n      });\n\n      it('should return offset top with position absolute & scrolled window', function() {\n        this.$div.css({position: 'absolute', top: 200});\n        $window.scrollTop(1900);\n\n        expect(Handsontable.dom.offset(this.div).top).toEqual(200);\n\n        $window.scrollTop(0);\n      });\n\n      it('should return offset top with position fixed', function() {\n        this.$div.css({position: 'fixed', top: 200});\n\n        expect(Handsontable.dom.offset(this.div).top).toEqual(200);\n      });\n\n      it('should return offset top with position fixed & scrolled window', function() {\n        this.$div.css({position: 'fixed', top: 200});\n        $window.scrollTop(1900);\n\n        expect(Handsontable.dom.offset(this.div).top).toEqual(2100); // this is the same jQuery offset returns\n\n        $window.scrollTop(0);\n      });\n    });\n\n    describe('left', () => {\n      it('should return offset left with position absolute', function() {\n        this.$div.css({position: 'absolute', left: 200});\n\n        expect(Handsontable.dom.offset(this.div).left).toEqual(200);\n      });\n\n      it('should return offset left with position absolute & scrolled window', function() {\n        this.$div.css({position: 'absolute', left: 200});\n        $window.scrollLeft(1900);\n\n        expect(Handsontable.dom.offset(this.div).left).toEqual(200);\n\n        $window.scrollLeft(0);\n      });\n\n      it('should return offset left with position fixed', function() {\n        this.$div.css({position: 'fixed', left: 200});\n\n        expect(Handsontable.dom.offset(this.div).left).toEqual(200);\n      });\n\n      it('should return offset left with position fixed & scrolled window', function() {\n        this.$div.css({position: 'fixed', left: 200});\n        $window.scrollLeft(1900);\n\n        expect(Handsontable.dom.offset(this.div).left).toEqual(2100); // this is the same jQuery offset returns\n\n        $window.scrollLeft(0);\n      });\n    });\n  });\n\n  describe('isVisible', () => {\n    it('should return true for appended table', () => {\n      var $table = $('<table></table>').appendTo('body');\n\n      expect(Handsontable.dom.isVisible($table[0])).toBe(true);\n\n      $table.remove();\n    });\n\n    it('should return false for not appended table', () => {\n      var $table = $('<table></table>');\n\n      expect(Handsontable.dom.isVisible($table[0])).toBe(false);\n\n      $table.remove();\n    });\n\n    it('should return false for table with `display: none`', () => {\n      var $table = $('<table style=\"display: none\"></table>').appendTo('body');\n\n      expect(Handsontable.dom.isVisible($table[0])).toBe(false);\n\n      $table.remove();\n    });\n\n    it('should return false for table with parent `display: none`', () => {\n      var $div = $('<div style=\"display: none\"></div>').appendTo('body');\n      var $table = $('<table></table>').appendTo($div);\n\n      expect(Handsontable.dom.isVisible($table[0])).toBe(false);\n\n      $table.remove();\n    });\n\n    it('should return false for something detached from DOM', () => {\n      var $table = $('<table><tr><td></td></tr></table>').appendTo('body');\n\n      var TD = $table.find('td')[0];\n      var TR = TD.parentNode;\n      expect(Handsontable.dom.isVisible(TD)).toBe(true);\n      TR.parentNode.removeChild(TR);\n      expect(Handsontable.dom.isVisible(TD)).toBe(false);\n\n      $table.remove();\n    });\n  });\n\n  describe('outerHeight', () => {\n    it('should return correct outerHeight for table', () => {\n      var $table = $('<table style=\"border-width: 0;\"><tbody><tr><td style=\"border: 1px solid black\"><div style=\"height: 30px\">test</div></td>' +\n                     '</tr></tbody></table>').appendTo('body');\n\n      expect(Handsontable.dom.outerHeight($table[0])).toBe(38); // this is according to current stylesheet\n      expect($table.outerHeight()).toBe(38); // jQuery check to confirm\n\n      $table.remove();\n    });\n\n    it('should return correct outerHeight for table (with caption)', () => {\n      var $table = $('<table style=\"border-width: 0;\"><caption style=\"padding: 0; margin:0\"><div style=\"height: 30px\">caption</div></caption><tbody>' +\n                     '<tr><td style=\"border: 1px solid black\"><div style=\"height: 30px\">test</div></td></tr></tbody></table>').appendTo('body');\n\n      expect(Handsontable.dom.outerHeight($table[0])).toBe(68); // this is according to current stylesheet\n\n      $table.remove();\n    });\n  });\n\n  it('should return correct offset for table cell (table with caption)', () => {\n    var $table = $('<table style=\"border-width: 0;\"><caption style=\"padding: 0; margin:0\"><div style=\"height: 30px\">caption</div></caption><tbody>' +\n                   '<tr><td style=\"border: 1px solid black\"><div style=\"height: 30px\">test</div></td></tr></tbody></table>').appendTo('body');\n\n    var tableOffset = Handsontable.dom.offset($table[0]);\n    var tdOffset = Handsontable.dom.offset($table.find('td')[0]);\n\n    expect(parseInt(tdOffset.left - tableOffset.left, 10)).toBeAroundValue(2); // this is according to current stylesheet\n    expect(parseInt(tdOffset.top - tableOffset.top, 10)).toBeAroundValue(32); // this is according to current stylesheet\n\n    $table.remove();\n  });\n\n  it('should return font size', () => {\n    var $html = $('<style>.bigText{font: 12px serif;}</style><div class=\"bigText\"><span id=\"testable\"></span></div>').appendTo('body');\n\n    var span = document.getElementById('testable');\n    var compStyle = Handsontable.dom.getComputedStyle(span);\n\n    expect(compStyle.fontSize).toBe('12px');\n\n    $html.remove();\n  });\n\n  it('should return top border width', () => {\n    var $html = $('<style>.redBorder{border: 10px solid red;}</style><div class=\"redBorder\" id=\"testable\"></div>').appendTo('body');\n\n    var div = document.getElementById('testable');\n    var compStyle = Handsontable.dom.getComputedStyle(div);\n\n    expect(compStyle.borderTopWidth).toBe('10px');\n\n    $html.remove();\n  });\n\n  it('should insert HTML properly', () => {\n    var $html = $('<div id=\"testable\"></div>').appendTo('body');\n    var text = '<span>test<br>test</span>';\n    var div = document.getElementById('testable');\n\n    Handsontable.dom.fastInnerHTML(div, text);\n    Handsontable.dom.fastInnerHTML(div, text);\n\n    expect(div.childNodes[0].childNodes.length).toEqual(3);\n\n    $html.remove();\n  });\n\n  it('should set the immediatePropagation properties properly for given event', () => {\n    var event = document.createEvent('MouseEvents');\n    event.initMouseEvent('mousedown', true, true, window, null, null, null, null, null, null, null, null, null, null, null);\n\n    Handsontable.dom.stopImmediatePropagation(event);\n\n    expect(event.isImmediatePropagationEnabled).toBe(false);\n\n    expect(Handsontable.dom.isImmediatePropagationStopped(event)).toBe(true);\n  });\n\n  describe('getScrollableElement', () => {\n    it('should return scrollable element with \\'scroll\\' value of \\'overflow\\', \\'overflowX\\' or \\'overflowY\\' property', () => {\n      var $html = $([\n        '<div style=\"overflow: scroll\"><span class=\"overflow\"></span></div>',\n        '<div style=\"overflow-x: scroll\"><span class=\"overflowX\"></span></div>',\n        '<div style=\"overflow-y: scroll\"><span class=\"overflowY\"></span></div>'\n      ].join('')).appendTo('body');\n\n      expect(Handsontable.dom.getScrollableElement($html.find('.overflow')[0])).toBe($html[0]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.overflowX')[0])).toBe($html[1]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.overflowY')[0])).toBe($html[2]);\n\n      $html.remove();\n    });\n\n    it('should return scrollable element with \\'auto\\' value of \\'overflow\\' or \\'overflowY\\' property', () => {\n      var $html = $([\n        '<div style=\"overflow: auto; height: 50px;\"><div class=\"knob\" style=\"height: 100px\"></div></div>',\n        '<div style=\"overflow-y: auto; height: 50px;\"><div class=\"knob\" style=\"height: 100px\"></div></div>',\n        '<div style=\"overflow-y: auto; height: 50px;\">',\n        '<div>',\n        '<div class=\"knob\" style=\"height: 100px;\"></div>',\n        '</div>',\n        '</div>'\n      ].join('')).appendTo('body');\n\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe($html[0]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe($html[1]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[2])).toBe($html[2]);\n\n      $html.remove();\n    });\n\n    it('should return scrollable element with \\'auto\\' value of \\'overflow\\' or \\'overflowX\\' property', () => {\n      var $html = $([\n        '<div style=\"overflow: auto; width: 50px; height: 10px\"><div class=\"knob\" style=\"width: 100px; height: 5px\"></div></div>',\n        '<div style=\"overflow-x: auto; width: 50px; height: 10px\"><div class=\"knob\" style=\"width: 100px; height: 5px\"></div></div>',\n        '<div style=\"overflow-x: auto; width: 50px; height: 10px\">',\n        '<div>',\n        '<div class=\"knob\" style=\"width: 100px; height: 5px\"></div>',\n        '</div>',\n        '</div>'\n      ].join('')).appendTo('body');\n\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe($html[0]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe($html[1]);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[2])).toBe($html[2]);\n\n      $html.remove();\n    });\n\n    it('should return window object as scrollable element', () => {\n      var $html = $([\n        '<div style=\"overflow: hidden; width: 50px; height: 10px\"><div class=\"knob\" style=\"width: 100px; height: 5px\"></div></div>',\n        '<div style=\"width: 50px; height: 10px\"><div class=\"knob\" style=\"width: 100px; height: 5px\"></div></div>'\n      ].join('')).appendTo('body');\n\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[0])).toBe(window);\n      expect(Handsontable.dom.getScrollableElement($html.find('.knob')[1])).toBe(window);\n\n      $html.remove();\n    });\n  });\n\n  //\n  // Handsontable.dom.isChildOfWebComponentTable\n  //\n  describe('isChildOfWebComponentTable', () => {\n    it('should return correct Boolean value depending on whether an element exists in `hot-table` or not', () => {\n      // skip if browser not support Shadow DOM natively\n      if (!document.createElement('div').createShadowRoot) {\n        // Fix for \"no exceptations\" warnings\n        expect(true).toBe(true);\n\n        return;\n      }\n      var hotTable = document.createElement('hot-table');\n      var outsideDiv = document.createElement('div');\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(hotTable)).toBe(true);\n      expect(Handsontable.dom.isChildOfWebComponentTable(outsideDiv)).toBe(false);\n\n      var hotTableDiv = document.createElement('div');\n      hotTable.appendChild(hotTableDiv);\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(hotTableDiv)).toBe(true);\n\n      var fragment = document.createDocumentFragment();\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(fragment)).toBe(false);\n\n      var myElement = document.createElement('my-element');\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(myElement)).toBe(false);\n\n      var shadowRoot = myElement.createShadowRoot();\n      var insideDiv = shadowRoot.appendChild(document.createElement('div'));\n      hotTable.createShadowRoot().appendChild(myElement);\n\n      expect(Handsontable.dom.isChildOfWebComponentTable(myElement)).toBe(true);\n      expect(Handsontable.dom.isChildOfWebComponentTable(insideDiv)).toBe(true);\n    });\n  });\n\n  //\n  // Handsontable.dom.polymerWrap\n  //\n  describe('polymerWrap', () => {\n    it('should wrap element into polymer wrapper if exists', () => {\n      expect(Handsontable.dom.polymerWrap(1)).toBe(1);\n\n      window.wrap = function() { return 'wrapped'; };\n      window.Polymer = {};\n\n      expect(Handsontable.dom.polymerWrap(1)).toBe('wrapped');\n\n      // Test https://github.com/handsontable/handsontable/issues/2283\n      window.wrap = document.createElement('div');\n\n      expect(Handsontable.dom.polymerWrap(1)).toBe(1);\n\n      delete window.wrap;\n      delete window.Polymer;\n    });\n  });\n\n  //\n  // Handsontable.dom.polymerUnwrap\n  //\n  describe('polymerUnwrap', () => {\n    it('should unwrap element from polymer wrapper if exists', () => {\n      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe('wrapped');\n\n      window.unwrap = function() { return 1; };\n      window.Polymer = {};\n\n      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe(1);\n\n      window.unwrap = document.createElement('div');\n\n      expect(Handsontable.dom.polymerUnwrap('wrapped')).toBe('wrapped');\n\n      delete window.unwrap;\n      delete window.Polymer;\n    });\n  });\n\n  //\n  // Handsontable.dom.addClass\n  //\n  describe('addClass', () => {\n    it('should add class names as string to an element', () => {\n      var element = document.createElement('div');\n\n      expect(element.className).toBe('');\n\n      Handsontable.dom.addClass(element, 'test');\n\n      expect(element.className).toBe('test');\n\n      Handsontable.dom.addClass(element, 'test test1 test2');\n\n      expect(element.className).toBe('test test1 test2');\n\n      Handsontable.dom.addClass(element, 'test3');\n\n      expect(element.className).toBe('test test1 test2 test3');\n\n      Handsontable.dom.addClass(element, '');\n\n      expect(element.className).toBe('test test1 test2 test3');\n    });\n\n    it('should add class names as array to an element', () => {\n      var element = document.createElement('div');\n\n      expect(element.className).toBe('');\n\n      Handsontable.dom.addClass(element, ['test']);\n\n      expect(element.className).toBe('test');\n\n      Handsontable.dom.addClass(element, ['test1', 'test2', 'test3']);\n\n      expect(element.className).toBe('test test1 test2 test3');\n\n      Handsontable.dom.addClass(element, 'test4');\n\n      expect(element.className).toBe('test test1 test2 test3 test4');\n\n      Handsontable.dom.addClass(element, '');\n\n      expect(element.className).toBe('test test1 test2 test3 test4');\n    });\n  });\n\n  //\n  // Handsontable.dom.removeClass\n  //\n  describe('removeClass', () => {\n    it('should remove class names as string from an element', () => {\n      var element = document.createElement('div');\n\n      element.className = 'test test1 test2 test3 test4';\n\n      Handsontable.dom.removeClass(element, 'not-exists');\n\n      expect(element.className).toBe('test test1 test2 test3 test4');\n\n      Handsontable.dom.removeClass(element, 'test');\n\n      expect(element.className).toBe('test1 test2 test3 test4');\n\n      Handsontable.dom.removeClass(element, 'test test1 test4');\n\n      expect(element.className).toBe('test2 test3');\n\n      Handsontable.dom.removeClass(element, '');\n\n      expect(element.className).toBe('test2 test3');\n    });\n\n    it('should remove class names as array from an element', () => {\n      var element = document.createElement('div');\n\n      element.className = 'test test1 test2 test3 test4';\n\n      Handsontable.dom.removeClass(element, ['not-exists']);\n\n      expect(element.className).toBe('test test1 test2 test3 test4');\n\n      Handsontable.dom.removeClass(element, ['test']);\n\n      expect(element.className).toBe('test1 test2 test3 test4');\n\n      Handsontable.dom.removeClass(element, ['test', 'test1', 'test4']);\n\n      expect(element.className).toBe('test2 test3');\n\n      Handsontable.dom.removeClass(element, ['test', '', '']);\n\n      expect(element.className).toBe('test2 test3');\n    });\n  });\n\n  //\n  // Handsontable.dom.hasClass\n  //\n  describe('hasClass', () => {\n    it('should checks if an element has passed class name', () => {\n      var element = document.createElement('div');\n\n      element.className = 'test test1 test2 test3 test4';\n\n      expect(Handsontable.dom.hasClass(element, 'not-exists')).toBe(false);\n      expect(Handsontable.dom.hasClass(element, 'test3')).toBe(true);\n      expect(Handsontable.dom.hasClass(element, 'test')).toBe(true);\n      expect(Handsontable.dom.hasClass(element, '')).toBe(false);\n    });\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Dom.spec.js","describe('FillHandle', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should appear when fillHandle equals true', () => {\n    handsontable({\n      fillHandle: true\n    });\n\n    selectCell(2, 2);\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should appear when fillHandle is enabled as `string` value', () => {\n    handsontable({\n      fillHandle: 'horizontal'\n    });\n\n    selectCell(2, 2);\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should not change cell value (drag vertically when fillHandle option is set to `horizontal`)', function() {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: 'horizontal'\n    });\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(1, 0)).toEqual(7);\n  });\n\n  it('should not change cell value (drag horizontally when fillHandle option is set to `vertical`)', function() {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: 'vertical'\n    });\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n  });\n\n  it('should work properly when fillHandle option is set to object with property `direction` set to `vertical`)', function() {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'vertical'\n      }\n    });\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(1, 0)).toEqual(1);\n  });\n\n  it('should work properly when fillHandle option is set to object with property `direction` set to `horizontal`)', function() {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'horizontal'\n      }\n    });\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(1);\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(1, 0)).toEqual(7);\n  });\n\n  it('should not change cell value (drag when fillHandle is set to `false`)', function() {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: false\n    });\n\n    // checking drag vertically - should not change cell value\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n\n    // checking drag horizontally - should not change cell value\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n  });\n\n  it('should work properly when using updateSettings', function() {\n    var hot = handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: 'horizontal'\n    });\n\n    updateSettings({ fillHandle: 'vertical' });\n\n    // checking drag vertically - should change cell value\n\n    selectCell(0, 0);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(0) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 1)).toEqual(2);\n\n    updateSettings({ fillHandle: false });\n\n    // checking drag vertically - should not change cell value\n\n    selectCell(0, 1);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(1) td:eq(1)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(1, 1)).toEqual(8);\n\n    // checking drag horizontally - should not change cell value\n\n    selectCell(0, 1);\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tbody tr:eq(0) td:eq(2)').simulate('mouseover').simulate('mouseup');\n\n    expect(getDataAtCell(0, 2)).toEqual(3);\n  });\n\n  it('should appear when fillHandle is enabled as `object` value', () => {\n    handsontable({\n      fillHandle: {\n        allowInsertRow: true\n      }\n    });\n\n    selectCell(2, 2);\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should not appear when fillHandle equals false', () => {\n    handsontable({\n      fillHandle: false\n    });\n    selectCell(2, 2);\n\n    expect(isFillHandleVisible()).toBe(false);\n  });\n\n  it('should disappear when beginediting is triggered', () => {\n    handsontable({\n      fillHandle: true\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(isFillHandleVisible()).toBe(false);\n  });\n\n  it('should appear when finishediting is triggered', () => {\n    handsontable({\n      fillHandle: true\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyDown('enter');\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should not appear when fillHandle equals false and finishediting is triggered', () => {\n    handsontable({\n      fillHandle: false\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyDown('enter');\n\n    expect(isFillHandleVisible()).toBe(false);\n  });\n\n  it('should appear when editor is discarded using the ESC key', () => {\n    handsontable({\n      fillHandle: true\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyDown('esc');\n\n    expect(isFillHandleVisible()).toBe(true);\n  });\n\n  it('should add custom value after autofill', function() {\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      beforeAutofill(start, end, data) {\n        data[0][0] = 'test';\n      }\n    });\n    selectCell(0, 0);\n\n    this.$container.find('.wtBorder.corner').simulate('mousedown');\n    this.$container.find('tr:eq(1) td:eq(0)').simulate('mouseover');\n    this.$container.find('tr:eq(2) td:eq(0)').simulate('mouseover');\n    this.$container.find('.wtBorder.corner').simulate('mouseup');\n\n    expect(getSelected()).toEqual([0, 0, 2, 0]);\n    expect(getDataAtCell(1, 0)).toEqual('test');\n  });\n\n  it('should use correct cell coordinates also when Handsontable is used inside a TABLE (#355)', function() {\n    var $table = $('<table><tr><td></td></tr></table>').appendTo('body');\n    this.$container.appendTo($table.find('td'));\n\n    var ev;\n\n    handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      beforeAutofill(start, end, data) {\n        data[0][0] = 'test';\n      }\n    });\n    selectCell(1, 1);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tr:eq(1) td:eq(0)').simulate('mouseover');\n    this.$container.find('tr:eq(2) td:eq(0)').simulate('mouseover');\n    this.$container.find('tr:eq(2) td:eq(0)').simulate('mouseup');\n\n    expect(getSelected()).toEqual([1, 1, 2, 1]);\n    expect(getDataAtCell(2, 1)).toEqual('test');\n\n    document.body.removeChild($table[0]);\n  });\n  it('should fill cells below until the end of content in the neighbouring column with current cell\\'s data', function() {\n    var hot = handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, null, null, null, null],\n        [1, 2, null, null, null, null]\n      ]\n    });\n\n    selectCell(1, 3);\n    var fillHandle = this.$container.find('.wtBorder.current.corner')[0];\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(2, 3)).toEqual(null);\n    expect(getDataAtCell(3, 3)).toEqual(null);\n\n    selectCell(1, 2);\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(2, 2)).toEqual(3);\n    expect(getDataAtCell(3, 2)).toEqual(3);\n\n  });\n\n  it('should fill cells below until the end of content in the neighbouring column with the currently selected area\\'s data', function() {\n    var hot = handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, null, null, null, null],\n        [1, 2, null, null, null, null]\n      ]\n    });\n\n    selectCell(1, 3, 1, 4);\n    var fillHandle = this.$container.find('.wtBorder.area.corner')[0];\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(2, 3)).toEqual(null);\n    expect(getDataAtCell(3, 3)).toEqual(null);\n    expect(getDataAtCell(2, 4)).toEqual(null);\n    expect(getDataAtCell(3, 4)).toEqual(null);\n\n    selectCell(1, 2, 1, 3);\n    mouseDoubleClick(fillHandle);\n\n    expect(getDataAtCell(2, 2)).toEqual(3);\n    expect(getDataAtCell(3, 2)).toEqual(3);\n    expect(getDataAtCell(2, 3)).toEqual(4);\n    expect(getDataAtCell(3, 3)).toEqual(4);\n\n  });\n\n  it('should add new row after dragging the handle to the last table row', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ]\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(5);\n\n      spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n    }, 300);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(6);\n      done();\n    }, 600);\n  });\n\n  it('should add new row after dragging the handle to the last table row (autoInsertRow as true)', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        autoInsertRow: true,\n      }\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(5);\n\n      spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n    }, 300);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(6);\n      done();\n    }, 600);\n  });\n\n  it('should add new row after dragging the handle to the last table row (autoInsertRow as true, vertical)', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'vertical',\n        autoInsertRow: true,\n      }\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(5);\n\n      spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n    }, 300);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(6);\n      done();\n    }, 600);\n  });\n\n  it('should not add new row after dragging the handle to the last table row (autoInsertRow as true, horizontal)', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'horizontal',\n        autoInsertRow: true,\n      }\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(4);\n\n      spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n    }, 300);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(4);\n      done();\n    }, 600);\n  });\n\n  it('should not add new row after dragging the handle below the viewport when `autoInsertRow` is disabled', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        autoInsertRow: false\n      }\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    var ev = {};\n    var $lastRow = this.$container.find('tr:last-child td:eq(2)');\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientX = $lastRow.offset().left / 2;\n    ev.clientY = $lastRow.offset().top + 50;\n\n    $(document.documentElement).simulate('mousemove', ev);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(4);\n\n      ev.clientY = $lastRow.offset().top + 150;\n      $(document.documentElement).simulate('mousemove', ev);\n    }, 300);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(4);\n      done();\n    }, 600);\n  });\n\n  it('should not add new rows if the current number of rows reaches the maxRows setting', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      maxRows: 5\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n\n    expect(hot.countRows()).toBe(4);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(5);\n\n      spec().$container.find('tr:last-child td:eq(2)').simulate('mouseover');\n    }, 200);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(5);\n      done();\n    }, 400);\n  });\n\n  it('should add new row after dragging the handle below the viewport', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ]\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    var ev = {};\n    var $lastRow = this.$container.find('tr:last-child td:eq(2)');\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientX = $lastRow.offset().left / 2;\n    ev.clientY = $lastRow.offset().top + 50;\n\n    $(document.documentElement).simulate('mousemove', ev);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(5);\n\n      ev.clientY = $lastRow.offset().top + 150;\n      $(document.documentElement).simulate('mousemove', ev);\n    }, 300);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(6);\n      done();\n    }, 600);\n  });\n\n  it('should fill cells when dragging the handle to the headers', function() {\n    var hot = handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 7, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      colHeaders: true,\n      rowHeaders: true\n    });\n\n    // col headers:\n\n    selectCell(2, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n\n    var errors = 0;\n\n    try {\n      this.$container.find('thead tr:first-child th:eq(2)').simulate('mouseover').simulate('mouseup');\n    } catch (err) {\n      errors++;\n    }\n\n    expect(errors).toEqual(0);\n    expect(getDataAtCell(1, 2)).toEqual(7);\n    expect(getDataAtCell(0, 2)).toEqual(7);\n\n    expect($('.fill').filter(function() { return $(this).css('display') !== 'none'; }).length).toEqual(0); // check if fill selection is refreshed\n\n    // row headers:\n    selectCell(2, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n\n    errors = 0;\n\n    try {\n      this.$container.find('tbody tr:nth(2) th:first-child').simulate('mouseover').simulate('mouseup');\n    } catch (err) {\n      errors++;\n    }\n\n    expect(errors).toEqual(0);\n    expect(getDataAtCell(2, 1)).toEqual(7);\n    expect(getDataAtCell(2, 0)).toEqual(7);\n    expect($('.fill').filter(function() { return $(this).css('display') !== 'none'; }).length).toEqual(0); // check if fill selection is refreshed\n  });\n\n  it('should not add a new row if dragging from the last row upwards or sideways', function(done) {\n    var mouseOverSpy = jasmine.createSpy('mouseOverSpy');\n    var hot = handsontable({\n      data: [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      afterOnCellMouseOver: mouseOverSpy\n    });\n\n    selectCell(3, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    this.$container.find('tr:nth-child(3) td:eq(2)').simulate('mouseover');\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(4);\n\n      selectCell(3, 2);\n      spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n      spec().$container.find('tr:nth-child(4) td:eq(3)').simulate('mouseover');\n    }, 300);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(4);\n\n      selectCell(3, 2);\n      spec().$container.find('.wtBorder.current.corner').simulate('mousedown');\n      spec().$container.find('tr:nth-child(4) td:eq(1)').simulate('mouseover');\n    }, 500);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(4);\n      done();\n    }, 700);\n  });\n\n  it('should add new row after dragging the handle below the viewport', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ]\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    var ev = {};\n    var $lastRow = this.$container.find('tr:last-child td:eq(2)');\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientX = $lastRow.offset().left / 2;\n    ev.clientY = $lastRow.offset().top + 50;\n\n    $(document.documentElement).simulate('mousemove', ev);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(5);\n\n      ev.clientY = $lastRow.offset().top + 150;\n      $(document.documentElement).simulate('mousemove', ev);\n    }, 300);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(6);\n      done();\n    }, 600);\n  });\n\n  it('should not add new row after dragging the handle below the viewport (direction is set to horizontal)', function(done) {\n    var hot = handsontable({\n      data: [\n        [1, 2, 'test', 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6]\n      ],\n      fillHandle: {\n        direction: 'horizontal',\n        autoInsertRow: true\n      }\n    });\n\n    selectCell(0, 2);\n\n    this.$container.find('.wtBorder.current.corner').simulate('mousedown');\n    var ev = {};\n    var $lastRow = this.$container.find('tr:last-child td:eq(2)');\n\n    expect(hot.countRows()).toBe(4);\n\n    ev.clientX = $lastRow.offset().left / 2;\n    ev.clientY = $lastRow.offset().top + 50;\n\n    $(document.documentElement).simulate('mousemove', ev);\n\n    setTimeout(() => {\n      expect(hot.countRows()).toBe(4);\n      done();\n    }, 300);\n  });\n\n  it('should populate the filled data in the correct order, when dragging the fill handle upwards', function() {\n    const hot = handsontable({\n      data: [\n        [null, null, null, null],\n        [null, null, null, null],\n        [null, null, null, null],\n        [null, null, null, null],\n        [null, 2, 3, null],\n        [null, 1, 4, null],\n        [null, 0, 5, null],\n        [null, null, null, null],\n      ]\n    });\n\n    expect(JSON.stringify(getData(0, 1, 3, 2))).toEqual(JSON.stringify([[null, null], [null, null], [null, null], [null, null]]));\n\n    selectCell(4, 1, 6, 2);\n    this.$container.find('.wtBorder.area.corner').simulate('mousedown');\n    $(getCell(0, 2, true)).simulate('mouseover').simulate('mouseup');\n\n    expect(JSON.stringify(getData(0, 1, 3, 2))).toEqual(JSON.stringify([[0, 5], [2, 3], [1, 4], [0, 5]]));\n  });\n\n  it('should populate the filled data in the correct order, when dragging the fill handle towards left', function() {\n    const hot = handsontable({\n      data: [\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, 0, 1, 2],\n        [null, null, null, null, null, 3, 4, 5],\n        [null, null, null, null, null, null, null, null],\n      ]\n    });\n\n    expect(JSON.stringify(getData(1, 1, 2, 4))).toEqual(JSON.stringify([[null, null, null, null], [null, null, null, null]]));\n\n    selectCell(1, 5, 2, 7);\n    this.$container.find('.wtBorder.area.corner').simulate('mousedown');\n    $(getCell(2, 1, true)).simulate('mouseover').simulate('mouseup');\n\n    expect(JSON.stringify(getData(1, 1, 2, 4))).toEqual(JSON.stringify([[2, 0, 1, 2], [5, 3, 4, 5]]));\n  });\n\n  describe('should works properly when two or more instances of Handsontable was initialized with other settings (#3257)', () => {\n    var getData;\n    var $container1;\n    var $container2;\n\n    beforeAll(() => {\n      getData = function getData() {\n        return [\n          [1, 2, 3, 4, 5, 6],\n          [7, 8, 9, 1, 2, 3],\n          [4, 5, 6, 7, 8, 9],\n          [1, 2, 3, 4, 5, 6]\n        ];\n      };\n\n      $container1 = $('<div id=\"hot1\"></div>').appendTo('body').handsontable({\n        data: getData(),\n        fillHandle: true\n      });\n\n      $container2 = $('<div id=\"hot2\"></div>').appendTo('body').handsontable({\n        data: getData(),\n        fillHandle: 'horizontal'\n      });\n    });\n\n    it('checking drag vertically on 1. instance of Handsontable - should change cell value', () => {\n      $container1.handsontable('selectCell', 0, 0);\n      $container1.find('.wtBorder.current.corner').simulate('mousedown');\n      $container1.find('tbody tr:eq(1) td:eq(0)').simulate('mouseover').simulate('mouseup');\n\n      expect($container1.handsontable('getDataAtCell', 1, 0)).toEqual(1);\n    });\n\n    describe('-> updating settings on 2. instance of Handsontable', () => {\n      beforeAll(() => {\n        $container2.handsontable('updateSettings', {fillHandle: 'vertical'});\n      });\n\n      it('checking drag vertically on 2. instance of Handsontable - should change cell value', () => {\n        $container2.handsontable('selectCell', 0, 2);\n        $container2.find('.wtBorder.current.corner').simulate('mousedown');\n        $container2.find('tbody tr:eq(1) td:eq(2)').simulate('mouseover').simulate('mouseup');\n\n        expect($container2.handsontable('getDataAtCell', 1, 2)).toEqual(3);\n      });\n    });\n\n    afterAll(() => {\n      // destroing containers\n\n      $container1.handsontable('destroy');\n      $container1.remove();\n\n      $container2.handsontable('destroy');\n      $container2.remove();\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/FillHandle.spec.js","describe('Performance', () => {\n  var id = 'testContainer';\n\n  // this is a test suite to test if there are no redundant operations\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should call renderer once for one cell (fixed column width)', () => {\n    var count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colWidths: 100,\n      rowHeights: 23,\n      renderer() {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        count++;\n      }\n    });\n\n    expect(count).toEqual(1); // only for master table\n  });\n\n  it('should call renderer twice for one cell (auto column width)', () => {\n    var count = 0;\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      rowHeights: 23,\n      renderer() {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        count++;\n      }\n    });\n\n    expect(count).toEqual(2); // 1 for autoColumnSize, 1 for actual cell render\n  });\n\n  it('should call renderer twice for one cell (auto row height)', () => {\n    var count = 0;\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colWidths: 50,\n      renderer() {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        count++;\n      }\n    });\n\n    expect(count).toEqual(1); // 1 for actual cell render (colWidths prevent autoColumnSize to enable)\n  });\n\n  it('should call renderer triple times for one cell (auto row height, auto column width)', () => {\n    var count = 0;\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      autoRowSize: true,\n      autoColumnSize: true,\n      renderer() {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        count++;\n      }\n    });\n\n    expect(count).toEqual(3); // 1 for autoColumnSize, 1 for autoRowSize, 1 for actual cell render\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto column width, without overlays)', () => {\n    var count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      rowHeights: 23,\n      beforeGetCellMeta() {\n        count++;\n      }\n    });\n\n    expect(count).toEqual(7);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto row height, without overlays)', () => {\n    var count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colWidths: 50,\n      beforeGetCellMeta() {\n        count++;\n      }\n    });\n\n    expect(count).toEqual(5);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto column width, with left overlay)', () => {\n    var count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colHeaders: true,\n      rowHeights: 23,\n      beforeGetCellMeta() {\n        count++;\n      }\n    });\n\n    expect(count).toEqual(8);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto row height, with left overlay)', () => {\n    var count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colHeaders: true,\n      colWidths: 50,\n      beforeGetCellMeta() {\n        count++;\n      }\n    });\n\n    expect(count).toEqual(6);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto column width, with top overlay)', () => {\n    var count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      rowHeaders: true,\n      rowHeights: 23,\n      beforeGetCellMeta() {\n        count++;\n      }\n    });\n\n    expect(count).toEqual(7);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto row height, with top overlay)', () => {\n    var count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      rowHeaders: true,\n      colWidths: 50,\n      beforeGetCellMeta() {\n        count++;\n      }\n    });\n\n    expect(count).toEqual(5);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto column width, with all overlays)', () => {\n    var count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colHeaders: true,\n      rowHeaders: true,\n      rowHeights: 23,\n      beforeGetCellMeta() {\n        count++;\n      }\n    });\n\n    expect(count).toEqual(8);\n  });\n\n  it('should call getCellMeta minimum number of times for one cell (auto row height, with all overlays)', () => {\n    var count = 0;\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(1, 1),\n      colHeaders: true,\n      rowHeaders: true,\n      colWidths: 50,\n      beforeGetCellMeta() {\n        count++;\n      }\n    });\n\n    expect(count).toEqual(6);\n  });\n\n  it('should call renderer twice for each cell (auto column width)', () => {\n    var count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      rowHeights: 23,\n      autoColumnSize: true,\n      renderer() {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        count++;\n      }\n    });\n\n    expect(count).toEqual(28);\n  });\n\n  it('should call renderer twice for each cell (auto row height)', () => {\n    var count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      colWidths: 50,\n      autoRowSize: true,\n      renderer() {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        count++;\n      }\n    });\n\n    expect(count).toEqual(28); // 16 in main table and 4 rows for autoRowSize\n  });\n\n  it('should call renderer twice for each cell (auto row height, auto column width)', () => {\n    var count = 0;\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      autoRowSize: true,\n      autoColumnSize: true,\n      renderer() {\n        Handsontable.renderers.TextRenderer.apply(this, arguments);\n        count++;\n      }\n    });\n\n    expect(count).toEqual(40); // 16x2 in main table, 4 rows for autoRowSize and 4 cols for autoColumnSize\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/Performance.spec.js","describe('PluginHooks', () => {\n\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should add a many local hooks at init (as array)', () => {\n    var handler1 = jasmine.createSpy('handler1');\n    var handler2 = jasmine.createSpy('handler2');\n    var handler3 = jasmine.createSpy('handler3');\n\n    handsontable({\n      afterInit: [handler1, handler2, handler3]\n    });\n\n    expect(handler1).toHaveBeenCalled();\n    expect(handler2).toHaveBeenCalled();\n    expect(handler3).toHaveBeenCalled();\n  });\n\n  it('should remove a global hook', () => {\n    var\n      test = 0,\n      hook = function() {\n        test = 5;\n      };\n\n    Handsontable.hooks.add('afterInit', hook);\n    Handsontable.hooks.remove('afterInit', hook);\n\n    handsontable();\n\n    expect(test).toEqual(0);\n  });\n\n  it('should remove a local hook', () => {\n    var\n      test = 0,\n      hook = function() {\n        test = 5;\n      };\n\n    handsontable();\n\n    getInstance().addHook('afterInit', hook);\n    getInstance().removeHook('afterInit', hook);\n\n    expect(test).toEqual(0);\n  });\n\n  it('should run global hook', () => {\n    var test = 0;\n\n    Handsontable.hooks.add('afterInit', () => {\n      test = 5;\n    });\n    handsontable();\n    expect(test).toEqual(5);\n  });\n\n  it('should run local hook', () => {\n    var test = 0;\n\n    handsontable();\n\n    getInstance().addHook('myHook', () => {\n      test += 5;\n    });\n    getInstance().runHooks('myHook');\n    getInstance().runHooks('myHook');\n\n    expect(test).toEqual(10);\n  });\n\n  it('should run local hook once', () => {\n    var test = 0;\n\n    handsontable();\n\n    getInstance().addHookOnce('myHook', () => {\n      test += 5;\n    });\n    getInstance().runHooks('myHook');\n    getInstance().runHooks('myHook');\n\n    expect(test).toEqual(5);\n  });\n\n  it('should run all hooks', () => {\n    var test = 0;\n\n    Handsontable.hooks.add('afterInit', () => {\n      test += 5;\n    });\n\n    handsontable({\n      afterInit() {\n        test += 5;\n      }\n    });\n\n    expect(test).toEqual(10);\n  });\n\n  it('list of all avaliable plugin hooks should be exposed as a public method', () => {\n    var hooks = Handsontable.hooks.getRegistered(); // this is used in demo/callbacks.html\n\n    expect(hooks.indexOf('beforeInit')).toBeGreaterThan(-1);\n  });\n\n  it('should add a local hook with addHooks method', () => {\n    var hot1 = handsontable();\n\n    var test = 0;\n\n    hot1.addHook('myHook', () => {\n      test += 5;\n    });\n    hot1.runHooks('myHook');\n\n    expect(test).toEqual(5);\n  });\n\n  it('should remove a local hook with removeHook method', () => {\n    var hot1 = handsontable();\n\n    var test = 0;\n    var handler = function() {\n      test += 5;\n    };\n\n    hot1.addHook('myHook', handler);\n\n    hot1.runHooks('myHook');\n    hot1.runHooks('myHook');\n    expect(test).toEqual(10);\n\n    hot1.removeHook('myHook', handler);\n    hot1.runHooks('myHook');\n\n    expect(test).toEqual(10);\n  });\n\n  it('should add a local hook with addHookOnce method and run it just once', () => {\n    var hot1 = handsontable();\n\n    var test = 0;\n    var handler = function() {\n      test += 5;\n    };\n\n    hot1.addHookOnce('myHook', handler);\n\n    hot1.runHooks('myHook');\n    hot1.runHooks('myHook');\n    expect(test).toEqual(5);\n\n  });\n\n  it('should run hook with runHooks and return value', () => {\n    var hot = handsontable();\n\n    var handler = function() {\n      return 5;\n    };\n\n    hot.addHook('myHook', handler);\n\n    expect(hot.runHooks('myHook')).toEqual(5);\n  });\n\n  it('should run two \"once\" hooks in desired order', () => {\n    var hot = handsontable();\n    var arr = [];\n\n    hot.addHookOnce('myHook', () => {\n      arr.push(1);\n    });\n\n    hot.addHookOnce('myHook', () => {\n      arr.push(2);\n    });\n\n    hot.runHooks('myHook');\n\n    expect(arr).toEqual([1, 2]);\n  });\n\n  it('should execute two \"once\" hooks in desired order', () => {\n    var hot = handsontable();\n    var str = 'a';\n\n    hot.addHookOnce('myHook', (str) => `${str}b`);\n\n    hot.addHookOnce('myHook', (str) => `${str}c`);\n\n    expect(hot.runHooks('myHook', str)).toEqual('abc');\n  });\n\n  it('adding same hook twice should register it only once (without an error)', () => {\n    var i = 0;\n    var fn = function() {\n      i++;\n    };\n\n    var hot = handsontable({\n      afterOnCellMouseOver: fn\n    });\n\n    hot.getInstance().updateSettings({afterOnCellMouseOver: fn});\n    hot.runHooks('afterOnCellMouseOver');\n\n    expect(i).toEqual(1);\n  });\n\n  it('should mark the hook callbacks added with Handsontable initialization', function() {\n    var fn = function() {};\n    var fn2 = function() {};\n\n    var hot = handsontable({\n      afterChange: fn\n    });\n\n    hot.addHook('afterChange', fn2);\n\n    expect(fn.initialHook).toEqual(true);\n    expect(fn2.initialHook).toEqual(void 0);\n  });\n\n  it('should mark the hook callbacks added using the updateSettings method', function() {\n    var fn = function() {};\n    var fn2 = function() {};\n\n    var hot = handsontable();\n\n    hot.updateSettings({\n      afterChange: fn\n    });\n\n    hot.addHook('afterChange', fn2);\n\n    expect(fn.initialHook).toEqual(true);\n    expect(fn2.initialHook).toEqual(void 0);\n  });\n\n  it('should replace the existing hook callbacks, if they\\'re updated using the updateSettings method (when there was a hook ' +\n     'already declared in the initialization)', function() {\n    var fn = function() {};\n    var fn2 = function() {};\n\n    var hot = handsontable({\n      afterGetCellMeta: fn\n    });\n\n    var initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;\n\n    hot.updateSettings({\n      afterGetCellMeta: function() {\n        var a = 'another function';\n      }\n    });\n\n    hot.updateSettings({\n      afterGetCellMeta: function() {\n        var a = 'yet another function';\n      }\n    });\n\n    hot.updateSettings({\n      afterGetCellMeta: fn2\n    });\n\n    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount);\n  });\n\n  it('should replace the existing hook callbacks, if they\\'re updated using the updateSettings method', function() {\n    var fn = function() {};\n    var fn2 = function() {};\n\n    var hot = handsontable();\n\n    hot.addHook('afterGetCellMeta', () => 'doesn\\'t matter 1');\n    hot.addHook('afterGetCellMeta', () => 'doesn\\'t matter 2');\n    hot.addHook('afterGetCellMeta', () => 'doesn\\'t matter 3');\n\n    hot.updateSettings({\n      afterGetCellMeta: fn\n    });\n\n    var initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;\n\n    hot.updateSettings({\n      afterGetCellMeta: function() {\n        var a = 'another function';\n      }\n    });\n\n    hot.updateSettings({\n      afterGetCellMeta: function() {\n        var a = 'yet another function';\n      }\n    });\n\n    hot.updateSettings({\n      afterGetCellMeta: fn2\n    });\n\n    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount);\n  });\n\n  it('should NOT replace existing hook callbacks, if the\\'re added using the addHook method', function() {\n    var fn = function() {};\n    var fn2 = function() {};\n\n    var hot = handsontable();\n\n    hot.updateSettings({\n      afterGetCellMeta: fn\n    });\n\n    var initialCallbackCount = hot.pluginHookBucket.afterGetCellMeta.length;\n\n    hot.addHook('afterGetCellMeta', function() {\n      var a = 'another function';\n    });\n\n    hot.addHook('afterGetCellMeta', function() {\n      var a = 'yet another function';\n    });\n\n    hot.addHook('afterGetCellMeta', fn2);\n\n    // should not add this one, as it's a duplicate\n    hot.addHook('afterGetCellMeta', fn);\n\n    expect(hot.pluginHookBucket.afterGetCellMeta.length).toEqual(initialCallbackCount + 3);\n  });\n\n  describe('controlling handler queue execution', () => {\n    it('should execute all handlers if none of them hasn\\'t skipped', () => {\n\n      var handler1 = jasmine.createSpy('handler1');\n      var handler2 = jasmine.createSpy('handler2');\n      var handler3 = jasmine.createSpy('handler3');\n\n      var hot = handsontable();\n\n      hot.addHook('fakeEvent', handler1);\n      hot.addHook('fakeEvent', handler2);\n      hot.addHook('fakeEvent', handler3);\n\n      expect(handler1).not.toHaveBeenCalled();\n      expect(handler2).not.toHaveBeenCalled();\n      expect(handler3).not.toHaveBeenCalled();\n\n      hot.runHooks('fakeEvent');\n\n      expect(handler1).toHaveBeenCalled();\n      expect(handler2).toHaveBeenCalled();\n      expect(handler3).toHaveBeenCalled();\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/PluginHooks.spec.js","describe('RowHeader', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should not show row headers by default', function() {\n    var that = this;\n    handsontable();\n\n    expect(that.$container.find('tbody th').length).toEqual(0);\n  });\n\n  it('should show row headers if true', function() {\n    var that = this;\n    handsontable({\n      rowHeaders: true\n    });\n\n    expect(that.$container.find('tbody th').length).toBeGreaterThan(0);\n  });\n\n  it('should show row headers numbered 1-10 by default', function() {\n    var that = this;\n    var startRows = 5;\n    handsontable({\n      startRows,\n      rowHeaders: true\n    });\n\n    var ths = getLeftClone().find('tbody th');\n    expect(ths.length).toEqual(startRows);\n    expect($.trim(ths.eq(0).text())).toEqual('1');\n    expect($.trim(ths.eq(1).text())).toEqual('2');\n    expect($.trim(ths.eq(2).text())).toEqual('3');\n    expect($.trim(ths.eq(3).text())).toEqual('4');\n    expect($.trim(ths.eq(4).text())).toEqual('5');\n  });\n\n  it('should show row headers with custom label', function() {\n    var that = this;\n    var startRows = 5;\n    handsontable({\n      startRows,\n      rowHeaders: ['First', 'Second', 'Third']\n    });\n\n    var ths = getLeftClone().find('tbody th');\n    expect(ths.length).toEqual(startRows);\n    expect($.trim(ths.eq(0).text())).toEqual('First');\n    expect($.trim(ths.eq(1).text())).toEqual('Second');\n    expect($.trim(ths.eq(2).text())).toEqual('Third');\n    expect($.trim(ths.eq(3).text())).toEqual('4');\n    expect($.trim(ths.eq(4).text())).toEqual('5');\n  });\n\n  it('should not show row headers if false', function() {\n    var that = this;\n    handsontable({\n      rowHeaders: false\n    });\n\n    expect(getLeftClone().find('tbody th').length).toEqual(0);\n  });\n\n  it('should hide rows headers after updateSetting', () => {\n    var hot = handsontable({\n      startRows: 5,\n      rowHeaders: true\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(5);\n    expect(getLeftClone().find('tbody th').length).toEqual(5);\n\n    hot.updateSettings({\n      rowHeaders: false\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(0);\n  });\n\n  it('should show rows headers after updateSettings', () => {\n    var hot = handsontable({\n      startRows: 5,\n      rowHeaders: false\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(0);\n    expect(getLeftClone().find('tbody th').length).toEqual(0);\n\n    hot.updateSettings({\n      rowHeaders: true\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(5);\n    expect(getLeftClone().find('tbody th').length).toEqual(5);\n  });\n\n  it('should show/hide rows headers after multiple updateSettings', () => {\n    var hot = handsontable({\n      startRows: 5,\n      rowHeaders: false\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(0);\n    expect(getLeftClone().find('tbody th').length).toEqual(0);\n\n    hot.updateSettings({\n      rowHeaders: true\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(5);\n    expect(getLeftClone().width()).toBeGreaterThan(0);\n\n    hot.updateSettings({\n      rowHeaders: false\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(0);\n    expect(getLeftClone().width()).toEqual(0);\n\n    hot.updateSettings({\n      rowHeaders: true\n    });\n\n    expect(getHtCore().find('tbody th').length).toEqual(5);\n    expect(getLeftClone().width()).toBeGreaterThan(0);\n  });\n\n  it('should show new rows headers after updateSettings', () => {\n    var hot = handsontable({\n      startCols: 3,\n      rowHeaders: ['A', 'B', 'C']\n    });\n\n    var leftClone = getLeftClone();\n\n    expect(leftClone.find('tbody tr:eq(0) th:eq(0)').text()).toEqual('A');\n    expect(leftClone.find('tbody tr:eq(1) th:eq(0)').text()).toEqual('B');\n    expect(leftClone.find('tbody tr:eq(2) th:eq(0)').text()).toEqual('C');\n\n    hot.updateSettings({\n      rowHeaders: ['X', 'Y', 'Z']\n    });\n\n    expect(leftClone.find('tbody tr:eq(0) th:eq(0)').text()).toEqual('X');\n    expect(leftClone.find('tbody tr:eq(1) th:eq(0)').text()).toEqual('Y');\n    expect(leftClone.find('tbody tr:eq(2) th:eq(0)').text()).toEqual('Z');\n\n  });\n\n  it('should allow defining custom row header width using the rowHeaderWidth config option', function() {\n    var hot = handsontable({\n      startCols: 3,\n      rowHeaders: true,\n      rowHeaderWidth: 150\n    });\n\n    expect(this.$container.find('th').eq(0).outerWidth()).toEqual(150);\n    expect(this.$container.find('col').first().css('width')).toEqual('150px');\n  });\n\n  it('should allow defining custom column header heights using the columnHeaderHeight config option, when multiple column header levels are defined', function() {\n    var hot = handsontable({\n      startCols: 3,\n      rowHeaders: true,\n      rowHeaderWidth: [66, 96],\n      afterGetRowHeaderRenderers(array) {\n        array.push((index, TH) => {\n          TH.innerHTML = '';\n\n          var div = document.createElement('div');\n          var span = document.createElement('span');\n\n          div.className = 'relative';\n          span.className = 'rowHeader';\n\n          span.innerText = index;\n\n          div.appendChild(span);\n          TH.appendChild(div);\n        });\n\n        return array;\n      }\n    });\n    hot.render();\n\n    expect(this.$container.find('.handsontable.ht_clone_left tr:nth-child(1) th:nth-child(1)').outerWidth()).toEqual(66);\n    expect(this.$container.find('.handsontable.ht_clone_left tr:nth-child(1) th:nth-child(2)').outerWidth()).toEqual(96);\n\n    expect(this.$container.find('col').first().css('width')).toEqual('66px');\n    expect(this.$container.find('col').eq(1).css('width')).toEqual('96px');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/RowHeader.spec.js","describe('cellTypes', () => {\n  const id = 'testContainer';\n  const {\n    registerCellType,\n    getCellType,\n  } = Handsontable.cellTypes;\n  const {\n    registerEditor,\n    getEditor,\n    BaseEditor,\n  } = Handsontable.editors;\n  const {\n    registerRenderer,\n    getRenderer,\n  } = Handsontable.renderers;\n  const {\n    registerValidator,\n    getValidator,\n  } = Handsontable.validators;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should register custom cell type (with custom editor, renderer and validator)', async () => {\n    class MyEditor extends BaseEditor {\n      init() {\n        this.TEXTAREA = document.createElement('TEXTAREA');\n        this.TEXTAREA_PARENT = document.createElement('DIV');\n\n        this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);\n        this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);\n      }\n      getValue() {\n        return `**${this.TEXTAREA.value}**`;\n      }\n      setValue(value) {\n        this.TEXTAREA.value = value;\n      }\n      open() {}\n      close() {}\n      focus() {\n        this.TEXTAREA.focus();\n      }\n    }\n    registerCellType('myCellType', {\n      editor: MyEditor,\n      renderer: (hot, td, row, col, prop, value, cellProperties) => {\n        td.innerHTML = `--${value}--`;\n      },\n      validator: (value, cb) => {\n        cb(value === 10);\n      }\n    });\n\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: [\n        [1, 6, 10],\n      ],\n      columns: [{\n        type: 'myCellType',\n      }],\n      afterValidate: onAfterValidate\n    });\n\n    hot.setDataAtCell(1, 0, 10);\n\n    await sleep(100);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(true, 10, 1, 0, undefined, undefined);\n    expect(getCell(1, 0).innerHTML).toBe('--10--');\n\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'hello';\n    destroyEditor();\n\n    await sleep(100);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(false, '**hello**', 0, 0, 'edit', undefined);\n    expect(getCell(0, 0).innerHTML).toBe('--**hello**--');\n  });\n\n  it('should retrieve predefined cell types by its names', () => {\n    const {editors, renderers, validators} = Handsontable;\n\n    expect(getCellType('autocomplete').editor).toBe(editors.AutocompleteEditor);\n    expect(getCellType('autocomplete').renderer).toBe(renderers.AutocompleteRenderer);\n    expect(getCellType('autocomplete').validator).toBe(validators.AutocompleteValidator);\n\n    expect(getCellType('checkbox').editor).toBe(editors.CheckboxEditor);\n    expect(getCellType('checkbox').renderer).toBe(renderers.CheckboxRenderer);\n    expect(getCellType('checkbox').validator).not.toBeDefined();\n\n    expect(getCellType('date').editor).toBe(editors.DateEditor);\n    expect(getCellType('date').renderer).toBe(renderers.AutocompleteRenderer);\n    expect(getCellType('date').validator).toBe(validators.DateValidator);\n\n    expect(getCellType('dropdown').editor).toBe(editors.DropdownEditor);\n    expect(getCellType('dropdown').renderer).toBe(renderers.AutocompleteRenderer);\n    expect(getCellType('dropdown').validator).toBe(validators.AutocompleteValidator);\n\n    expect(getCellType('handsontable').editor).toBe(editors.HandsontableEditor);\n    expect(getCellType('handsontable').renderer).toBe(renderers.AutocompleteRenderer);\n    expect(getCellType('handsontable').validator).not.toBeDefined();\n\n    expect(getCellType('numeric').editor).toBe(editors.NumericEditor);\n    expect(getCellType('numeric').renderer).toBe(renderers.NumericRenderer);\n    expect(getCellType('numeric').validator).toBe(validators.NumericValidator);\n    expect(getCellType('numeric').dataType).toBe('number');\n\n    expect(getCellType('password').editor).toBe(editors.PasswordEditor);\n    expect(getCellType('password').renderer).toBe(renderers.PasswordRenderer);\n    expect(getCellType('password').validator).not.toBeDefined();\n    expect(getCellType('password').copyable).toBe(false);\n\n    expect(getCellType('text').editor).toBe(editors.TextEditor);\n    expect(getCellType('text').renderer).toBe(renderers.TextRenderer);\n    expect(getCellType('text').validator).not.toBeDefined();\n\n    expect(getCellType('time').editor).toBe(editors.TextEditor);\n    expect(getCellType('time').renderer).toBe(renderers.TextRenderer);\n    expect(getCellType('time').validator).toBe(validators.TimeValidator);\n  });\n\n  it('should register custom cell type into renderers, editors and validators', () => {\n    class MyEditor {}\n    function myRenderer() {}\n    function myValidator() {}\n\n    registerCellType('myCellType', {\n      editor: MyEditor,\n      renderer: myRenderer,\n      validator: myValidator,\n    });\n\n    expect(getEditor('myCellType')).toBe(MyEditor);\n    expect(getRenderer('myCellType')).toBe(myRenderer);\n    expect(getValidator('myCellType')).toBe(myValidator);\n  });\n\n  it('should overwrite cell types under the same name', () => {\n    class MyEditor {}\n    function myRenderer() {}\n    function myValidator() {}\n\n    registerCellType('myCellType', {\n      editor: MyEditor,\n      renderer: myRenderer,\n      validator: myValidator,\n    });\n\n    expect(getEditor('myCellType')).toBe(MyEditor);\n    expect(getRenderer('myCellType')).toBe(myRenderer);\n    expect(getValidator('myCellType')).toBe(myValidator);\n\n    function myRenderer2() {}\n    function myValidator2() {}\n\n    registerCellType('myCellType', {\n      renderer: myRenderer2,\n      validator: myValidator2,\n    });\n\n    expect(getEditor('myCellType')).toBe(MyEditor);\n    expect(getRenderer('myCellType')).toBe(myRenderer2);\n    expect(getValidator('myCellType')).toBe(myValidator2);\n  });\n\n  it('should retrieve custom cell type by its names', () => {\n    class MyEditor {}\n    function myRenderer() {}\n    function myValidator() {}\n\n    registerCellType('myCellType', {\n      editor: MyEditor,\n      renderer: myRenderer,\n      validator: myValidator,\n    });\n\n    expect(getCellType('myCellType').editor).toBe(MyEditor);\n    expect(getCellType('myCellType').renderer).toBe(myRenderer);\n    expect(getCellType('myCellType').validator).toBe(myValidator);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/cellTypes/index.spec.js","describe('Core.colToProp', () => {\n  let id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return the property name for the provided column number', () => {\n    const hot = handsontable({\n      data: [{\n        id: 1,\n        firstName: 'Tobias',\n        lastName: 'Forge'\n      }]\n    });\n\n    expect(colToProp(0)).toBe('id');\n    expect(colToProp(1)).toBe('firstName');\n    expect(colToProp(2)).toBe('lastName');\n  });\n\n  it('it should return the provided property name, when the user passes a property name as a column number', () => {\n    const hot = handsontable({\n      data: [{\n        id: 1,\n        sort: true,\n        length: 2\n      }]\n    });\n\n    expect(colToProp('id')).toBe('id');\n    expect(colToProp('sort')).toBe('sort');\n    expect(colToProp('length')).toBe('length');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/colToProp.spec.js","describe('Core.countSourceCols', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return properly index from ', () => {\n    var hot = handsontable({\n      data: [['', '', '', '', '', '', '', '', '', '', '', '', '', '', '']],\n      columns(column) {\n        return [1, 5, 9].indexOf(column) > -1 ? {} : null;\n      }\n    });\n\n    expect(hot.countSourceCols()).toBe(15);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/countSourceCols.spec.js","describe('Core.getCellMetaAtRow', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return a row of cell meta in a form of an array', () => {\n    handsontable();\n\n    var rowOfMeta = getCellMetaAtRow(0);\n    expect(rowOfMeta.length).toBe(5);\n    expect(rowOfMeta[0].row).toBe(0);\n    expect(rowOfMeta[1].row).toBe(0);\n    expect(rowOfMeta[2].row).toBe(0);\n    expect(rowOfMeta[3].row).toBe(0);\n    expect(rowOfMeta[4].row).toBe(0);\n    expect(rowOfMeta[0].col).toBe(0);\n    expect(rowOfMeta[1].col).toBe(1);\n    expect(rowOfMeta[2].col).toBe(2);\n    expect(rowOfMeta[3].col).toBe(3);\n    expect(rowOfMeta[4].col).toBe(4);\n    expect(rowOfMeta[0].prop).toBe(0);\n    expect(rowOfMeta[1].prop).toBe(1);\n    expect(rowOfMeta[2].prop).toBe(2);\n    expect(rowOfMeta[3].prop).toBe(3);\n    expect(rowOfMeta[4].prop).toBe(4);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/getCellMetaAtRow.spec.js","describe('Core.getCellsMeta', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return all initialized cells meta as flatten array', () => {\n    handsontable();\n\n    var metas = getCellsMeta();\n\n    expect(metas.length).toBe(25); // default data size\n    expect(metas[0].row).toBe(0);\n    expect(metas[0].col).toBe(0);\n    expect(metas[0].prop).toBe(0);\n    expect(metas[19].row).toBe(3);\n    expect(metas[19].col).toBe(4);\n    expect(metas[19].prop).toBe(4);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/getCellsMeta.spec.js","describe('Core.getCopyableData', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return copyable data when `copyable` option is enabled', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      copyable: true\n    });\n\n    expect(getCopyableData(0, 0)).toBe('A1');\n    expect(getCopyableData(1, 1)).toBe('B2');\n    expect(getCopyableData(5, 1)).toBe('B6');\n    expect(getCopyableData(8, 9)).toBe('J9');\n  });\n\n  it('should return empty string as copyable data when `copyable` option is disabled', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      copyable: false\n    });\n\n    expect(getCopyableData(0, 0)).toBe('');\n    expect(getCopyableData(1, 1)).toBe('');\n    expect(getCopyableData(5, 1)).toBe('');\n    expect(getCopyableData(8, 9)).toBe('');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/getCopyableData.spec.js","describe('Core.getCopyableText', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return copyable string when `copyable` option is enabled', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      copyable: true\n    });\n\n    expect(getCopyableText(0, 0)).toBe('A1');\n    expect(getCopyableText(0, 0, 1, 2)).toBe('A1\\tB1\\tC1\\nA2\\tB2\\tC2');\n  });\n\n  it('should return empty string as copyable data when `copyable` option is disabled', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      copyable: false\n    });\n\n    expect(getCopyableText(0, 0)).toBe('');\n    expect(getCopyableText(0, 0, 1, 2)).toBe('\\t\\t\\n\\t\\t');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/getCopyableText.spec.js","describe('Core.getSourceDataArray', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return data as an array when provided data was an array of arrays', () => {\n    handsontable({\n      data: [[1, 2, 3], ['a', 'b', 'c']],\n      copyable: true\n    });\n\n    expect(getSourceDataArray()).toEqual([[1, 2, 3], ['a', 'b', 'c']]);\n    expect(getSourceDataArray(0, 1, 1, 2)).toEqual([[2, 3], ['b', 'c']]);\n  });\n\n  it('should return data as an array when provided data was an array of objects', () => {\n    handsontable({\n      data: [{a: 1, b: 2, c: 3}, {a: 'a', b: 'b', c: 'c'}],\n      copyable: true\n    });\n\n    expect(getSourceDataArray()).toEqual([[1, 2, 3], ['a', 'b', 'c']]);\n    expect(getSourceDataArray(0, 1, 1, 2)).toEqual([[2, 3], ['b', 'c']]);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/getSourceDataArray.spec.js","describe('Core.getSourceDataAtCell', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return null when is call without arguments', () => {\n    handsontable({\n      data: [[1, 2, 3], ['a', 'b', 'c']],\n    });\n\n    expect(getSourceDataAtCell()).toBeNull();\n  });\n\n  it('should return cell value when provided data was an array of arrays', () => {\n    handsontable({\n      data: [[1, 2, 3], ['a', 'b', 'c']],\n    });\n\n    expect(getSourceDataAtCell(1, 1)).toEqual('b');\n  });\n\n  it('should return cell value when provided data was an array of objects', () => {\n    handsontable({\n      data: [{a: 1, b: 2, c: 3}, {a: 'a', b: 'b', c: 'c'}],\n      copyable: true\n    });\n\n    expect(getSourceDataAtCell(1, 'b')).toEqual('b');\n  });\n\n  it('should return cell value when provided data was an array of objects (nested structure)', () => {\n    handsontable({\n      data: [{a: 1, b: {a: 21, b: 22}, c: 3}, {a: 'a', b: {a: 'ba', b: 'bb'}, c: 'c'}],\n      columns: [\n        {data: 'a'},\n        {data: 'b.a'},\n        {data: 'b.b'},\n        {data: 'c'},\n      ]\n    });\n\n    expect(getSourceDataAtCell(1, 'b.b')).toEqual('bb');\n  });\n\n  it('should return cell value when data is provided by dataSchema', () => {\n    handsontable({\n      data: [\n        model({id: 1, name: 'Ted Right', address: ''}),\n        model({id: 2, name: 'Frank Honest', address: ''}),\n        model({id: 3, name: 'Joan Well', address: ''}),\n        model({id: 4, name: 'Gail Polite', address: ''}),\n        model({id: 5, name: 'Michael Fair', address: ''})\n      ],\n      dataSchema: model,\n      columns: [\n        {data: property('id')},\n        {data: property('name')},\n        {data: property('address')}\n      ]\n    });\n\n    function model(opts) {\n      var\n        _pub = {},\n        _priv = {\n          id: undefined,\n          name: undefined,\n          address: undefined\n        };\n\n      for (var i in opts) {\n        if (Object.prototype.hasOwnProperty.call(opts, i)) {\n          _priv[i] = opts[i];\n        }\n      }\n\n      _pub.attr = function(attr, val) {\n        if (typeof val === 'undefined') {\n          return _priv[attr];\n        }\n        _priv[attr] = val;\n\n        return _pub;\n      };\n\n      return _pub;\n    }\n\n    function property(attr) {\n      return function(row, value) {\n        return row.attr(attr, value);\n      };\n    }\n\n    expect(getSourceDataAtCell(1, 1)).toEqual('Frank Honest');\n  });\n\n  describe('`modifyRowData` hook', () => {\n    it('should be possible to change data for row on the fly ', () => {\n      handsontable({\n        data: [\n          ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n          ['2008', 10, 11, 12, 13],\n          ['2009', 20, 11, 14, 13],\n          ['2010', 30, 15, 12, 13]\n        ],\n        modifyRowData(row) {\n          var newDataset = [];\n\n          if (row === 1) {\n            newDataset.push('2016', 0, 0, 0, 0);\n          }\n\n          return newDataset.length ? newDataset : void 0;\n        }\n      });\n\n      expect(getSourceDataAtCell(1, 0)).toEqual('2016');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/getSourceDataAtCell.spec.js","describe('Core.propToCol', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid index for newly added column when manualColumnMove is enabled', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      manualColumnMove: true,\n    });\n\n    hot.alter('insert_col', 5);\n\n    expect(propToCol(0)).toBe(0);\n    expect(propToCol(10)).toBe(10);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/propToCol.spec.js","describe('Core.setCellMeta', () => {\n  const id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should set correct meta className for cell', () => {\n\n    const className = 'htCenter htMiddle';\n\n    handsontable({\n      afterCellMetaReset() {\n        this.setCellMeta(0, 0, 'className', className);\n      }\n    });\n\n    let cellMeta = getCellMeta(0, 0);\n\n    expect(cellMeta.className).not.toBeUndefined();\n    expect(cellMeta.className).toEqual(className);\n  });\n\n  it('should set correct meta className for non existed cell', () => {\n\n    const className = 'htCenter htMiddle';\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      afterCellMetaReset() {\n        this.setCellMeta(100, 100, 'className', className);\n      }\n    });\n\n    let cellMeta = getCellMeta(100, 100);\n\n    expect(cellMeta.className).not.toBeUndefined();\n    expect(cellMeta.className).toEqual(className);\n  });\n\n  it('should set correct meta classNames for cells using cell in configuration', function() {\n    const classNames = [\n      'htCenter htTop',\n      'htRight htBottom'\n    ];\n\n    handsontable({\n      cell: [\n        {row: 0, col: 0, className: classNames[0] },\n        {row: 1, col: 1, className: classNames[1] }\n      ]\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[0]);\n    expect(this.$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[1]);\n  });\n\n  it('should change cell meta data with updateSettings when the cell option is defined', function() {\n    const classNames = [\n      'htCenter htTop',\n      'htRight htBottom'\n    ];\n\n    handsontable({\n      cell: [\n        {row: 0, col: 0, className: classNames[0] },\n        {row: 1, col: 1, className: classNames[1] }\n      ]\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[0]);\n    expect(this.$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[1]);\n\n    updateSettings({\n      cell: []\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual('');\n    expect(this.$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual('');\n\n    updateSettings({\n      cell: [\n        {row: 0, col: 0, className: classNames[1] },\n        {row: 1, col: 1, className: classNames[0] }\n      ]\n    });\n\n    expect(this.$container.find('tbody tr:eq(0) td:eq(0)')[0].className).toEqual(classNames[1]);\n    expect(this.$container.find('tbody tr:eq(1) td:eq(1)')[0].className).toEqual(classNames[0]);\n  });\n\n  it('should call afterSetCellMeta plugin hook', () => {\n    const className = 'htCenter htMiddle';\n    let res = {};\n\n    handsontable({\n      afterCellMetaReset() {\n        this.setCellMeta(0, 1, 'className', className);\n      },\n      afterSetCellMeta(row, col, key, val) {\n        res.row = row;\n        res.col = col;\n        res.key = key;\n        res.val = val;\n      }\n    });\n\n    expect(res.row).toEqual(0);\n    expect(res.col).toEqual(1);\n    expect(res.key).toEqual('className');\n    expect(res.val).toEqual(className);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/setCellMeta.spec.js","describe('Core.spliceCellsMeta', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should splice the cell meta array analogously to the native `splice` method', () => {\n    handsontable();\n\n    var allMeta = getCellsMeta();\n    expect(allMeta.length).toBe(25);\n    spliceCellsMeta(3, 1);\n    allMeta = getCellsMeta();\n    expect(allMeta.length).toBe(20);\n\n    var metaAtRow = getCellMetaAtRow(2);\n    expect(metaAtRow[0].row).toEqual(2);\n    metaAtRow = getCellMetaAtRow(3);\n    expect(metaAtRow[0].row).toEqual(4);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/spliceCellsMeta.spec.js","describe('Core.spliceCol', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should remove from the second column three rows starting from the beginning', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    var removedData = hot.spliceCol(1, 0, 3);\n\n    expect(removedData).toEqual(['B1', 'B2', 'B3']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B4', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B5', 'C2', 'D2', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', null, 'C3', 'D3', 'E3']);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', null, 'C4', 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', null, 'C5', 'D5', 'E5']);\n  });\n\n  it('should remove from the third column three rows starting from the second row', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    var removedData = hot.spliceCol(2, 1, 3);\n\n    expect(removedData).toEqual(['C2', 'C3', 'C4']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B2', 'C5', 'D2', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', null, 'D3', 'E3']);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', null, 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', null, 'D5', 'E5']);\n  });\n\n  it('should replace and append new rows in the second column starting from the second row', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    var removedData = hot.spliceCol(1, 1, 3, 'X1', 'X2', 'X3', 'X4', 'X5');\n\n    expect(removedData).toEqual(['B2', 'B3', 'B4']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'X1', 'C2', 'D2', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'X2', 'C3', 'D3', 'E3']);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'X3', 'C4', 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'X4', 'C5', 'D5', 'E5']);\n    expect(hot.getDataAtRow(5)).toEqual([null, 'X5', null, null, null]);\n    expect(hot.getDataAtRow(6)).toEqual([null, 'B5', null, null, null]);\n  });\n\n  it('should trigger beforeChange and afterChange hook with proper arguments', () => {\n    var spyAfter = jasmine.createSpy('after');\n    var spyBefore = jasmine.createSpy('before');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      beforeChange: spyBefore,\n      afterChange: spyAfter,\n    });\n\n    hot.spliceCol(2, 1, 3, 'X1');\n\n    expect(spyBefore.calls.argsFor(0)[0]).toEqual([[1, 2, 'C2', 'X1'], [2, 2, 'C3', 'C5'], [3, 2, 'C4', null], [4, 2, 'C5', null], [5, 2, null, null]]);\n    expect(spyBefore.calls.argsFor(0)[1]).toBe('spliceCol');\n    expect(spyAfter.calls.argsFor(1)[0]).toEqual([[1, 2, 'C2', 'X1'], [2, 2, 'C3', 'C5'], [3, 2, 'C4', null], [4, 2, 'C5', null], [5, 2, null, null]]);\n    expect(spyAfter.calls.argsFor(1)[1]).toBe('spliceCol');\n  });\n\n  it('should trigger beforeCreateRow and afterCreateRow hook with proper arguments', () => {\n    var spyAfter = jasmine.createSpy('after');\n    var spyBefore = jasmine.createSpy('before');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      beforeCreateRow: spyBefore,\n      afterCreateRow: spyAfter,\n    });\n\n    hot.spliceCol(2, 1, 3, 'X1', 'X2', 'X3', 'X4');\n\n    expect(spyBefore).toHaveBeenCalledWith(5, 1, 'spliceCol', undefined, undefined, undefined);\n    expect(spyAfter).toHaveBeenCalledWith(5, 1, 'spliceCol', undefined, undefined, undefined);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/spliceCol.spec.js","describe('Core.spliceRow', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should remove from the second row three columns starting from the beginning', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    var removedData = hot.spliceRow(1, 0, 3);\n\n    expect(removedData).toEqual(['A2', 'B2', 'C2']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['D2', 'E2', null, null, null]);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', 'C3', 'D3', 'E3']);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5']);\n  });\n\n  it('should remove from the third row three columns starting from the second column', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    var removedData = hot.spliceRow(2, 1, 3);\n\n    expect(removedData).toEqual(['B3', 'C3', 'D3']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1']);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'B2', 'C2', 'D2', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'E3', null, null, null]);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4']);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5']);\n  });\n\n  it('should replace and append new columns in the second row starting from the second column', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n    });\n\n    var removedData = hot.spliceRow(1, 1, 3, 'X1', 'X2', 'X3', 'X4', 'X5');\n\n    expect(removedData).toEqual(['B2', 'C2', 'D2']);\n    expect(hot.getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', null, null]);\n    expect(hot.getDataAtRow(1)).toEqual(['A2', 'X1', 'X2', 'X3', 'X4', 'X5', 'E2']);\n    expect(hot.getDataAtRow(2)).toEqual(['A3', 'B3', 'C3', 'D3', 'E3', null, null]);\n    expect(hot.getDataAtRow(3)).toEqual(['A4', 'B4', 'C4', 'D4', 'E4', null, null]);\n    expect(hot.getDataAtRow(4)).toEqual(['A5', 'B5', 'C5', 'D5', 'E5', null, null]);\n  });\n\n  it('should trigger beforeChange and afterChange hook with proper arguments', () => {\n    var spyAfter = jasmine.createSpy('after');\n    var spyBefore = jasmine.createSpy('before');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      beforeChange: spyBefore,\n      afterChange: spyAfter,\n    });\n\n    hot.spliceRow(2, 1, 3, 'X1');\n\n    expect(spyBefore.calls.argsFor(0)[0]).toEqual([[2, 1, 'B3', 'X1'], [2, 2, 'C3', 'E3'], [2, 3, 'D3', null], [2, 4, 'E3', null], [2, 5, undefined, null]]);\n    expect(spyBefore.calls.argsFor(0)[1]).toBe('spliceRow');\n    expect(spyAfter.calls.argsFor(1)[0]).toEqual([[2, 1, 'B3', 'X1'], [2, 2, 'C3', 'E3'], [2, 3, 'D3', null], [2, 4, 'E3', null], [2, 5, undefined, null]]);\n    expect(spyAfter.calls.argsFor(1)[1]).toBe('spliceRow');\n  });\n\n  it('should trigger beforeCreateCol and afterCreateCol hook with proper arguments', () => {\n    var spyAfter = jasmine.createSpy('after');\n    var spyBefore = jasmine.createSpy('before');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 5),\n      beforeCreateCol: spyBefore,\n      afterCreateCol: spyAfter,\n    });\n\n    hot.spliceRow(2, 1, 3, 'X1', 'X2', 'X3', 'X4');\n\n    expect(spyBefore).toHaveBeenCalledWith(5, 1, 'spliceRow', undefined, undefined, undefined);\n    expect(spyAfter).toHaveBeenCalledWith(5, 1, 'spliceRow', undefined, undefined, undefined);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/spliceRow.spec.js","describe('Core.toPhysicalColumn', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid physical row index', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      modifyCol(column) {\n        return column + 3;\n      }\n    });\n\n    expect(hot.toPhysicalColumn(0)).toBe(3);\n    expect(hot.toPhysicalColumn(1)).toBe(4);\n    expect(hot.toPhysicalColumn(2)).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/toPhysicalColumn.spec.js","describe('Core.toPhysicalRow', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid physical row index', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      modifyRow(row) {\n        return row + 3;\n      }\n    });\n\n    expect(hot.toPhysicalRow(0)).toBe(3);\n    expect(hot.toPhysicalRow(1)).toBe(4);\n    expect(hot.toPhysicalRow(2)).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/toPhysicalRow.spec.js","describe('Core.toVisualColumn', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid visual row index', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      unmodifyCol(column) {\n        return column + 3;\n      }\n    });\n\n    expect(hot.toVisualColumn(0)).toBe(3);\n    expect(hot.toVisualColumn(1)).toBe(4);\n    expect(hot.toVisualColumn(2)).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/toVisualColumn.spec.js","describe('Core.toVisualRow', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should return valid visual row index', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 10),\n      unmodifyRow(row) {\n        return row + 3;\n      }\n    });\n\n    expect(hot.toVisualRow(0)).toBe(3);\n    expect(hot.toVisualRow(1)).toBe(4);\n    expect(hot.toVisualRow(2)).toBe(5);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/core/toVisualRow.spec.js","describe('AutocompleteEditor', () => {\n  var id = 'testContainer';\n\n  var choices = ['yellow', 'red', 'orange', 'green', 'blue', 'gray', 'black', 'white', 'purple', 'lime', 'olive', 'cyan'];\n\n  var hot;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (hot) {\n      hot = null;\n    }\n\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('open editor', () => {\n    it('should display editor (after hitting ENTER)', () => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = $('.autocompleteEditor');\n\n      expect(editor.is(':visible')).toBe(false);\n\n      keyDownUp('enter');\n\n      expect(editor.is(':visible')).toBe(true);\n    });\n\n    it('should display editor (after hitting F2)', () => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = $('.autocompleteEditor');\n\n      expect(editor.is(':visible')).toBe(false);\n\n      keyDownUp('f2');\n\n      expect(editor.is(':visible')).toBe(true);\n    });\n\n    it('should display editor (after doubleclicking)', () => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = $('.autocompleteEditor');\n\n      expect(editor.is(':visible')).toBe(false);\n\n      mouseDoubleClick($(getCell(0, 0)));\n\n      expect(editor.is(':visible')).toBe(true);\n    });\n\n    // see https://github.com/handsontable/handsontable/issues/3380\n    it('should not throw error while selecting the next cell by hitting enter key', () => {\n      var spy = jasmine.createSpyObj('error', ['test']);\n      var prevError = window.onerror;\n\n      window.onerror = function(messageOrEvent, source, lineno, colno, error) {\n        spy.test();\n      };\n      handsontable({\n        columns: [{\n          editor: 'autocomplete',\n          source: choices\n        }]\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n      keyDownUp('enter');\n      keyDownUp('enter');\n\n      expect(spy.test.calls.count()).toBe(0);\n\n      window.onerror = prevError;\n    });\n  });\n\n  describe('choices', () => {\n    it('should display given choices (array)', (done) => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = $('.autocompleteEditor');\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);\n        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);\n        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);\n        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);\n        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);\n        done();\n      }, 100);\n    });\n\n    it('should call source function with context set as cellProperties', (done) => {\n      var source = jasmine.createSpy('source');\n      var context;\n\n      source.and.callFake(function(query, process) {\n        process(choices);\n        context = this;\n      });\n      var hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source\n          }\n        ]\n      });\n      selectCell(0, 0);\n      source.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(context.instance).toBe(hot);\n        expect(context.row).toBe(0);\n        expect(context.col).toBe(0);\n        done();\n      }, 200);\n    });\n\n    it('should display given choices (sync function)', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = $('.autocompleteEditor');\n      syncSources.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);\n        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);\n        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);\n        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);\n        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);\n        done();\n      }, 200);\n    });\n\n    it('should display given choices (async function)', (done) => {\n      var asyncSources = jasmine.createSpy('asyncSources');\n\n      asyncSources.and.callFake((process) => {\n        process(choices);\n      });\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source(query, process) {\n              setTimeout(() => {\n                asyncSources(process);\n              }, 0);\n            }\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = $('.autocompleteEditor');\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(asyncSources.calls.count()).toEqual(1);\n        expect(editor.find('tbody td:eq(0)').text()).toEqual(choices[0]);\n        expect(editor.find('tbody td:eq(1)').text()).toEqual(choices[1]);\n        expect(editor.find('tbody td:eq(2)').text()).toEqual(choices[2]);\n        expect(editor.find('tbody td:eq(3)').text()).toEqual(choices[3]);\n        expect(editor.find('tbody td:eq(4)').text()).toEqual(choices[4]);\n        done();\n      }, 200);\n    });\n\n    it('should NOT update choices list, after cursor leaves and enters the list (#1330)', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();\n      var updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;\n\n      var hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = hot.getActiveEditor();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        updateChoicesList.calls.reset();\n        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseenter();\n        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseleave();\n        $(editor.htContainer).find('.htCore tr:eq(0) td:eq(0)').mouseenter();\n      }, 200);\n\n      setTimeout(() => {\n        expect(updateChoicesList).not.toHaveBeenCalled();\n        done();\n      }, 300);\n    });\n\n    it('should update choices list exactly once after a key is pressed (#1330)', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();\n      var updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;\n\n      var hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = hot.getActiveEditor();\n      updateChoicesList.calls.reset();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        updateChoicesList.calls.reset();\n        editor.TEXTAREA.value = 'red';\n\n        $(editor.TEXTAREA).simulate('keydown', {\n          keyCode: 'd'.charCodeAt(0)\n        });\n      }, 200);\n\n      setTimeout(() => {\n        expect(updateChoicesList.calls.count()).toEqual(1);\n        done();\n      }, 100);\n    });\n\n    it('should not initialize the dropdown with unneeded scrollbars (scrollbar causing a scrollbar issue)', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();\n      var updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;\n\n      var hot = handsontable({\n        data: [\n          [\n            'blue'\n          ],\n          [],\n          [],\n          []\n        ],\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = hot.getActiveEditor();\n      updateChoicesList.calls.reset();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.htContainer.scrollWidth).toEqual(editor.htContainer.clientWidth);\n        done();\n      }, 200);\n    });\n\n    it('autocomplete list should have textarea dimensions', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        colWidths: [200],\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editor = $('.handsontableInputHolder');\n\n      syncSources.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        // -2 for transparent borders\n        expect(editor.find('.autocompleteEditor .htCore td').width()).toEqual(editor.find('.handsontableInput').width() - 2);\n        expect(editor.find('.autocompleteEditor .htCore td').width()).toBeGreaterThan(187);\n        done();\n      }, 200);\n    });\n\n    it('autocomplete list should have the suggestion table dimensions, when trimDropdown option is set to false', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(['long text', 'even longer text', 'extremely long text in the suggestion list', 'short text', 'text', 'another', 'yellow', 'black']);\n      });\n\n      var hot = handsontable({\n        colWidths: [200],\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ],\n        trimDropdown: false,\n      });\n\n      selectCell(0, 0);\n      var editor = $('.handsontableInputHolder');\n\n      syncSources.calls.reset();\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('.autocompleteEditor .htCore td').eq(0).width()).toBeGreaterThan(editor.find('.handsontableInput').width());\n        done();\n      }, 200);\n    });\n\n    it('autocomplete textarea should have cell dimensions (after render)', (done) => {\n      var data = [\n        ['a', 'b'],\n        ['c', 'd']\n      ];\n\n      hot = handsontable({\n        data,\n        minRows: 4,\n        minCols: 4,\n        minSpareRows: 4,\n        minSpareCols: 4,\n        cells() {\n          return {\n            type: Handsontable.AutocompleteCell\n          };\n        }\n      });\n\n      selectCell(1, 1);\n      keyDownUp('enter');\n\n      data[1][1] = 'dddddddddddddddddddd';\n      render();\n\n      setTimeout(() => {\n        var $td = spec().$container.find('.htCore tbody tr:eq(1) td:eq(1)');\n\n        expect(autocompleteEditor().width()).toEqual($td.width());\n        done();\n      }, 10);\n    });\n\n    it('should invoke beginEditing only once after dobleclicking on a cell (#1011)', () => {\n      var hot = handsontable({\n        columns: [\n          {},\n          {},\n          {\n            type: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n      selectCell(0, 2);\n      spyOn(hot.getActiveEditor(), 'beginEditing');\n\n      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(0);\n\n      mouseDoubleClick(getCell(0, 2));\n\n      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(1);\n\n      mouseDoubleClick(getCell(1, 2));\n\n      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(2);\n\n      mouseDoubleClick(getCell(2, 2));\n\n      expect(hot.getActiveEditor().beginEditing.calls.count()).toBe(3);\n    });\n\n    it('should not display all the choices from a long source list and not leave any unused space in the dropdown (YouTrack: #HOT-32)', (done) => {\n      var hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source: [\n              'Acura', 'Audi', 'BMW', 'Buick', 'Cadillac', 'Chevrolet', 'Chrysler', 'Citroen', 'Dodge', 'Eagle', 'Ferrari',\n              'Ford', 'General Motors', 'GMC', 'Honda', 'Hummer', 'Hyundai', 'Infiniti', 'Isuzu', 'Jaguar', 'Jeep', 'Kia',\n              'Lamborghini', 'Land Rover', 'Lexus', 'Lincoln', 'Lotus', 'Mazda', 'Mercedes-Benz', 'Mercury', 'Mitsubishi',\n              'Nissan', 'Oldsmobile', 'Peugeot', 'Pontiac', 'Porsche', 'Regal', 'Renault', 'Saab', 'Saturn', 'Seat', 'Skoda',\n              'Subaru', 'Suzuki', 'Toyota', 'Volkswagen', 'Volvo']\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n      var $autocomplete = autocomplete();\n      var $autocompleteHolder = $autocomplete.find('.ht_master .wtHolder').first();\n\n      setTimeout(() => {\n        expect($autocomplete.find('td').first().text()).toEqual('Acura');\n        $autocompleteHolder.scrollTop($autocompleteHolder[0].scrollHeight);\n      }, 100);\n\n      setTimeout(() => {\n        expect($autocomplete.find('td').last().text()).toEqual('Volvo');\n        done();\n      }, 200);\n    });\n\n    it('should display the choices, regardless if they\\'re declared as string or numeric', (done) => {\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: ['1', '2', 3, '4', 5, 6]\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n\n      var editor = $('.autocompleteEditor');\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('tbody td:eq(0)').text()).toEqual('1');\n        expect(editor.find('tbody td:eq(1)').text()).toEqual('2');\n        expect(editor.find('tbody td:eq(2)').text()).toEqual('3');\n        expect(editor.find('tbody td:eq(3)').text()).toEqual('4');\n        expect(editor.find('tbody td:eq(4)').text()).toEqual('5');\n        expect(editor.find('tbody td:eq(5)').text()).toEqual('6');\n        done();\n      }, 100);\n    });\n\n    it('should display the choices, regardless if they\\'re declared as string or numeric, when data is present', (done) => {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(10, 1),\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: ['1', '2', 3, '4', 5, 6]\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n\n      keyDownUp('backspace');\n\n      var editor = $('.autocompleteEditor');\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(editor.find('tbody td:eq(0)').text()).toEqual('1');\n        expect(editor.find('tbody td:eq(1)').text()).toEqual('2');\n        expect(editor.find('tbody td:eq(2)').text()).toEqual('3');\n        expect(editor.find('tbody td:eq(3)').text()).toEqual('4');\n        expect(editor.find('tbody td:eq(4)').text()).toEqual('5');\n        expect(editor.find('tbody td:eq(5)').text()).toEqual('6');\n        done();\n      }, 100);\n    });\n\n    it('should display the dropdown above the editor, when there is not enough space below the cell AND there is more space above the cell', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}\n        ],\n        width: 400,\n        height: 400\n      });\n\n      setDataAtCell(29, 0, '');\n      selectCell(29, 0);\n\n      mouseDoubleClick($(getCell(29, 0)));\n\n      setTimeout(() => {\n        var autocompleteEditor = $('.autocompleteEditor');\n\n        expect(autocompleteEditor.css('position')).toEqual('absolute');\n        expect(autocompleteEditor.css('top')).toEqual(`${(-1) * autocompleteEditor.height()}px`);\n        done();\n      }, 200);\n    });\n\n    it('should flip the dropdown upwards when there is no more room left below the cell after filtering the choice list', (done) => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 30),\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}\n        ],\n        width: 400,\n        height: 400\n      });\n\n      setDataAtCell(26, 0, 'b');\n      selectCell(26, 0);\n\n      hot.view.wt.wtTable.holder.scrollTop = 999;\n\n      mouseDoubleClick($(getCell(26, 0)));\n\n      var autocompleteEditor = $('.autocompleteEditor');\n\n      setTimeout(() => {\n        expect(autocompleteEditor.css('position')).toEqual('relative');\n\n        autocompleteEditor.siblings('textarea').first().val('');\n        keyDownUp('backspace');\n      }, 20);\n\n      setTimeout(() => {\n        expect(autocompleteEditor.css('position')).toEqual('absolute');\n        expect(autocompleteEditor.css('top')).toEqual(`${(-1) * autocompleteEditor.height()}px`);\n        done();\n      }, 100);\n    });\n  });\n\n  describe('closing editor', () => {\n    it('should destroy editor when value change with mouse click on suggestion', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(3)').simulate('mousedown');\n\n        expect(getDataAtCell(0, 0)).toEqual('green');\n        done();\n      }, 200);\n    });\n\n    it('should not change value type from `numeric` to `string` after mouse click suggestion - ' +\n      'test no. 1 #4143', (done) => {\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: [1, 2, 3, 4, 5, 11, 14]\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(0)').simulate('mousedown');\n\n        expect(typeof getDataAtCell(0, 0)).toEqual('number');\n        done();\n      }, 200);\n    });\n\n    it('should not change value type from `numeric` to `string` after mouse click on suggestion - ' +\n      'test no. 2 #4143', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n      const source = [1, 2, 3, 4, 5, 11, 14];\n\n      syncSources.and.callFake((query, process) => {\n        process(source);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(0)').simulate('mousedown');\n\n        expect(typeof getDataAtCell(0, 0)).toEqual('number');\n        done();\n      }, 200);\n    });\n\n    it('should call `afterChange` hook with proper value types - test no. 1 #4143', (done) => {\n      let changesInside;\n      let sourceInside;\n\n      const afterChange = (changes, source) => {\n        if (source !== 'loadData') {\n          changesInside = changes;\n          sourceInside = source;\n        }\n      };\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: [1, 2, 3, 4, 5, 11, 14]\n          }\n        ],\n        afterChange\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(1)').simulate('mousedown');\n\n        expect(changesInside[0]).toEqual([0, 0, null, 2]);\n        done();\n      }, 200);\n    });\n\n    it('should call `afterChange` hook with proper value types - test no. 2 #4143', (done) => {\n      let changesInside;\n      let sourceInside;\n\n      const afterChange = (changes, source) => {\n        if (source !== 'loadData') {\n          changesInside = changes;\n          sourceInside = source;\n        }\n      };\n\n      const syncSources = jasmine.createSpy('syncSources');\n      const source = [1, 2, 3, 4, 5, 11, 14];\n\n      syncSources.and.callFake((query, process) => {\n        process(source);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ],\n        afterChange\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().find('tbody td:eq(1)').simulate('mousedown');\n\n        expect(changesInside[0]).toEqual([0, 0, null, 2]);\n        done();\n      }, 200);\n    });\n\n    it('should not change value type from `numeric` to `string` when written down value from set of suggestions #4143', (done) => {\n      const syncSources = jasmine.createSpy('syncSources');\n      const source = [1, 2, 3, 4, 5, 11, 14];\n\n      syncSources.and.callFake((query, process) => {\n        process(source);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n      keyDownUp('backspace');\n      document.activeElement.value = '1';\n      $(document.activeElement).simulate('keyup');\n\n      setTimeout(() => {\n        keyDownUp('enter');\n        expect(getDataAtCell(0, 0)).toEqual(1);\n\n        done();\n      }, 200);\n    });\n\n    it('should destroy editor when value change with Enter on suggestion', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n\n        expect(getDataAtCell(0, 0)).toEqual('green');\n        done();\n      }, 200);\n    });\n\n    it('should destroy editor when pressed Enter then Esc', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(autocompleteEditor().is(':visible')).toBe(true);\n\n        keyDownUp('esc');\n\n        expect(autocompleteEditor().is(':visible')).toBe(false);\n        done();\n      }, 200);\n    });\n\n    it('should destroy editor when mouse double clicked then Esc', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      mouseDoubleClick(getCell(0, 0));\n\n      setTimeout(() => {\n        expect(autocompleteEditor().is(':visible')).toBe(true);\n\n        keyDownUp('esc');\n\n        expect(autocompleteEditor().is(':visible')).toBe(false);\n        done();\n      }, 200);\n    });\n\n    it('cancel editing (Esc) should restore the previous value', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n\n      setDataAtCell(0, 0, 'black');\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        autocomplete().siblings('.handsontableInput').val('ye');\n        keyDownUp(69); // e\n        keyDownUp('esc');\n\n        expect(getDataAtCell(0, 0)).toEqual('black');\n        done();\n      }, 200);\n    });\n\n    it('should destroy editor when clicked outside the table', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      mouseDoubleClick(getCell(0, 0));\n\n      setTimeout(() => {\n        expect(autocompleteEditor().is(':visible')).toBe(true);\n\n        $('body').simulate('mousedown');\n\n        expect(autocompleteEditor().is(':visible')).toBe(false);\n        done();\n      }, 200);\n    });\n\n    it('should show fillHandle element again after close editor', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.plan = function(query, process) {\n        process(choices.filter((choice) => choice.indexOf(query) != -1));\n      };\n\n      var hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source: syncSources,\n            strict: false\n          },\n          {}\n        ]\n      });\n\n      selectCell(1, 0);\n      keyDownUp('x'); // Trigger quick edit mode\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect($('#testContainer.handsontable > .handsontable .wtBorder.current.corner:visible').length).toEqual(1);\n        done();\n      }, 200);\n    });\n  });\n\n  describe('non strict mode', () => {\n    it('should allow any value in non strict mode (close editor with ENTER)', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        var editor = $('.handsontableInput');\n        editor.val('foo');\n        keyDownUp('enter');\n\n        expect(getDataAtCell(0, 0)).toEqual('foo');\n        done();\n      }, 200);\n    });\n\n    it('should allow any value in non strict mode (close editor by clicking on table)', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        var editor = $('.handsontableInput');\n        editor.val('foo');\n        spec().$container.find('tbody tr:eq(1) td:eq(0)').simulate('mousedown');\n\n        expect(getDataAtCell(0, 0)).toEqual('foo');\n        done();\n      }, 200);\n    });\n\n    it('should save the value from textarea after hitting ENTER', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter((choice) => choice.indexOf(query) != -1));\n      });\n\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['blue'],\n          ['black']\n        ]);\n\n        var selected = innerHot.getSelected();\n\n        expect(selected).toBeUndefined();\n\n        keyDownUp('enter');\n\n        expect(getDataAtCell(0, 0)).toEqual('b');\n        done();\n      }, 400);\n    });\n  });\n\n  describe('strict mode', () => {\n    it('strict mode should NOT use value if it DOES NOT match the list (sync reponse is empty)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var onAfterChange = jasmine.createSpy('onAfterChange');\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process([]); // hardcoded empty result\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: syncSources,\n            allowInvalid: false,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      setDataAtCell(0, 0, 'unexistent');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['one', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(syncSources.calls.count()).toEqual(1);\n        expect(onAfterValidate.calls.count()).toEqual(1);\n        expect(onAfterChange.calls.count()).toEqual(1); // 1 for loadData (it is not called after failed edit)\n        done();\n      }, 200);\n    });\n\n    it('strict mode should use value if it DOES match the list (sync reponse is not empty)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var onAfterChange = jasmine.createSpy('onAfterChange');\n      var syncSources = jasmine.createSpy('asyncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices); // hardcoded empty result\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: syncSources,\n            allowInvalid: false,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      setDataAtCell(0, 0, 'yellow');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['yellow', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(syncSources.calls.count()).toEqual(1);\n        expect(onAfterValidate.calls.count()).toEqual(1);\n        expect(onAfterChange.calls.count()).toEqual(2); // 1 for loadData and 1 for setDataAtCell\n        done();\n      }, 200);\n    });\n\n    it('strict mode should NOT use value if it DOES NOT match the list (async reponse is empty)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var onAfterChange = jasmine.createSpy('onAfterChange');\n      var asyncSources = jasmine.createSpy('asyncSources');\n\n      asyncSources.and.callFake((query, process) => {\n        setTimeout(() => {\n          process([]); // hardcoded empty result\n        });\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: asyncSources,\n            allowInvalid: false,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      setDataAtCell(0, 0, 'unexistent');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['one', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(asyncSources.calls.count()).toEqual(1);\n        expect(onAfterValidate.calls.count()).toEqual(1);\n        expect(onAfterChange.calls.count()).toEqual(1); // 1 for loadData (it is not called after failed edit)\n        done();\n      }, 200);\n    });\n\n    it('strict mode should use value if it DOES match the list (async reponse is not empty)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var onAfterChange = jasmine.createSpy('onAfterChange');\n      var asyncSources = jasmine.createSpy('asyncSources');\n\n      asyncSources.and.callFake((query, process) => {\n        setTimeout(() => {\n          process(choices); // hardcoded empty result\n        });\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: asyncSources,\n            allowInvalid: false,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      setDataAtCell(0, 0, 'yellow');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['yellow', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(asyncSources.calls.count()).toEqual(1);\n        expect(onAfterValidate.calls.count()).toEqual(1);\n        expect(onAfterChange.calls.count()).toEqual(2); // 1 for loadData and 1 for setDataAtCell\n        done();\n      }, 200);\n    });\n\n    it('strict mode mark value as invalid if it DOES NOT match the list (sync reponse is empty)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var onAfterChange = jasmine.createSpy('onAfterChange');\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process([]); // hardcoded empty result\n      });\n\n      handsontable({\n        data: [\n          ['one', 'two'],\n          ['three', 'four']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: syncSources,\n            allowInvalid: true,\n            strict: true\n          },\n          {}\n        ],\n        afterValidate: onAfterValidate,\n        afterChange: onAfterChange\n      });\n\n      expect(getCellMeta(0, 0).valid).not.toBe(false);\n      expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(false);\n\n      setDataAtCell(0, 0, 'unexistent');\n\n      setTimeout(() => {\n        expect(getData()).toEqual([\n          ['unexistent', 'two'],\n          ['three', 'four']\n        ]);\n\n        expect(getCellMeta(0, 0).valid).toBe(false);\n        expect($(getCell(0, 0)).hasClass('htInvalid')).toBe(true);\n        done();\n      }, 200);\n    });\n\n    it('should select the best matching option after hitting ENTER', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter((choice) => choice.indexOf(query) != -1));\n      });\n\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['blue'],\n          ['black']\n        ]);\n\n        var selected = innerHot.getSelected();\n        var selectedData = innerHot.getDataAtCell(selected[0], selected[1]);\n\n        expect(selectedData).toEqual('blue');\n\n        onAfterValidate.calls.reset();\n\n        keyDownUp('enter');\n      }, 400);\n\n      setTimeout(() => {\n        expect(getDataAtCell(0, 0)).toEqual('blue');\n        done();\n      }, 600);\n    });\n\n    it('should select the best matching option after hitting TAB', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter((choice) => choice.indexOf(query) != -1));\n      });\n\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['blue'],\n          ['black']\n        ]);\n\n        var selected = innerHot.getSelected();\n        var selectedData = innerHot.getDataAtCell(selected[0], selected[1]);\n\n        expect(selectedData).toEqual('blue');\n\n        onAfterValidate.calls.reset();\n\n        keyDownUp('tab');\n      }, 400);\n\n      setTimeout(() => {\n        expect(getDataAtCell(0, 0)).toEqual('blue');\n        done();\n      }, 600);\n    });\n\n    it('should mark list item corresponding to current cell value as selected', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(['red', 'dark-yellow', 'yellow', 'light-yellow', 'black']);\n      });\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            strict: true\n          }\n        ],\n        data: [\n          ['yellow'],\n          ['red'],\n          ['blue']\n        ]\n      });\n\n      selectCell(0, 0);\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        expect(autocomplete().find('.current').text()).toEqual(getDataAtCell(0, 0));\n        done();\n      }, 200);\n    });\n  });\n\n  describe('filtering', () => {\n    it('typing in textarea should filter the lookup list', (done) => {\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter((choice) => choice.indexOf(query) != -1));\n      });\n\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n        editorInput.val('e');\n        keyDownUp(69); // e\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red'],\n          ['yellow'],\n          ['green'],\n          ['blue'],\n          ['lime'],\n          ['white'],\n          ['olive'],\n          ['orange'],\n          ['purple']\n        ]);\n\n        syncSources.calls.reset();\n        editorInput.val('ed');\n        keyDownUp(68); // d\n      }, 400);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red']\n        ]);\n        done();\n      }, 600);\n    });\n    it('default filtering should be case insensitive', (done) => {\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      editorInput.val('e');\n      keyDownUp(69); // e\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red'],\n          ['yellow'],\n          ['green'],\n          ['blue'],\n          ['lime'],\n          ['white'],\n          ['olive'],\n          ['orange'],\n          ['purple']\n        ]);\n\n        editorInput.val('e');\n        keyDownUp(69); // E (same as 'e')\n      }, 50);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red'],\n          ['yellow'],\n          ['green'],\n          ['blue'],\n          ['lime'],\n          ['white'],\n          ['olive'],\n          ['orange'],\n          ['purple']\n        ]);\n        done();\n      }, 100);\n    });\n\n    it('default filtering should be case sensitive when filteringCaseSensitive is false', (done) => {\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices,\n            filteringCaseSensitive: true\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      editorInput.val('e');\n      keyDownUp(69); // e\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['red'],\n          ['yellow'],\n          ['green'],\n          ['blue'],\n          ['lime'],\n          ['white'],\n          ['olive'],\n          ['orange'],\n          ['purple']\n        ]);\n\n        editorInput.val('E');\n        keyDownUp(69); // E (same as 'e')\n      }, 50);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([]);\n        expect(innerHot.getSourceData()).toEqual([]);\n        done();\n      }, 200);\n    });\n\n    it('typing in textarea should NOT filter the lookup list when filtering is disabled', (done) => {\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices,\n            filter: false\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        editorInput.val('e');\n        keyDownUp('e'.charCodeAt(0)); // e\n      }, 20);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual(Handsontable.helper.pivot([choices]));\n\n        editorInput.val('ed');\n        keyDownUp('d'.charCodeAt(0)); // d\n      }, 40);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual(Handsontable.helper.pivot([choices]));\n        done();\n      }, 60);\n    });\n\n    it('typing in textarea should highlight the matching phrase', (done) => {\n      var choices = ['Male', 'Female'];\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter((choice) => choice.search(new RegExp(query, 'i')) != -1));\n      });\n\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            filter: false\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n\n        editorInput.val('Male');\n        keyDownUp(69); // e\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n        var autocompleteList = $(innerHot.rootElement);\n\n        expect(autocompleteList.find('td:eq(0)').html()).toMatch(/<(strong|STRONG)>Male<\\/(strong|STRONG)>/); // IE8 makes the tag names UPPERCASE\n        expect(autocompleteList.find('td:eq(1)').html()).toMatch(/Fe<(strong|STRONG)>male<\\/(strong|STRONG)>/);\n        done();\n      }, 400);\n    });\n\n    it('text in textarea should not be interpreted as regexp', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'queryChoices').and.callThrough();\n      var queryChoices = Handsontable.editors.AutocompleteEditor.prototype.queryChoices;\n\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        queryChoices.calls.reset();\n        editorInput.val('yellow|red');\n        keyDownUp('d'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData().length).toEqual(0);\n        done();\n      }, 400);\n    });\n\n    it('text in textarea should not be interpreted as regexp when highlighting the matching phrase', (done) => {\n      var choices = ['Male', 'Female'];\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter((choice) => choice.search(new RegExp(query, 'i')) != -1));\n      });\n\n      hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            filter: false\n          }\n        ]\n      });\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n        editorInput.val('M|F');\n        keyDownUp('F'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        var autocompleteList = $(innerHot.rootElement);\n\n        expect(autocompleteList.find('td:eq(0)').html()).toEqual('Male');\n        expect(autocompleteList.find('td:eq(1)').html()).toEqual('Female');\n        done();\n      }, 400);\n    });\n\n    it('should allow any value if filter === false and allowInvalid === true', (done) => {\n      spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'queryChoices').and.callThrough();\n      var queryChoices = Handsontable.editors.AutocompleteEditor.prototype.queryChoices;\n\n      handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: choices,\n            filter: false,\n            strict: true,\n            allowInvalid: true\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        queryChoices.calls.reset();\n        editorInput.val('foobar');\n        keyDownUp(82); // r\n      }, 200);\n\n      setTimeout(() => {\n        keyDownUp(Handsontable.helper.KEY_CODES.ENTER);\n\n        expect(getDataAtCell(0, 0)).toEqual('foobar');\n        done();\n      }, 400);\n    });\n\n    it('typing in textarea should highlight best choice, if strict === true', (done) => {\n      var choices = ['Male', 'Female'];\n      var syncSources = jasmine.createSpy('syncSources');\n\n      syncSources.and.callFake((query, process) => {\n        process(choices.filter((choice) => choice.search(new RegExp(query, 'i')) != -1));\n      });\n\n      var hot = handsontable({\n        columns: [\n          {\n            editor: 'autocomplete',\n            source: syncSources,\n            filter: false,\n            strict: true\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        syncSources.calls.reset();\n        editorInput.val('e');\n        keyDownUp(69); // e\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getSelected()).toEqual([1, 0, 1, 0]);\n        done();\n      }, 400);\n    });\n  });\n\n  it('should restore the old value when hovered over a autocomplete menu item and then clicked outside of the table', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices);\n    });\n\n    handsontable({\n      columns: [\n        {\n          editor: 'autocomplete',\n          source: syncSources\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    expect(getDataAtCell(0, 0)).toBeNull();\n\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      autocomplete().find('tbody td:eq(1)').simulate('mouseenter');\n      autocomplete().find('tbody td:eq(1)').simulate('mouseleave');\n\n      spec().$container.simulate('mousedown');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n      done();\n    }, 200);\n  });\n\n  it('should be able to use empty value (\"\")', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(['', 'BMW', 'Bentley']);\n    });\n\n    handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          editor: 'autocomplete',\n          source: syncSources,\n          filter: false\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('one');\n\n      autocomplete().find('tbody td:eq(0)').simulate('mousedown');\n\n      expect(getDataAtCell(0, 0)).toEqual('');\n      done();\n    }, 200);\n  });\n\n  describe('allow html mode', () => {\n    it('should allow inject html items (async mode)', (done) => {\n      hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source(query, cb) {\n              cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);\n            },\n            allowHtml: true,\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['<i>bar</i>'],\n          ['<strong>baz</strong>'],\n        ]);\n\n        editorInput.val('bar');\n        keyDownUp('a'.charCodeAt(0));\n        keyDownUp('r'.charCodeAt(0));\n      }, 400);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['<i>bar</i>']\n        ]);\n\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n      }, 600);\n\n      setTimeout(() => {\n        expect(getCell(0, 0).querySelector('i').textContent).toBe('bar');\n        done();\n      }, 700);\n    });\n\n    it('should allow inject html items (sync mode)', (done) => {\n      hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>'],\n            allowHtml: true,\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['<i>bar</i>'],\n          ['<strong>baz</strong>'],\n        ]);\n\n        editorInput.val('bar');\n        keyDownUp('a'.charCodeAt(0));\n        keyDownUp('r'.charCodeAt(0));\n      }, 400);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['<i>bar</i>']\n        ]);\n\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n      }, 600);\n\n      setTimeout(() => {\n        expect(getCell(0, 0).querySelector('i').textContent).toBe('bar');\n        done();\n      }, 700);\n    });\n  });\n\n  describe('disallow html mode', () => {\n    it('should be disabled by default', () => {\n      hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source(query, cb) {\n              cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);\n            },\n            allowHtml: false,\n          }\n        ]\n      });\n\n      expect(hot.getCellMeta(0, 0).allowHtml).toBeFalsy();\n    });\n\n    it('should strip html from strings provided in source (async mode)', (done) => {\n      hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source(query, cb) {\n              cb(['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>']);\n            },\n            allowHtml: false,\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['bar'],\n          ['baz'],\n        ]);\n\n        editorInput.val('bar');\n        keyDownUp('a'.charCodeAt(0));\n        keyDownUp('r'.charCodeAt(0));\n      }, 400);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['bar']\n        ]);\n\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n      }, 600);\n\n      setTimeout(() => {\n        expect(getCell(0, 0).querySelector('i')).toBeNull();\n        expect(getCell(0, 0).textContent).toMatch('bar');\n        done();\n      }, 700);\n    });\n\n    it('should strip html from strings provided in source (sync mode)', (done) => {\n      hot = handsontable({\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['<b>foo <span>zip</span></b>', '<i>bar</i>', '<strong>baz</strong>'],\n            allowHtml: false,\n          }\n        ]\n      });\n\n      selectCell(0, 0);\n      var editorInput = $('.handsontableInput');\n\n      expect(getDataAtCell(0, 0)).toBeNull();\n\n      keyDownUp('enter');\n\n      setTimeout(() => {\n        editorInput.val('b');\n        keyDownUp('b'.charCodeAt(0));\n      }, 200);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['bar'],\n          ['baz'],\n        ]);\n\n        editorInput.val('bar');\n        keyDownUp('a'.charCodeAt(0));\n        keyDownUp('r'.charCodeAt(0));\n      }, 400);\n\n      setTimeout(() => {\n        var ac = hot.getActiveEditor();\n        var innerHot = ac.htEditor;\n\n        expect(innerHot.getData()).toEqual([\n          ['bar']\n        ]);\n\n        keyDownUp('arrow_down');\n        keyDownUp('enter');\n      }, 600);\n\n      setTimeout(() => {\n        expect(getCell(0, 0).querySelector('i')).toBeNull();\n        expect(getCell(0, 0).textContent).toMatch('bar');\n        done();\n      }, 700);\n    });\n  });\n\n  describe('Autocomplete helper functions:', () => {\n    describe('sortByRelevance', () => {\n      it('should sort the provided array, so items more relevant to the provided value are listed first', () => {\n        var choices = [\n          'Wayne', // 0\n          'Draven', // 1\n          'Banner', // 2\n          'Stark', // 3\n          'Parker', // 4\n          'Kent', // 5\n          'Gordon', // 6\n          'Kyle', // 7\n          'Simmons'// 8\n        ];\n        let value = 'a';\n\n        var sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choices);\n\n        expect(sorted).toEqual([0, 2, 4, 3, 1]);\n\n        value = 'o';\n        sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choices);\n\n        expect(sorted).toEqual([6, 8]);\n\n        value = 'er';\n        sorted = Handsontable.editors.AutocompleteEditor.sortByRelevance(value, choices);\n\n        expect(sorted).toEqual([2, 4]);\n      });\n    });\n  });\n\n  it('should not modify the suggestion lists\\' order, when the sortByRelevance option is set to false', (done) => {\n    var choices = [\n      'Wayne', 'Draven', 'Banner', 'Stark', 'Parker', 'Kent', 'Gordon', 'Kyle', 'Simmons'\n    ];\n    var hot = handsontable({\n      columns: [\n        {\n          editor: 'autocomplete',\n          source: choices,\n          sortByRelevance: false\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('a');\n    keyDownUp('a'.charCodeAt(0));\n    Handsontable.dom.setCaretPosition($editorInput[0], 1);\n\n    setTimeout(() => {\n      var dropdownList = $('.autocompleteEditor tbody').first();\n      var listLength = dropdownList.find('tr').size();\n\n      expect(listLength).toBe(9);\n\n      for (var i = 1; i <= listLength; i++) {\n        expect(dropdownList.find(`tr:nth-child(${i}) td`).text()).toEqual(choices[i - 1]);\n      }\n      done();\n    }, 30);\n  });\n\n  it('should fire one afterChange event when value is changed', (done) => {\n    var onAfterChange = jasmine.createSpy('onAfterChange');\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices);\n    });\n\n    handsontable({\n      columns: [\n        {\n          editor: 'autocomplete',\n          source: syncSources\n        }\n      ],\n      afterChange: onAfterChange\n    });\n\n    selectCell(0, 0);\n\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      onAfterChange.calls.reset();\n      autocomplete().find('tbody td:eq(1)').simulate('mousedown');\n\n      expect(getDataAtCell(0, 0)).toEqual('red');\n      expect(onAfterChange.calls.count()).toEqual(1);\n      expect(onAfterChange).toHaveBeenCalledWith([[0, 0, null, 'red']], 'edit', undefined, undefined, undefined, undefined);\n      done();\n    }, 200);\n  });\n\n  it('should not affect other cell values after clicking on autocomplete cell (#1021)', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices);\n    });\n\n    handsontable({\n      columns: [\n        {},\n        {},\n        {\n          editor: 'autocomplete',\n          source: syncSources\n        },\n        {}\n      ],\n      data: [\n        [null, null, 'yellow', null],\n        [null, null, 'red', null],\n        [null, null, 'blue', null]\n      ]\n    });\n\n    expect($(getCell(0, 2)).text()).toMatch('yellow');\n\n    mouseDoubleClick(getCell(0, 2));\n\n    expect($(getCell(1, 2)).text()).toMatch('red');\n\n    mouseDoubleClick(getCell(1, 2));\n\n    expect($(getCell(2, 2)).text()).toMatch('blue');\n\n    mouseDoubleClick(getCell(2, 2));\n\n    setTimeout(() => {\n      expect(getDataAtCol(2)).toEqual(['yellow', 'red', 'blue']);\n      done();\n    }, 200);\n  });\n\n  it('should handle editor if cell data is a function', (done) => {\n    spyOn(Handsontable.editors.AutocompleteEditor.prototype, 'updateChoicesList').and.callThrough();\n    var updateChoicesList = Handsontable.editors.AutocompleteEditor.prototype.updateChoicesList;\n    var afterValidateCallback = jasmine.createSpy('afterValidateCallbak');\n\n    var hot = handsontable({\n      data: [\n        new Model({\n          id: 1,\n          name: 'Ted Right',\n          address: ''\n        }),\n        new Model({\n          id: 2,\n          name: 'Frank Honest',\n          address: ''\n        }),\n        new Model({\n          id: 3,\n          name: 'Joan Well',\n          address: ''\n        })],\n      dataSchema: Model,\n      colHeaders: ['ID', 'Name', 'Address'],\n      columns: [\n        {\n          data: createAccessorForProperty('id'),\n          type: 'autocomplete',\n          source: ['1', '2', '3'],\n          filter: false,\n          strict: true\n        },\n        {\n          data: createAccessorForProperty('name')\n        },\n        {\n          data: createAccessorForProperty('address')\n        }\n      ],\n      minSpareRows: 1,\n      afterValidate: afterValidateCallback\n    });\n    selectCell(0, 0);\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    keyDownUp('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().isOpened()).toBe(true);\n      afterValidateCallback.calls.reset();\n      $(hot.getActiveEditor().htContainer).find('tr:eq(1) td:eq(0)').simulate('mousedown');\n    }, 200);\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('2');\n      done();\n    }, 400);\n  });\n\n  it('should not call the `source` has been selected', () => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process([]); // hardcoded empty result\n    });\n\n    handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          allowInvalid: false,\n          strict: true\n        },\n        {}\n      ],\n      cells(row, col) {\n        var cellProperties = {};\n\n        if (row === 0 && col === 0) {\n          cellProperties.readOnly = true;\n        }\n\n        return cellProperties;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect(syncSources).not.toHaveBeenCalled();\n\n    selectCell(0, 0);\n\n    expect(syncSources).not.toHaveBeenCalled();\n\n    expect(getCellMeta(1, 0).readOnly).toBeFalsy();\n\n    selectCell(1, 0);\n\n    expect(syncSources).not.toHaveBeenCalled();\n  });\n\n  it('should not call the `source` method if cell is read only and the arrow has been clicked', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process([]); // hardcoded empty result\n    });\n\n    handsontable({\n      data: [\n        ['one', 'two'],\n        ['three', 'four']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          allowInvalid: false,\n          strict: true\n        },\n        {}\n      ],\n      cells(row, col) {\n        var cellProperties = {};\n\n        if (row === 0 && col === 0) {\n          cellProperties.readOnly = true;\n        }\n\n        return cellProperties;\n      }\n    });\n\n    expect(getCellMeta(0, 0).readOnly).toBe(true);\n    expect(syncSources).not.toHaveBeenCalled();\n\n    selectCell(0, 0);\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    setTimeout(() => {\n      expect(syncSources).not.toHaveBeenCalled();\n\n      syncSources.calls.reset();\n      expect(getCellMeta(1, 0).readOnly).toBeFalsy();\n\n      selectCell(1, 0);\n      $(getCell(1, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n    }, 100);\n\n    setTimeout(() => {\n      expect(syncSources).toHaveBeenCalled();\n      expect(syncSources.calls.count()).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should add a scrollbar to the autocomplete dropdown, only if number of displayed choices exceeds 10', function(done) {\n    var hot = handsontable({\n      data: [\n        ['', 'two', 'three'],\n        ['four', 'five', 'six']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: choices,\n          allowInvalid: false,\n          strict: false\n        },\n        {},\n        {}\n      ]\n    });\n\n    this.$container.css({\n      height: 600\n    });\n\n    expect(choices.length).toBeGreaterThan(10);\n\n    selectCell(0, 0);\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    var dropdown = hot.getActiveEditor().htContainer;\n    var dropdownHolder = hot.getActiveEditor().htEditor.view.wt.wtTable.holder;\n\n    setTimeout(() => {\n      expect(dropdownHolder.scrollHeight).toBeGreaterThan(dropdownHolder.clientHeight);\n\n      keyDownUp('esc');\n\n      hot.getSettings().columns[0].source = hot.getSettings().columns[0].source.slice(0).splice(3);\n      hot.updateSettings({});\n\n      selectCell(0, 0);\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n    }, 30);\n\n    setTimeout(() => {\n      expect(dropdownHolder.scrollHeight > dropdownHolder.clientHeight).toBe(false);\n      done();\n    }, 60);\n  });\n\n  it('should not close editor on scrolling', (done) => {\n    var hot = handsontable({\n      data: [\n        ['', 'two', 'three'],\n        ['four', 'five', 'six']\n      ],\n      columns: [\n        {\n          type: 'autocomplete',\n          source: choices,\n          allowInvalid: false,\n          strict: false\n        },\n        {},\n        {}\n      ]\n    });\n\n    expect(choices.length).toBeGreaterThan(10);\n\n    selectCell(0, 0);\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');\n\n    var dropdown = hot.getActiveEditor().htContainer;\n\n    hot.view.wt.wtOverlays.topOverlay.scrollTo(1);\n\n    setTimeout(() => {\n      expect($(dropdown).is(':visible')).toBe(true);\n      selectCell(0, 0);\n    }, 30);\n\n    setTimeout(() => {\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');\n      hot.view.wt.wtOverlays.topOverlay.scrollTo(3);\n    }, 80);\n\n    setTimeout(() => {\n      expect($(dropdown).is(':visible')).toBe(true);\n      done();\n    }, 120);\n  });\n\n  it('should keep textarea caret position, after moving the selection to the suggestion list (pressing down arrow)', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    Handsontable.dom.setCaretPosition($editorInput[0], 1);\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n      expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);\n      keyDownUp('arrow_down');\n      expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);\n      done();\n    }, 200);\n  });\n\n  it('should keep textarea selection, after moving the selection to the suggestion list (pressing down arrow)', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    Handsontable.dom.setCaretPosition($editorInput[0], 1, 2);\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n      expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);\n      expect(Handsontable.dom.getSelectionEndPosition($editorInput[0])).toEqual(2);\n      keyDownUp('arrow_down');\n      expect(Handsontable.dom.getCaretPosition($editorInput[0])).toEqual(1);\n      expect(Handsontable.dom.getSelectionEndPosition($editorInput[0])).toEqual(2);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the sibling cell, after pressing up key in quick edit mode', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_up');\n\n      expect(getSelected()).toEqual([0, 0, 0, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the next cell, after pressing right key in quick edit mode', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.plan = function(query, process) {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    };\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_right');\n\n      expect(getSelected()).toEqual([1, 1, 1, 1]);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the next cell, after pressing left key in quick edit mode', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    handsontable({\n      columns: [\n        {},\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        }\n      ]\n    });\n\n    selectCell(1, 1);\n    keyDownUp('x'); // trigger quick edit mode\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    // put caret on the end of the text to ensure that editor will be closed after hit left arrow key\n    Handsontable.dom.setCaretPosition($editorInput[0], 2, 2);\n\n    setTimeout(() => {\n      keyDownUp('arrow_left');\n\n      expect(getSelected()).toEqual([1, 0, 1, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the next cell, after pressing down key in quick edit mode', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n\n      expect(getSelected()).toEqual([1, 0, 1, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should jump to the next cell, after pressing down key in quick edit mode when no matching option list found', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('anananan');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n\n      expect(getSelected()).toEqual([2, 0, 2, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should not jump to the next cell, after pressing down key in quick edit mode when options list was opened', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n    selectCell(1, 0);\n    keyDownUp('x'); // trigger quick edit mode\n    var $editorInput = $('.handsontableInput');\n    $editorInput.val('an');\n    keyDownUp(65); // a\n    keyDownUp(78); // n\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n\n      expect(getSelected()).toEqual([1, 0, 1, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should select option in opened editor after pressing down key in quick edit mode', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    var hot = handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // Trigger quick edit mode\n\n    setTimeout(() => {\n      keyDownUp('arrow_down');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([0, 0, 0, 0]);\n\n      keyDownUp('arrow_down');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([1, 0, 1, 0]);\n\n      keyDownUp('arrow_down');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([2, 0, 2, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should select option in opened editor after pressing up key in quick edit mode', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    var hot = handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // Trigger quick edit mode\n\n    setTimeout(() => {\n      hot.getActiveEditor().htEditor.selectCell(2, 0);\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([2, 0, 2, 0]);\n\n      keyDownUp('arrow_up');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([1, 0, 1, 0]);\n\n      keyDownUp('arrow_up');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([0, 0, 0, 0]);\n\n      keyDownUp('arrow_up');\n\n      expect(hot.getActiveEditor().htEditor.getSelected()).toEqual([0, 0, 0, 0]);\n      done();\n    }, 200);\n  });\n\n  it('should not close editor in quick edit mode after pressing down key when last option is selected', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    var hot = handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // Trigger quick edit mode\n\n    setTimeout(() => {\n      hot.getActiveEditor().htEditor.selectCell(7, 0);\n      hot.listen();\n\n      keyDownUp('arrow_down');\n      keyDownUp('arrow_down');\n      keyDownUp('arrow_down');\n      keyDownUp('arrow_down');\n      keyDownUp('arrow_down');\n\n      expect(hot.getActiveEditor().isOpened()).toBe(true);\n      done();\n    }, 200);\n  });\n\n  it('should close editor in quick edit mode after pressing up key when no option is selected', (done) => {\n    var syncSources = jasmine.createSpy('syncSources');\n\n    syncSources.and.callFake((query, process) => {\n      process(choices.filter((choice) => choice.indexOf(query) != -1));\n    });\n\n    var hot = handsontable({\n      columns: [\n        {\n          type: 'autocomplete',\n          source: syncSources,\n          strict: false\n        },\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDownUp('x'); // Trigger quick edit mode\n\n    setTimeout(() => {\n      hot.getActiveEditor().htEditor.selectCell(1, 0);\n      hot.listen();\n\n      keyDownUp('arrow_up');\n      keyDownUp('arrow_up');\n      keyDownUp('arrow_up');\n\n      expect(getSelected()).toEqual([0, 0, 0, 0]);\n      done();\n    }, 200);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/autocompleteEditor.spec.js","describe('BaseEditor', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('ctrl + enter when editor is active', () => {\n    it('should populate value from the currently active cell to every cell in the selected range', () => {\n      var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(6, 6)\n      });\n\n      selectCell(1, 1, 2, 2);\n\n      expect(getDataAtCell(1, 1)).toEqual('B2');\n      expect(getDataAtCell(2, 2)).toEqual('C3');\n\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      keyDown('ctrl+enter');\n\n      expect(getDataAtCell(1, 1)).toEqual('B2');\n      expect(getDataAtCell(1, 2)).toEqual('B2');\n      expect(getDataAtCell(2, 1)).toEqual('B2');\n      expect(getDataAtCell(2, 2)).toEqual('B2');\n\n      loadData(Handsontable.helper.createSpreadsheetData(6, 6));\n\n      selectCell(1, 2, 2, 1);\n\n      expect(getDataAtCell(1, 2)).toEqual('C2');\n      expect(getDataAtCell(2, 1)).toEqual('B3');\n\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      keyDown('ctrl+enter');\n\n      expect(getDataAtCell(1, 1)).toEqual('C2');\n      expect(getDataAtCell(1, 2)).toEqual('C2');\n      expect(getDataAtCell(2, 1)).toEqual('C2');\n      expect(getDataAtCell(2, 2)).toEqual('C2');\n\n      loadData(Handsontable.helper.createSpreadsheetData(6, 6));\n      selectCell(2, 2, 1, 1);\n      expect(getDataAtCell(2, 2)).toEqual('C3');\n\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      keyDown('ctrl+enter');\n\n      expect(getDataAtCell(1, 1)).toEqual('C3');\n      expect(getDataAtCell(1, 2)).toEqual('C3');\n      expect(getDataAtCell(2, 1)).toEqual('C3');\n      expect(getDataAtCell(2, 2)).toEqual('C3');\n\n      loadData(Handsontable.helper.createSpreadsheetData(6, 6));\n      selectCell(2, 1, 1, 2);\n      expect(getDataAtCell(2, 1)).toEqual('B3');\n\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      keyDown('ctrl+enter');\n\n      expect(getDataAtCell(1, 1)).toEqual('B3');\n      expect(getDataAtCell(1, 2)).toEqual('B3');\n      expect(getDataAtCell(2, 1)).toEqual('B3');\n      expect(getDataAtCell(2, 2)).toEqual('B3');\n    });\n  });\n\n  it('should exported all editors into Handsontable.editors object', () => {\n    expect(Handsontable.editors.AutocompleteEditor).toBeDefined();\n    expect(Handsontable.editors.BaseEditor).toBeDefined();\n    expect(Handsontable.editors.CheckboxEditor).toBeDefined();\n    expect(Handsontable.editors.DateEditor).toBeDefined();\n    expect(Handsontable.editors.DropdownEditor).toBeDefined();\n    expect(Handsontable.editors.HandsontableEditor).toBeDefined();\n    expect(Handsontable.editors.MobileEditor).toBeDefined();\n    expect(Handsontable.editors.NumericEditor).toBeDefined();\n    expect(Handsontable.editors.PasswordEditor).toBeDefined();\n    expect(Handsontable.editors.SelectEditor).toBeDefined();\n    expect(Handsontable.editors.TextEditor).toBeDefined();\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/baseEditor.spec.js","describe('DateEditor', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function getDates() {\n    return [\n      ['01/14/2006'],\n      ['12/01/2008'],\n      ['11/19/2011'],\n      ['02/02/2004'],\n      ['07/24/2011']\n    ];\n  }\n\n  it('should display Pikday calendar', () => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    expect($('.pika-single').is(':visible')).toBe(false);\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect($('.pika-single').is(':visible')).toBe(true);\n  });\n\n  it('should pass date picker config object to Pikday', () => {\n    var onOpenSpy = jasmine.createSpy('open');\n    var onCloseSpy = jasmine.createSpy('close');\n    var hot = handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          datePickerConfig: {\n            firstDay: 1,\n            field: 'field', // read only - shouldn't overwrite\n            trigger: 'trigger', // read only - shouldn't overwrite\n            container: 'container', // read only - shouldn't overwrite\n            bound: true, // read only - shouldn't overwrite\n            i18n: {\n              previousMonth: 'Poprzedni',\n              nextMonth: 'Następny',\n              months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n              weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n              weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n            },\n            onOpen: onOpenSpy,\n            onClose: onCloseSpy\n          }\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n    keyDown('esc');\n\n    var config = hot.getActiveEditor().$datePicker.config();\n\n    expect(config.field instanceof HTMLElement).toBe(true);\n    expect(config.trigger instanceof HTMLElement).toBe(true);\n    expect(config.container instanceof HTMLElement).toBe(true);\n    expect(config.bound).toBe(false);\n    expect(config.firstDay).toBe(1);\n    expect(config.i18n.previousMonth).toBe('Poprzedni');\n    expect(config.i18n.nextMonth).toBe('Następny');\n    expect(onOpenSpy).toHaveBeenCalled();\n    expect(onCloseSpy).toHaveBeenCalled();\n  });\n\n  it('should remove any HTML connected with Pikaday Calendar', () => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    expect($('.pika-single').length).toBe(0);\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect($('.pika-single').length).toBe(1);\n\n    destroy();\n\n    expect($('.pika-single').length).toBe(0);\n  });\n\n  it('should select date corresponding to cell value', () => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    var date = new Date(getDates()[0][0]);\n\n    expect($('.pika-single').find('.pika-select-year').find(':selected').val()).toMatch(date.getFullYear().toString());\n    expect($('.pika-single').find('.pika-select-month').find(':selected').val()).toMatch(date.getMonth().toString());\n    expect($('.pika-single').find('.pika-table .is-selected').text()).toMatch(date.getDate().toString());\n  });\n\n  it('should save new date after clicked on calendar', (done) => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    expect(getDataAtCell(0, 0)).toMatch('01/14/2006');\n\n    keyDown('enter');\n\n    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toMatch('01/01/2006');\n      done();\n    }, 150);\n  });\n\n  it('should display fill handle after selected date on calendar', (done) => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    expect(getDataAtCell(0, 0)).toMatch('01/14/2006');\n\n    keyDown('enter');\n\n    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toMatch('01/01/2006');\n      expect($('.htBorders .current.corner').is(':visible')).toBe(true);\n      done();\n    }, 150);\n  });\n\n  it('should setup in settings and display defaultDate on calendar', (done) => {\n    handsontable({\n      data: getDates(),\n      minSpareRows: 1,\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY',\n          defaultDate: '01/01/1900'\n        }\n      ]\n    });\n\n    selectCell(5, 0);\n    expect(getDataAtCell(5, 0)).toBe(null);\n\n    keyDown('enter');\n\n    var date = new Date('01/01/1900');\n\n    expect($('.pika-single').find('.pika-select-year').find(':selected').val()).toMatch(date.getFullYear().toString());\n    expect($('.pika-single').find('.pika-select-month').find(':selected').val()).toMatch(date.getMonth().toString());\n    expect($('.pika-single').find('.pika-table .is-selected').text()).toMatch(date.getDate().toString());\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(getDataAtCell(5, 0)).toMatch('01/01/1900');\n      done();\n    }, 150);\n  });\n\n  it('should close calendar after picking new date', () => {\n    handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date',\n          dateFormat: 'MM/DD/YYYY'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect($('.pika-single').is(':visible')).toBe(true);\n\n    mouseDown($('.pika-single').find('.pika-table tbody tr:eq(0) td:eq(0) button'));\n\n    expect($('.pika-single').is(':visible')).toBe(false);\n  });\n\n  it('should enable to input any value in textarea', (done) => {\n    var hot = handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = hot.getActiveEditor();\n\n    editor.beginEditing();\n\n    expect(editor.isOpened()).toBe(true);\n\n    editor.TEXTAREA.value = 'foo';\n    keyDownUp('o'.charCodeAt(0));\n\n    expect(editor.getValue()).toEqual('foo');\n\n    editor.finishEditing();\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('foo');\n      done();\n    }, 30);\n  });\n\n  it('should restore original when edited and pressed ESC ', (done) => {\n    var hot = handsontable({\n      data: getDates(),\n      columns: [\n        {\n          type: 'date'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = hot.getActiveEditor();\n\n    editor.beginEditing();\n\n    expect(editor.isOpened()).toBe(true);\n\n    editor.TEXTAREA.value = 'foo';\n\n    expect(editor.getValue()).toEqual('foo');\n\n    keyDownUp(Handsontable.helper.KEY_CODES.ESCAPE); // cancel editing\n\n    editor.finishEditing();\n\n    setTimeout(() => {\n      expect(getDataAtCell(0, 0)).toEqual('01/14/2006');\n      done();\n    }, 30);\n  });\n\n  it('should display a calendar based on a current date, even if a date in a wrong format was entered previously', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      columns: [\n        {type: 'date'},\n        {type: 'date', dateFormat: 'YYYY-MM-DD'}\n      ],\n      minSpareRows: 1\n    });\n\n    setDataAtCell(4, 1, '15-11-11');\n\n    setTimeout(() => {\n      selectCell(5, 1);\n      keyDown('enter');\n\n      expect($('.pika-single').is(':visible')).toBe(true);\n\n      mouseDown($('.pika-single').find('.pika-table tbody tr:eq(3) td:eq(3) button'));\n    }, 150);\n\n    setTimeout(() => {\n      let resultDate = getDataAtCell(5, 1);\n\n      expect(moment(resultDate).year()).toEqual(moment().year());\n      expect(moment(resultDate).month()).toEqual(moment().month());\n      done();\n    }, 300);\n  });\n\n  it('should display Pikaday Calendar bottom of the selected cell', () => {\n    var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 2),\n        columns: [\n          {type: 'date'},\n          {type: 'date'}\n        ]\n      }),\n      cellOffset,\n      datePickerOffset;\n\n    selectCell(1, 1);\n    keyDown('enter');\n\n    cellOffset = $(hot.getActiveEditor().TD).offset();\n    datePickerOffset = $('.pika-single').offset();\n\n    // 23 is a height of the editor cell\n    expect(cellOffset.top + 23).toBeCloseTo(datePickerOffset.top, 0);\n    expect(cellOffset.left).toBeCloseTo(datePickerOffset.left, 0);\n  });\n\n  it('should display Pikaday Calendar bottom of the selected cell when table have scrolls', () => {\n    var container = $('#testContainer');\n\n    container[0].style.height = '300px';\n    container[0].style.width = '200px';\n    container[0].style.overflow = 'hidden';\n\n    var hot = handsontable({\n        data: Handsontable.helper.createSpreadsheetData(30, 10),\n        colWidths: 60,\n        columns: [\n          {type: 'date'},\n          {type: 'date'},\n          {type: 'date'},\n          {type: 'date'},\n          {type: 'date'},\n          {type: 'date'},\n          {type: 'date'}\n        ]\n      }),\n      cellOffset,\n      datePickerOffset;\n\n    selectCell(20, 6);\n    keyDown('enter');\n\n    cellOffset = $(hot.getActiveEditor().TD).offset();\n    datePickerOffset = $('.pika-single').offset();\n\n    expect(cellOffset.top + 23).toBeCloseTo(datePickerOffset.top, 0);\n    expect(cellOffset.left).toBeCloseTo(datePickerOffset.left, 0);\n  });\n\n  it('should not modify the edited date and time, when opening the editor', () => {\n    var hot = handsontable({\n        data: [['02/02/2015 8:00 AM']],\n        columns: [\n          {\n            type: 'date',\n            dateFormat: 'MM/DD/YYYY h:mm A',\n            correctFormat: true,\n            defaultDate: '01/01/1900',\n            allowEmpty: false,\n          }\n        ]\n      }),\n      editor,\n      cellValue;\n\n    // setDataAtCell(0, 0, '02/02/2015 8:00 AM');\n    cellValue = getDataAtCell(0, 0);\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    editor = hot.getActiveEditor();\n\n    expect(editor.TEXTAREA.value).toEqual(cellValue);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/dateEditor.spec.js","describe('DropdownEditor', () => {\n  var id = 'testContainer';\n\n  var choices = ['yellow', 'red', 'orange', 'green', 'blue', 'gray', 'black', 'white', 'purple', 'lime', 'olive', 'cyan'];\n\n  var hot;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (hot) {\n      hot = null;\n    }\n\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('open editor', () => {\n    // see https://github.com/handsontable/handsontable/issues/3380\n    it('should not throw error while selecting the next cell by hitting enter key', () => {\n      var spy = jasmine.createSpyObj('error', ['test']);\n      var prevError = window.onerror;\n\n      window.onerror = function(messageOrEvent, source, lineno, colno, error) {\n        spy.test();\n      };\n      handsontable({\n        columns: [{\n          editor: 'dropdown',\n          source: choices\n        }]\n      });\n\n      selectCell(0, 0);\n      keyDownUp('enter');\n      keyDownUp('enter');\n      keyDownUp('enter');\n\n      expect(spy.test.calls.count()).toBe(0);\n\n      window.onerror = prevError;\n    });\n  });\n\n  describe('closing the editor', () => {\n    it('should not close editor on scrolling', (done) => {\n      hot = handsontable({\n        data: [\n          ['', 'two', 'three'],\n          ['four', 'five', 'six']\n        ],\n        columns: [\n          {\n            type: 'dropdown',\n            source: choices\n          },\n          {},\n          {}\n        ]\n      });\n\n      selectCell(0, 0);\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n      $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');\n\n      hot.view.wt.wtOverlays.topOverlay.scrollTo(1);\n      var dropdown = hot.getActiveEditor();\n\n      setTimeout(() => {\n        expect($(dropdown.htContainer).is(':visible')).toBe(true);\n        selectCell(0, 0);\n      }, 30);\n\n      setTimeout(() => {\n        $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n        $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mouseup');\n\n        hot.view.wt.wtOverlays.topOverlay.scrollTo(3);\n      }, 150);\n\n      setTimeout(() => {\n        expect($(dropdown.htContainer).is(':visible')).toBe(true);\n        done();\n      }, 200);\n    });\n  });\n\n  it('should mark all invalid values as invalid, after pasting them into dropdown-type cells', (done) => {\n    hot = handsontable({\n      data: [\n        ['', 'two', 'three'],\n        ['four', 'five', 'six']\n      ],\n      columns: [\n        {\n          type: 'dropdown',\n          source: choices\n        },\n        {},\n        {}\n      ]\n    });\n\n    populateFromArray(0, 0, [['invalid'], ['input']], null, null, 'paste');\n\n    setTimeout(() => {\n      expect(Handsontable.dom.hasClass(getCell(0, 0), 'htInvalid')).toBe(true);\n      expect(Handsontable.dom.hasClass(getCell(1, 0), 'htInvalid')).toBe(true);\n      done();\n    }, 40);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/dropdownEditor.spec.js","describe('HandsontableEditor', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  function getManufacturerData() {\n    return [\n      {name: 'BMW', country: 'Germany', owner: 'Bayerische Motoren Werke AG'},\n      {name: 'Chrysler', country: 'USA', owner: 'Chrysler Group LLC'},\n      {name: 'Nissan', country: 'Japan', owner: 'Nissan Motor Company Ltd'},\n      {name: 'Suzuki', country: 'Japan', owner: 'Suzuki Motor Corporation'},\n      {name: 'Toyota', country: 'Japan', owner: 'Toyota Motor Corporation'},\n      {name: 'Volvo', country: 'Sweden', owner: 'Zhejiang Geely Holding Group'}\n    ];\n  }\n\n  it('should create an editor that is a Handsontable instance', function() {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    expect(this.$container.find('.handsontableEditor:visible').length).toEqual(1);\n  });\n\n  it('should create an editor directly below the textarea element', function() {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    expect(this.$container.find('.handsontableEditor')[0].offsetTop).toEqual(this.$container.find('.handsontableInput')[0].offsetHeight);\n  });\n\n  it('should destroy the editor when Esc is pressed', function() {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    keyDownUp('esc');\n    expect(this.$container.find('.handsontableEditor:visible').length).toEqual(0);\n  });\n\n  // see https://github.com/handsontable/handsontable/issues/3380\n  it('should not throw error while selecting the next cell by hitting enter key', () => {\n    var spy = jasmine.createSpyObj('error', ['test']);\n    var prevError = window.onerror;\n\n    window.onerror = function(messageOrEvent, source, lineno, colno, error) {\n      spy.test();\n    };\n    handsontable({\n      columns: [{\n        type: 'handsontable',\n        handsontable: {\n          data: [['Marque'], ['Country'], ['Parent company']]\n        }\n      }]\n    });\n\n    selectCell(0, 0);\n    keyDownUp('enter');\n    keyDownUp('enter');\n    keyDownUp('enter');\n\n    expect(spy.test.calls.count()).toBe(0);\n\n    window.onerror = prevError;\n  });\n\n  it('Enter pressed in nested HT should set the value and hide the editor', function() {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    keyDownUp('arrow_down');\n    keyDownUp('enter');\n    expect(this.$container.find('.handsontableEditor:visible').length).toEqual(0);\n    expect(getDataAtCell(2, 0)).toEqual('BMW');\n  });\n\n  it('should keep focus on textarea after arrow is pressed', () => {\n    var hot = handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n    selectCell(2, 0);\n\n    keyDownUp('enter');\n    keyDownUp('arrow_down');\n    expect(document.activeElement).toEqual(hot.getActiveEditor().TEXTAREA);\n  });\n\n  it('should focus the TD after HT editor is prepared and destroyed', () => {\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData()\n          }\n        }\n      ]\n    });\n\n    selectCell(2, 0);\n    keyDownUp('arrow_down');\n    keyDownUp('arrow_down');\n\n    expect(getSelected()).toEqual([4, 0, 4, 0]);\n  });\n\n  it('should focus the TD after HT editor is prepared, finished (by keyboard) and destroyed', () => {\n    var selections = [];\n\n    handsontable({\n      columns: [\n        {\n          type: 'handsontable',\n          handsontable: {\n            colHeaders: ['Marque', 'Country', 'Parent company'],\n            data: getManufacturerData(),\n            afterSelection() {\n              selections.push(['inner', arguments[0]]); // arguments[0] is selection start row\n            }\n          }\n        }\n      ],\n      afterSelection() {\n        selections.push(['outer', arguments[0]]); // arguments[0] is selection start row\n      }\n    });\n    expect(selections.length).toBe(0);\n\n    selectCell(1, 0);\n    expect(selections[0]).toEqual(['outer', 1]);\n\n    keyDownUp('arrow_down');\n    expect(selections[1]).toEqual(['outer', 2]);\n\n    keyDownUp('enter');\n\n    keyDownUp('arrow_down');\n    expect(selections[2]).toEqual(['inner', 0]);\n\n    keyDownUp('esc');\n    keyDownUp('arrow_down');\n    expect(selections[3]).toEqual(['outer', 3]);\n\n    expect(selections.length).toBe(4);\n  });\n\n  describe('strict mode', () => {\n    it('should open editor and select cell (0, 0) in inner HOT', () => {\n      var hot = handsontable({\n        columns: [\n          {\n            type: 'handsontable',\n            handsontable: {\n              colHeaders: ['Marque', 'Country', 'Parent company'],\n              data: getManufacturerData()\n            },\n            strict: true\n          }\n        ]\n      });\n      selectCell(2, 0);\n\n      keyDownUp('enter');\n\n      var ht = hot.getActiveEditor();\n      var innerHot = ht.htEditor;\n\n      expect(innerHot.getSelected()).toEqual([0, 0, 0, 0]);\n    });\n\n    it('should hide textarea', () => {\n      var hot = handsontable({\n        columns: [\n          {\n            type: 'handsontable',\n            handsontable: {\n              colHeaders: ['Marque', 'Country', 'Parent company'],\n              data: getManufacturerData()\n            },\n            strict: true\n          }\n        ]\n      });\n      selectCell(2, 0);\n\n      keyDownUp('enter');\n\n      expect(hot.getActiveEditor().TEXTAREA.style.visibility).toEqual('hidden');\n\n    });\n  });\n\n  describe('non strict mode', () => {\n\n    it('should open editor and DO NOT select any cell in inner HOT', () => {\n      var hot = handsontable({\n        columns: [\n          {\n            type: 'handsontable',\n            handsontable: {\n              colHeaders: ['Marque', 'Country', 'Parent company'],\n              data: getManufacturerData()\n            }\n          }\n        ]\n      });\n      selectCell(2, 0);\n\n      keyDownUp('enter');\n\n      var ht = hot.getActiveEditor();\n      var innerHot = ht.htEditor;\n\n      expect(innerHot.getSelected()).toBeUndefined();\n    });\n\n    it('should show textarea', () => {\n      var hot = handsontable({\n        columns: [\n          {\n            type: 'handsontable',\n            handsontable: {\n              colHeaders: ['Marque', 'Country', 'Parent company'],\n              data: getManufacturerData()\n            }\n          }\n        ]\n      });\n      selectCell(2, 0);\n\n      keyDownUp('enter');\n      expect(hot.getActiveEditor().TEXTAREA.style.visibility).toEqual('visible');\n\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/handsontableEditor.spec.js","describe('editors', () => {\n  const id = 'testContainer';\n  const {\n    registerEditor,\n    getEditor,\n  } = Handsontable.editors;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should register custom editor', () => {\n    class MyEditor extends Handsontable.editors.BaseEditor {\n      init() {\n        this.TEXTAREA = document.createElement('TEXTAREA');\n        this.TEXTAREA_PARENT = document.createElement('DIV');\n\n        this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);\n        this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);\n      }\n      getValue() {\n        return `--${this.TEXTAREA.value}--`;\n      }\n      setValue(value) {\n        this.TEXTAREA.value = value;\n      }\n      open() {}\n      close() {}\n      focus() {\n        this.TEXTAREA.focus();\n      }\n    }\n    registerEditor('myEditor', MyEditor);\n\n    const hot = handsontable({\n      data: [\n        [1, 6, 10],\n      ],\n      columns: [{\n        editor: 'myEditor',\n      }],\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n    document.activeElement.value = 'hello';\n    destroyEditor();\n\n    expect(getDataAtCell(0, 0)).toBe('--hello--');\n  });\n\n  it('should retrieve predefined editors by its names', () => {\n    expect(getEditor('autocomplete')).toBeFunction();\n    expect(getEditor('base')).toBeFunction();\n    expect(getEditor('checkbox')).toBeFunction();\n    expect(getEditor('date')).toBeFunction();\n    expect(getEditor('dropdown')).toBeFunction();\n    expect(getEditor('handsontable')).toBeFunction();\n    expect(getEditor('mobile')).toBeFunction();\n    expect(getEditor('numeric')).toBeFunction();\n    expect(getEditor('password')).toBeFunction();\n    expect(getEditor('select')).toBeFunction();\n    expect(getEditor('text')).toBeFunction();\n  });\n\n  it('should retrieve custom editor by its names', () => {\n    class MyEditor {}\n    registerEditor('myEditor', MyEditor);\n\n    expect(getEditor('myEditor')).toBe(MyEditor);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/index.spec.js","describe('noEditor', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: auto\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('shouldn\\'t begin editing when enterBeginsEditing equals true', () => {\n    var\n      selection;\n\n    handsontable({\n      enterBeginsEditing: true,\n      editor: false\n    });\n    selectCell(2, 2);\n    keyDown('enter');\n    selection = getSelected();\n\n    expect(selection).toEqual([2, 2, 2, 2]);\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('shouldn\\'t move down after editing', () => {\n    var\n      selection;\n\n    handsontable({\n      editor: false\n    });\n    selectCell(2, 2);\n    keyDown('enter');\n    keyDown('enter');\n    selection = getSelected();\n\n    expect(selection).toEqual([2, 2, 2, 2]);\n  });\n\n  it('shouldn\\'t move down when enterBeginsEditing equals false', () => {\n    var\n      selection;\n\n    handsontable({\n      enterBeginsEditing: false,\n      editor: false\n    });\n    selectCell(2, 2);\n    keyDown('enter');\n    selection = getSelected();\n\n    expect(selection).toEqual([3, 2, 3, 2]);\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('shouldn\\'t render any value in editor', () => {\n    handsontable({\n      editor: false\n    });\n    setDataAtCell(2, 2, 'string');\n    selectCell(2, 2);\n    keyDown('enter');\n\n    expect(keyProxy().length).toEqual(0);\n  });\n\n  it('shouldn\\'t open editor after hitting F2', () => {\n    handsontable({\n      editor: false\n    });\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n\n    keyDown('f2');\n\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('shouldn\\'t open editor after hitting CapsLock', () => {\n    handsontable({\n      editor: false\n    });\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n\n    keyDown(Handsontable.helper.KEY_CODES.CAPS_LOCK);\n\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('shouldn\\'t open editor after double clicking on a cell', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2),\n      editor: false\n    });\n\n    const cell = $(getCell(0, 0));\n    let clicks = 0;\n    window.scrollTo(0, cell.offset().top);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks++;\n    }, 0);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks++;\n    }, 100);\n\n    setTimeout(() => {\n      expect(clicks).toBe(2);\n      expect(hot.getActiveEditor()).toBe(undefined);\n      expect(isEditorVisible()).toBe(false);\n      done();\n    }, 200);\n  });\n\n  it('should not open editor after pressing a printable character', function() {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      editor: false\n    });\n    selectCell(0, 0);\n\n    expect(isEditorVisible()).toBe(false);\n\n    this.$container.simulate('keydown', {keyCode: 'a'.charCodeAt(0)});\n\n    expect(isEditorVisible()).toBe(false);\n  });\n\n  it('should not open editor after pressing a printable character with shift key', function() {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3),\n      editor: false\n    });\n    selectCell(0, 0);\n\n    expect(isEditorVisible()).toBe(false);\n\n    this.$container.simulate('keydown', {keyCode: 'a'.charCodeAt(0), shiftKey: true});\n\n    expect(isEditorVisible()).toBe(false);\n  });\n\n  it('should not not open editor after hitting ALT', () => {\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4),\n      editor: false\n    });\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n\n    selectCell(0, 0);\n    keyDown(Handsontable.helper.KEY_CODES.ALT);\n\n    expect(isEditorVisible()).toBe(false);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/noEditor.spec.js","describe('NumericEditor', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfObjects = function() {\n    return [\n      {id: 1, name: 'Ted', lastName: 'Right'},\n      {id: 2, name: 'Frank', lastName: 'Honest'},\n      {id: 3, name: 'Joan', lastName: 'Well'},\n      {id: 4, name: 'Sid', lastName: 'Strong'},\n      {id: 5, name: 'Jane', lastName: 'Neat'},\n      {id: 6, name: 'Chuck', lastName: 'Jackson'},\n      {id: 7, name: 'Meg', lastName: 'Jansen'},\n      {id: 8, name: 'Rob', lastName: 'Norris'},\n      {id: 9, name: 'Sean', lastName: 'O\\'Hara'},\n      {id: 10, name: 'Eve', lastName: 'Branson'}\n    ];\n  };\n\n  it('should convert numeric value to number (object data source)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n    document.activeElement.value = '999';\n\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(typeof getDataAtCell(2, 0)).toEqual('number');\n      expect(getDataAtCell(2, 0)).toEqual(999);\n      done();\n    }, 100);\n  });\n\n  it('should apply changes to editor after validation', (done) => {\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('delete');\n\n    setTimeout(() => {\n      expect(getActiveEditor().originalValue).toEqual('');\n      done();\n    }, 100);\n  });\n\n  it('should allow custom validator', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      allowInvalid: false,\n      columns: [\n        {\n          data: 'id',\n          type: 'numeric',\n          validator(val, cb) {\n            cb(parseInt(val, 10) > 100);\n          }\n        },\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n    document.activeElement.value = '99';\n\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(getDataAtCell(2, 0)).not.toEqual(99); // should be ignored\n\n      document.activeElement.value = '999';\n\n      onAfterValidate.calls.reset();\n      destroyEditor();\n    }, 100);\n\n    setTimeout(() => {\n      expect(getDataAtCell(2, 0)).toEqual(999);\n      done();\n    }, 200);\n  });\n\n  it('should convert string in format \\'XX.XX\\' to a float with the same value', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '99.99';\n\n    onAfterValidate.calls.reset();\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(getDataAtCell(2, 0)).toEqual(parseFloat(99.99));\n      done();\n    }, 100);\n  });\n\n  it('should convert string in format \\'XX.XX\\' to a float when passing float without leading zero', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '.74';\n\n    onAfterValidate.calls.reset();\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(getDataAtCell(2, 0)).toEqual(parseFloat(0.74));\n      done();\n    }, 100);\n  });\n\n  it('should convert string in format \\'XX,XX\\' (with comma as separator) to a float with the same value if the numeric locale ' +\n     'specifies comma as the precision delimiter (language=de)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric', language: 'de-DE'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '99,99';\n\n    onAfterValidate.calls.reset();\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(getDataAtCell(2, 0)).toEqual(parseFloat(99.99));\n      done();\n    }, 100);\n  });\n\n  it('should display a string in a format \\'$X,XXX.XX\\' when using language=en, appropriate format in column settings and \\'XXXX.XX\\' as ' +\n     'an input string', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric', format: '$0,0.00', language: 'en-US'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '2456.22';\n\n    onAfterValidate.calls.reset();\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(getCell(2, 0).innerHTML).toEqual('$2,456.22');\n      done();\n    }, 100);\n  });\n\n  it('should display a string in a format \\'X.XXX,XX €\\' when using language=de, appropriate format in column settings and \\'XXXX,XX\\' as an ' +\n     'input string (that comes from manual input)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric', format: '0,0.00 $', language: 'de-DE'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '2456,22';\n\n    onAfterValidate.calls.reset();\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');\n      done();\n    }, 100);\n  });\n\n  it('should display a string in a format \\'X.XXX,XX €\\' when using language=de, appropriate format in column settings and \\'XXXX.XX\\' as an ' +\n     'input string (that comes from paste)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric', format: '0,0.00 $', language: 'de-DE'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '2456.22';\n\n    onAfterValidate.calls.reset();\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');\n      done();\n    }, 100);\n  });\n\n  it('should not validate input values in different formats than \\'XX.XX\\' and \\'XX,XX\\'', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(2, 0);\n\n    function manuallySetValueTo(val) {\n      keyDown('enter');\n\n      document.activeElement.value = val;\n\n      onAfterValidate.calls.reset();\n      destroyEditor();\n    }\n\n    manuallySetValueTo('22.22');\n\n    setTimeout(() => {\n      expect($(getCell(2, 0)).hasClass('htInvalid')).toBe(false); // should validate alright\n      manuallySetValueTo('2,000,000.22');\n    }, 100);\n\n    setTimeout(() => {\n      expect($(getCell(2, 0)).hasClass('htInvalid')).toBe(true);\n      manuallySetValueTo('11,11');\n    }, 200);\n\n    setTimeout(() => {\n      expect($(getCell(2, 0)).hasClass('htInvalid')).toBe(false); // should validate alright\n      manuallySetValueTo('one thounsand');\n    }, 300);\n\n    setTimeout(() => {\n      expect($(getCell(2, 0)).hasClass('htInvalid')).toBe(true);\n      manuallySetValueTo('99d99');\n    }, 400);\n\n    setTimeout(() => {\n      expect($(getCell(2, 0)).hasClass('htInvalid')).toBe(true);\n      done();\n    }, 500);\n  });\n\n  it('should paste formatted data if source cell has format', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric', format: '0,0.00 $', language: 'de-DE'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n    selectCell(2, 0);\n\n    keyDown('enter');\n\n    document.activeElement.value = '€123,00';\n\n    onAfterValidate.calls.reset();\n    destroyEditor();\n\n    setTimeout(() => {\n      expect(getCell(2, 0).innerHTML).toEqual('123,00 €');\n      done();\n    }, 100);\n  });\n\n  it('should display a string in a format \\'X XXX,XX €\\' when using language=de, appropriate format in column settings and \\'XXXX,XX\\' as an ' +\n     'input string and ignore not needed zeros at the end', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: [\n        {id: 1, name: 'Ted', lastName: 'Right', money: 0},\n        {id: 2, name: 'Frank', lastName: 'Honest', money: 0},\n        {id: 3, name: 'Joan', lastName: 'Well', money: 0},\n        {id: 4, name: 'Sid', lastName: 'Strong', money: 0},\n        {id: 5, name: 'Jane', lastName: 'Neat', money: 0},\n        {id: 6, name: 'Chuck', lastName: 'Jackson', money: 0},\n        {id: 7, name: 'Meg', lastName: 'Jansen', money: 0},\n        {id: 8, name: 'Rob', lastName: 'Norris', money: 0},\n        {id: 9, name: 'Sean', lastName: 'O\\'Hara', money: 0},\n        {id: 10, name: 'Eve', lastName: 'Branson', money: 0}\n      ],\n      columns: [\n        {data: 'id', type: 'numeric', format: '0,0.00 $', language: 'de-DE'},\n        {data: 'name'},\n        {data: 'lastName'},\n        {data: 'money', type: 'numeric', format: '$0,0.00', language: 'en-US'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    selectCell(2, 0);\n\n    function manuallySetValueTo(val) {\n      keyDown('enter');\n\n      document.activeElement.value = val;\n\n      onAfterValidate.calls.reset();\n      destroyEditor();\n    }\n\n    manuallySetValueTo('2456,220');\n\n    setTimeout(() => {\n      expect(getCell(2, 0).innerHTML).toEqual('2.456,22 €');\n\n      deselectCell();\n      selectCell(2, 3);\n      manuallySetValueTo('2456.220');\n    }, 100);\n\n    setTimeout(() => {\n      expect(getCell(2, 3).innerHTML).toEqual('$2,456.22');\n      done();\n    }, 200);\n  });\n\n  it('should mark text as invalid without removing', (done) => {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric', format: '0,0.00'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n    });\n\n    hot.setDataAtCell(0, 0, 'abc');\n\n    setTimeout(() => {\n      expect(hot.getDataAtCell(0, 0)).toEqual('abc');\n      done();\n    }, 200);\n  });\n\n  it('should not throw error on closing editor when column data is defined as \\'length\\'', () => {\n    hot = handsontable({\n      data: [\n        {length: 4},\n        {length: 5},\n      ],\n      columns: [\n        {\n          data: 'length', type: 'numeric'\n        },\n        {},\n        {}\n      ]\n    });\n\n    selectCell(1, 0);\n    keyDown('enter');\n    document.activeElement.value = '999';\n\n    expect(() => {\n      destroyEditor();\n    }).not.toThrow();\n  });\n\n  describe('Cell corner is showed properly when changing focused cells #3877', () => {\n    var isFocusedCellDisplayingCornerTest = function(settings) {\n      var moveFromRow = settings.moveFromRow;\n      var moveFromCol = settings.moveFromCol;\n      var moveToRow = settings.moveToRow;\n      var moveToCol = settings.moveToCol;\n      var doneFunc = settings.doneFunc;\n      var $corner = settings.$container.find('.wtBorder.current.corner');\n\n      selectCell(moveFromRow, moveFromCol);\n      keyDown('enter');\n      selectCell(moveToRow, moveToCol);\n\n      setTimeout(() => {\n        expect($corner.css('display')).toEqual('block');\n        doneFunc();\n      }, 100);\n    };\n\n    it('Moving from numeric editor to text editor', function(done) {\n      handsontable({\n        data: [\n          {id: 1, name: 'Ted', lastName: 'Right', money: 0}\n        ],\n        columns: [\n          {data: 'id'},\n          {data: 'name'},\n          {data: 'lastName'},\n          {data: 'money', type: 'numeric', format: '$0,0.00', language: 'en-US'}\n        ]\n      });\n\n      isFocusedCellDisplayingCornerTest({\n        moveFromRow: 0,\n        moveFromCol: 3,\n        moveToRow: 0,\n        moveToCol: 0,\n        $container: this.$container,\n        doneFunc: done\n      });\n    });\n\n    it('Moving from text editor to numeric editor', function(done) {\n      handsontable({\n        data: [\n          {id: 1, name: 'Ted', lastName: 'Right', money: 0}\n        ],\n        columns: [\n          {data: 'id'},\n          {data: 'name'},\n          {data: 'lastName'},\n          {data: 'money', type: 'numeric', format: '$0,0.00', language: 'en-US'}\n        ]\n      });\n\n      isFocusedCellDisplayingCornerTest({\n        moveFromRow: 0,\n        moveFromCol: 1,\n        moveToRow: 0,\n        moveToCol: 3,\n        $container: this.$container,\n        doneFunc: done\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/numericEditor.spec.js","describe('PasswordEditor', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 300px;\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should display editor as password field', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          editor: Handsontable.editors.PasswordEditor\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    var editor = $('.handsontableInput');\n\n    expect(editor.is(':visible')).toBe(true);\n    expect(editor.is(':password')).toBe(true);\n\n  });\n\n  it('should set passwordEditor using \\'password\\' alias', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          editor: 'password'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    var editor = $('.handsontableInput');\n\n    expect(editor.is(':visible')).toBe(true);\n    expect(editor.is(':password')).toBe(true);\n\n  });\n\n  it('should set passwordEditor using column type \\'password\\' ', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          type: 'password'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('enter');\n\n    var editorHolder = $('.handsontableInputHolder');\n    var editor = editorHolder.find('.handsontableInput');\n\n    expect(editorHolder.is(':visible')).toBe(true);\n    expect(editor.is(':password')).toBe(true);\n\n  });\n\n  it('should save values typed in passwordEditor', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          editor: 'password'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    expect(getDataAtCell(0, 0)).toMatch('Joe');\n    expect(getRenderedValue(0, 0)).toMatch('Joe');\n\n    keyDown('enter');\n\n    var editorHolder = $('.handsontableInputHolder');\n    var editor = editorHolder.find('.handsontableInput');\n\n    expect(editorHolder.is(':visible')).toBe(true);\n\n    editor.val('Edgar');\n\n    selectCell(1, 0); // closes editor and saves current value\n\n    expect(editorHolder.is(':visible')).toBe(false);\n\n    expect(getDataAtCell(0, 0)).toMatch('Edgar');\n    expect(getRenderedValue(0, 0)).toMatch('Edgar');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/passwordEditor.spec.js","describe('SelectEditor', () => {\n\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should display select', () => {\n    handsontable({\n      columns: [\n        {\n          editor: 'select'\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = $('.htSelectEditor');\n\n    expect(editor.length).toEqual(1);\n    expect(editor.is('select')).toBe(true);\n    expect(editor.is(':visible')).toBe(false);\n\n    keyDown('enter');\n\n    expect(editor.is(':visible')).toBe(true);\n    expect(editor.offset()).toEqual($(getCell(0, 0)).offset());\n  });\n\n  it('should display and correctly reposition select editor while scrolling', (done) => {\n    var hot = handsontable({\n      width: 200,\n      height: 200,\n      data: Handsontable.helper.createSpreadsheetData(100, 100),\n      columns: [\n        {\n          editor: 'select'\n        }, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {editor: 'select'}\n      ]\n    });\n    var mainHolder = hot.view.wt.wtTable.holder;\n\n    selectCell(0, 0);\n    keyDown('enter');\n    keyUp('enter');\n\n    mainHolder.scrollTop = 10;\n    mainHolder.scrollLeft = 20;\n    var editor = $('.htSelectEditor');\n\n    setTimeout(() => {\n      expect(editor.css('top')).toEqual('-10px');\n      expect(editor.css('left')).toEqual('-20px');\n      done();\n    }, 200);\n  });\n\n  it('should populate select with given options (array)', () => {\n    var options = [\n      'Misubishi', 'Chevrolet', 'Lamborgini'\n    ];\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    var $options = editor.find('option');\n\n    expect($options.length).toEqual(options.length);\n    expect($options.eq(0).val()).toMatch(options[0]);\n    expect($options.eq(0).html()).toMatch(options[0]);\n    expect($options.eq(1).val()).toMatch(options[1]);\n    expect($options.eq(1).html()).toMatch(options[1]);\n    expect($options.eq(2).val()).toMatch(options[2]);\n    expect($options.eq(2).html()).toMatch(options[2]);\n  });\n\n  it('should populate select with given options (object)', () => {\n    var options = {\n      mit: 'Misubishi',\n      che: 'Chevrolet',\n      lam: 'Lamborgini'\n    };\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    var $options = editor.find('option');\n\n    expect($options.eq(0).val()).toMatch('mit');\n    expect($options.eq(0).html()).toMatch(options.mit);\n    expect($options.eq(1).val()).toMatch('che');\n    expect($options.eq(1).html()).toMatch(options.che);\n    expect($options.eq(2).val()).toMatch('lam');\n    expect($options.eq(2).html()).toMatch(options.lam);\n  });\n\n  it('should populate select with given options (function:array)', () => {\n    var options = function() {\n      return [\n        'Misubishi', 'Chevrolet', 'Lamborgini'\n      ];\n    };\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    var $options = editor.find('option');\n\n    expect($options.length).toEqual(options().length);\n    expect($options.eq(0).val()).toMatch(options()[0]);\n    expect($options.eq(0).html()).toMatch(options()[0]);\n    expect($options.eq(1).val()).toMatch(options()[1]);\n    expect($options.eq(1).html()).toMatch(options()[1]);\n    expect($options.eq(2).val()).toMatch(options()[2]);\n    expect($options.eq(2).html()).toMatch(options()[2]);\n  });\n\n  it('should populate select with given options (function:object)', () => {\n    var options = function() {\n      return {\n        mit: 'Misubishi',\n        che: 'Chevrolet',\n        lam: 'Lamborgini'\n      };\n    };\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    var $options = editor.find('option');\n\n    expect($options.eq(0).val()).toMatch('mit');\n    expect($options.eq(0).html()).toMatch(options().mit);\n    expect($options.eq(1).val()).toMatch('che');\n    expect($options.eq(1).html()).toMatch(options().che);\n    expect($options.eq(2).val()).toMatch('lam');\n    expect($options.eq(2).html()).toMatch(options().lam);\n  });\n\n  it('should mark option matching cell value as selected', () => {\n    var options = [\n      'Misubishi', 'Chevrolet', 'Lamborgini'\n    ];\n\n    handsontable({\n      data: [\n        ['Misubishi'],\n        ['Lamborgini'],\n        ['Chevrolet']\n      ],\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = $('.htSelectEditor');\n\n    keyDown('enter');\n\n    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(0, 0));\n\n    keyDown('enter');\n\n    selectCell(1, 0);\n    keyDown('enter');\n\n    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(1, 0));\n\n    keyDown('enter');\n\n    selectCell(2, 0);\n    keyDown('enter');\n\n    expect(editor.find('option:selected').text()).toEqual(getDataAtCell(2, 0));\n\n    keyDown('enter');\n  });\n\n  it('should not prevent the default event action when select is clicked', () => {\n\n    var options = function() {\n      return [\n        'Misubishi', 'Chevrolet', 'Lamborgini'\n      ];\n    };\n\n    handsontable({\n      columns: [\n        {\n          editor: 'select',\n          selectOptions: options\n        }\n      ]\n    });\n\n    selectCell(0, 0);\n\n    var editor = $('.htSelectEditor');\n\n    keyDown('enter');\n    var select = editor.find('select');\n\n    var selectMouseDownListener = jasmine.createSpy('selectMouseDownListener');\n    $('body').on('mousedown', selectMouseDownListener);\n\n    editor.mousedown();\n\n    expect(selectMouseDownListener.calls.count()).toEqual(1);\n\n    var event = selectMouseDownListener.calls.argsFor(0)[0];\n\n    expect(event).toBeDefined();\n    expect(event.isDefaultPrevented()).toBe(false);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/selectEditor.spec.js","describe('TextEditor', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px; overflow: hidden;\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should begin editing when enterBeginsEditing equals true', () => {\n    handsontable({\n      enterBeginsEditing: true,\n      editor: 'text'\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    var selection = getSelected();\n    expect(selection).toEqual([2, 2, 2, 2]);\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should move down after editing', () => {\n    handsontable({\n      editor: 'text'\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyDown('enter');\n\n    var selection = getSelected();\n    expect(selection).toEqual([3, 2, 3, 2]);\n  });\n\n  it('should move down when enterBeginsEditing equals false', () => {\n    handsontable({\n      enterBeginsEditing: false\n    });\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    var selection = getSelected();\n    expect(selection).toEqual([3, 2, 3, 2]);\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('should render string in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, 'string');\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('string');\n  });\n\n  it('should render textarea editor in specified size at cell 0, 0 without headers', (done) => {\n    var hot = handsontable();\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      expect(hot.getActiveEditor().TEXTAREA.style.width).toBe('40px');\n      done();\n    }, 200);\n  });\n\n  it('should render textarea editor in specified size at cell 1, 0 without headers', (done) => {\n    var hot = handsontable();\n\n    selectCell(1, 1);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      done();\n    }, 200);\n  });\n\n  it('should render textarea editor in specified size at cell 0, 0 with headers', (done) => {\n    const hot = handsontable({\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      expect(hot.getActiveEditor().TEXTAREA.style.width).toBe('40px');\n      expect(hot.getActiveEditor().textareaParentStyle.top).toBe('26px');\n      done();\n    }, 200);\n  });\n\n  it('should render textarea editor in specified size at cell 0, 0 with headers defined in columns', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetObjectData(10, 10),\n      columns: [{\n        data: 'prop0',\n        title: 'Prop 0'\n      }, {\n        data: 'prop1',\n        title: 'Prop 1'\n      }, {\n        data: 'prop2',\n        title: 'Prop 2'\n      }, {\n        data: 'prop3',\n        title: 'Prop 3'\n      }],\n    });\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      expect(parseInt(hot.getActiveEditor().TEXTAREA.style.width, 10)).toBeAroundValue(50, 4);\n      expect(hot.getActiveEditor().textareaParentStyle.top).toBe('26px');\n      done();\n    }, 200);\n  });\n\n  it('should hide whole editor when it is higher then header', (done) => {\n    const hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    setDataAtCell(2, 2, 'string\\nstring\\nstring');\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyUp('enter');\n\n    var mainHolder = hot.view.wt.wtTable.holder;\n\n    mainHolder.scrollTop = 150;\n    mainHolder.scrollLeft = 150;\n\n    setTimeout(() => {\n      expect(parseInt(hot.getActiveEditor().textareaParentStyle.top, 10)).toBeAroundValue(-77);\n      expect(parseInt(hot.getActiveEditor().textareaParentStyle.left, 10)).toBeAroundValue(-1);\n      done();\n    }, 200);\n  });\n\n  it('should hide editor when quick navigation by click scrollbar was triggered', (done) => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      rowHeaders: true,\n      colHeaders: true\n    });\n\n    setDataAtCell(2, 2, 'string\\nstring\\nstring');\n    selectCell(2, 2);\n\n    keyDown('enter');\n    keyUp('enter');\n    hot.scrollViewportTo(49);\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().textareaParentStyle.display).toBe('none');\n      done();\n    }, 100);\n  });\n\n  it('should render textarea editor in specified height (single line)', (done) => {\n    var hot = handsontable(),\n      editorHeight;\n\n    setDataAtCell(2, 2, 'first line');\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('23px');\n      done();\n    }, 200);\n  });\n\n  it('should render textarea editor in specified height (multi line)', (done) => {\n    var hot = handsontable(),\n      editorHeight;\n\n    setDataAtCell(2, 2, 'first line\\n second line\\n third line...');\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    setTimeout(() => {\n      expect(hot.getActiveEditor().TEXTAREA.style.height).toBe('64px');\n      done();\n    }, 200);\n  });\n\n  it('should render number in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, 13);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('13');\n  });\n\n  it('should render boolean true in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, true);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('true');\n  });\n\n  it('should render boolean false in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, false);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('false');\n  });\n\n  it('should render null in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, null);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('');\n  });\n\n  it('should render undefined in textarea', () => {\n    handsontable();\n    setDataAtCell(2, 2, void 0);\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('');\n  });\n\n  it('should render nested object value in textarea', () => {\n    handsontable({\n      data: [{\n        name: {\n          first: 'Tom',\n          last: 'Kowalski',\n          obj: {}\n        }\n      }, {\n        name: {\n          first: 'John',\n          last: 'Cage',\n          obj: {\n            foo: 'bar'\n          }\n        }\n      }],\n      columns: [{\n        data: 'name.last'\n      }, {\n        data: 'name.obj.foo'\n      }]\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('Kowalski');\n\n    selectCell(1, 1);\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('bar');\n  });\n\n  it('should render nested object value in textarea after change rows order', () => {\n    var hot = handsontable({\n      data: [{\n        name: {\n          first: 'Tom',\n          last: 'Kowalski',\n          obj: {}\n        }\n      }, {\n        name: {\n          first: 'John',\n          last: 'Cage',\n          obj: {\n            foo: 'bar'\n          }\n        }\n      }],\n      columns: [{\n        data: 'name.last'\n      }, {\n        data: 'name.obj.foo'\n      }],\n      manualRowMove: true\n    });\n\n    hot.getPlugin('manualRowMove').moveRow(1, 0);\n    hot.render();\n\n    selectCell(0, 0);\n    keyDown('enter');\n    expect(keyProxy().val()).toEqual('Cage');\n    keyDown('enter');\n\n    expect(hot.getDataAtCell(0, 0)).toEqual('Cage');\n\n    selectCell(1, 1);\n    keyDown('enter');\n    expect(keyProxy().val()).toEqual('');\n    keyDown('enter');\n\n    expect(hot.getDataAtCell(1, 1)).toEqual('');\n  });\n\n  it('should render nested object value in textarea after change columns order', () => {\n    var hot = handsontable({\n      data: [{\n        name: {\n          first: 'Tom',\n          last: 'Kowalski',\n          obj: {}\n        }\n      }, {\n        name: {\n          first: 'John',\n          last: 'Cage',\n          obj: {\n            foo: 'bar'\n          }\n        }\n      }],\n      columns: [{\n        data: 'name.last'\n      }, {\n        data: 'name.obj.foo'\n      }],\n      manualColumnMove: true\n    });\n\n    hot.getPlugin('manualColumnMove').moveColumn(1, 0);\n    hot.render();\n\n    selectCell(0, 0);\n    keyDown('enter');\n    expect(keyProxy().val()).toEqual('');\n    keyDown('enter');\n\n    expect(hot.getDataAtCell(0, 0)).toEqual('');\n\n    selectCell(1, 1);\n    keyDown('enter');\n    expect(keyProxy().val()).toEqual('Cage');\n    keyDown('enter');\n\n    expect(hot.getDataAtCell(1, 1)).toEqual('Cage');\n  });\n\n  it('should render array value defined by columns settings in textarea', () => {\n    handsontable({\n      data: [\n        ['', 'Kia'],\n        ['2012', 10],\n        ['2013', 10],\n      ],\n      columns: [{\n        data: '1'\n      }, {\n        data: '0'\n      }],\n    });\n    selectCell(0, 0);\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('Kia');\n\n    selectCell(1, 1);\n    keyDown('enter');\n\n    expect(keyProxy().val()).toEqual('2012');\n  });\n\n  it('should open editor after hitting F2', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    var editor = $('.handsontableInput');\n    expect(isEditorVisible()).toEqual(false);\n    keyDown('f2');\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should close editor after hitting ESC', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    var editor = $('.handsontableInput');\n    expect(isEditorVisible()).toEqual(false);\n    keyDown('f2');\n    expect(isEditorVisible()).toEqual(true);\n    keyDown('esc');\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('should NOT open editor after hitting CapsLock', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    var editor = $('.handsontableInput');\n    expect(isEditorVisible()).toEqual(false);\n    keyDown(Handsontable.helper.KEY_CODES.CAPS_LOCK);\n    expect(isEditorVisible()).toEqual(false);\n  });\n\n  it('should open editor after cancelling edit and beginning it again', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    expect(isEditorVisible()).toEqual(false);\n    keyDown('f2');\n    expect(isEditorVisible()).toEqual(true);\n    keyDown('esc');\n    expect(isEditorVisible()).toEqual(false);\n    keyDown('f2');\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('loadData should not destroy editor', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    keyDown('f2');\n    loadData(getData());\n\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('updateSettings should not destroy editor', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    keyDown('f2');\n    updateSettings({\n      data: getData()\n    });\n\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('textarea should have cell dimensions (after render)', () => {\n    var data = [\n      ['a', 'b'],\n      ['c', 'd']\n    ];\n\n    var hot = handsontable({\n      data,\n      minRows: 4,\n      minCols: 4,\n      minSpareRows: 4,\n      minSpareCols: 4,\n      enterMoves: false\n    });\n\n    selectCell(1, 1);\n    var $td = getHtCore().find('tbody tr:eq(1) td:eq(1)');\n    var editor = hot.getActiveEditor();\n    keyDownUp('enter');\n    expect(keyProxy().width()).toEqual($td.width());\n    keyDownUp('enter');\n    data[1][1] = 'dddddddddddddddddddd';\n    render();\n    keyDownUp('enter');\n\n    expect(keyProxy().width()).toEqual($td.width());\n  });\n\n  it('global shortcuts (like CTRL+A) should be blocked when cell is being edited', () => {\n    handsontable();\n    selectCell(2, 2);\n\n    keyDownUp('enter');\n\n    keyDown(65, {\n      ctrlKey: true\n    }); // CTRL+A should NOT select all table when cell is edited\n\n    var selection = getSelected();\n    expect(selection).toEqual([2, 2, 2, 2]);\n    expect(isEditorVisible()).toEqual(true);\n  });\n\n  it('should open editor after double clicking on a cell', (done) => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(5, 2)\n    });\n\n    var cell = $(getCell(0, 0));\n    var clicks = 0;\n\n    window.scrollTo(0, cell.offset().top);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks++;\n    }, 0);\n\n    setTimeout(() => {\n      mouseDown(cell);\n      mouseUp(cell);\n      clicks++;\n    }, 100);\n\n    setTimeout(() => {\n      var editor = hot.getActiveEditor();\n\n      expect(clicks).toBe(2);\n      expect(editor.isOpened()).toBe(true);\n      expect(editor.isInFullEditMode()).toBe(true);\n      done();\n    }, 200);\n  });\n\n  it('should call editor focus() method after opening an editor', () => {\n    var hot = handsontable();\n    selectCell(2, 2);\n\n    var editor = hot.getActiveEditor();\n\n    spyOn(editor, 'focus');\n\n    expect(editor.isOpened()).toEqual(false);\n    expect(editor.focus).not.toHaveBeenCalled();\n    keyDown('f2');\n    expect(editor.isOpened()).toEqual(true);\n    expect(editor.focus).toHaveBeenCalled();\n  });\n\n  it('editor size should not exceed the viewport after text edit', function() {\n\n    handsontable({\n      data: Handsontable.helper.createSpreadsheetData(10, 5),\n      width: 200,\n      height: 200\n    });\n\n    selectCell(2, 2);\n\n    keyDown('enter');\n\n    expect(isEditorVisible()).toEqual(true);\n\n    document.activeElement.value = 'Very very very very very very very very very very very very very very very very very long text';\n    keyDownUp(32); // space - trigger textarea resize\n\n    var $textarea = $(document.activeElement);\n    var $wtHider = this.$container.find('.wtHider');\n\n    expect($textarea.offset().left + $textarea.outerWidth()).not.toBeGreaterThan($wtHider.offset().left + this.$container.outerWidth());\n    expect($textarea.offset().top + $textarea.outerHeight()).not.toBeGreaterThan($wtHider.offset().top + $wtHider.outerHeight());\n\n  });\n\n  it('should open editor after selecting cell in another table and hitting enter', function() {\n    this.$container2 = $(`<div id=\"${id}-2\"></div>`).appendTo('body');\n\n    var hot1 = handsontable();\n    var hot2 = handsontable2.call(this);\n\n    this.$container.find('tbody tr:eq(0) td:eq(0)').simulate('mousedown');\n    this.$container.find('tbody tr:eq(0) td:eq(0)').simulate('mouseup');\n\n    // Open editor in HOT1\n    keyDown('enter');\n    var editor = $('.handsontableInputHolder');\n    expect(editor.is(':visible')).toBe(true);\n\n    // Close editor in HOT1\n    keyDown('enter');\n    expect(editor.is(':visible')).toBe(false);\n\n    this.$container2.find('tbody tr:eq(0) td:eq(0)').simulate('mousedown');\n    this.$container2.find('tbody tr:eq(0) td:eq(0)').simulate('mouseup');\n\n    expect(hot1.getSelected()).toBeUndefined();\n    expect(hot2.getSelected()).toEqual([0, 0, 0, 0]);\n\n    // Open editor in HOT2\n    keyDown('enter');\n    editor = $('.handsontableInputHolder');\n    expect(editor.is(':visible')).toBe(true);\n\n    this.$container2.handsontable('destroy');\n    this.$container2.remove();\n\n    function handsontable2(options) {\n      var container = this.$container2;\n      container.handsontable(options);\n      container[0].focus(); // otherwise TextEditor tests do not pass in IE8\n      return container.data('handsontable');\n    }\n\n  });\n\n  it('should open editor after pressing a printable character', function() {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3)\n    });\n\n    selectCell(0, 0);\n\n    var editorHolder = $('.handsontableInputHolder');\n    //    var editorInput = editorHolder.find('.handsontableInput');\n\n    expect(editorHolder.is(':visible')).toBe(false);\n\n    //    var keyboardEvent = $.Event('keydown', {\n    //      keyCode: 'a'.charCodeAt(0)\n    //    });\n\n    //    this.$container.trigger(keyboardEvent);\n\n    this.$container.simulate('keydown', {\n      keyCode: 'a'.charCodeAt(0)\n    });\n\n    expect(editorHolder.is(':visible')).toBe(true);\n  });\n\n  it('should open editor after pressing a printable character with shift key', function() {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3)\n    });\n\n    selectCell(0, 0);\n\n    var editorHolder = $('.handsontableInputHolder');\n\n    expect(editorHolder.is(':visible')).toBe(false);\n\n    /**\n     * To reliably mimic SHIFT+SOME_KEY combination we have to trigger two events.\n     * First we need to trigger keydown event with SHIFT keyCode (16)\n     * and then trigger a keydown event with keyCode of SOME_KEY and shiftKey property set to true\n     */\n    //    var shiftKeyboardEvent = $.Event('keydown', {\n    //      keyCode: 16, //shift\n    //      shiftKey: true\n    //    });\n    //\n    //    var keyboardEvent = $.Event('keydown', {\n    //      keyCode: 'a'.charCodeAt(0),\n    //      shiftKey: true\n    //    });\n\n    this.$container.simulate('keydown', {\n      keyCode: 'a'.charCodeAt(0),\n      shiftKey: true\n    });\n\n    //    this.$container.trigger(shiftKeyboardEvent);\n    //    this.$container.trigger(keyboardEvent);\n\n    expect(editorHolder.is(':visible')).toBe(true);\n  });\n\n  it('should be able to open editor after clearing cell data with DELETE', function() {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3)\n    });\n\n    selectCell(0, 0);\n\n    var editorHolder = $('.handsontableInputHolder');\n\n    expect(editorHolder.is(':visible')).toBe(false);\n\n    this.$container.simulate('keydown', {\n      keyCode: 46\n    });\n\n    this.$container.simulate('keydown', {\n      keyCode: 'a'.charCodeAt(0)\n    });\n    expect(editorHolder.is(':visible')).toBe(true);\n  });\n\n  it('should be able to open editor after clearing cell data with BACKSPACE', function() {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 3)\n    });\n\n    selectCell(0, 0);\n\n    var editorHolder = $('.handsontableInputHolder');\n\n    expect(editorHolder.is(':visible')).toBe(false);\n\n    this.$container.simulate('keydown', {\n      keyCode: 8 // backspace\n    });\n\n    this.$container.simulate('keydown', {\n      keyCode: 'a'.charCodeAt(0)\n    });\n\n    expect(editorHolder.is(':visible')).toBe(true);\n  });\n\n  it('should scroll editor to a cell, if trying to edit cell that is outside of the viewport', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(20, 20),\n      width: 100,\n      height: 50\n    });\n\n    selectCell(0, 0);\n\n    expect(getCell(0, 0)).not.toBeNull();\n    expect(getCell(19, 19)).toBeNull();\n\n    hot.view.scrollViewport({row: 19, col: 19});\n    hot.render();\n\n    expect(getCell(0, 0)).toBeNull();\n    expect(getCell(19, 19)).not.toBeNull();\n\n    keyDown('enter');\n\n    expect(getCell(0, 0)).not.toBeNull();\n    expect(getCell(19, 19)).toBeNull();\n  });\n\n  it('should open empty editor after clearing cell value width BACKSPACE', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4)\n    });\n\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n\n    selectCell(0, 0);\n\n    keyDown(Handsontable.helper.KEY_CODES.BACKSPACE);\n\n    expect(getDataAtCell(0, 0)).toEqual('');\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n    expect(hot.getActiveEditor().getValue()).toEqual('');\n  });\n\n  it('should open empty editor after clearing cell value width DELETE', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4)\n    });\n\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n\n    selectCell(0, 0);\n\n    keyDown(Handsontable.helper.KEY_CODES.DELETE);\n\n    expect(getDataAtCell(0, 0)).toEqual('');\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n    expect(hot.getActiveEditor().getValue()).toEqual('');\n  });\n\n  it('should not open editor after hitting ALT (#1239)', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(4, 4)\n    });\n\n    expect(getDataAtCell(0, 0)).toEqual('A1');\n\n    selectCell(0, 0);\n\n    keyDown(Handsontable.helper.KEY_CODES.ALT);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n  });\n\n  it('should open editor at the same coordinates as the edited cell', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(16, 8),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    var mainHolder = hot.view.wt.wtTable.holder;\n\n    // corner\n    selectCell(1, 1);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    var $inputHolder = $('.handsontableInputHolder');\n    expect($(getCell(1, 1)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(1, 1)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // top\n    selectCell(1, 4);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(1, 4)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(1, 4)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // left\n    selectCell(4, 1);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(4, 1)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(4, 1)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    // non-fixed\n    selectCell(4, 4);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect($(getCell(4, 4)).offset().left).toEqual($inputHolder.offset().left + 1);\n    expect($(getCell(4, 4)).offset().top).toEqual($inputHolder.offset().top + 1);\n\n    $(mainHolder).scrollTop(1000);\n  });\n\n  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (corner)', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(16, 8),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    var $holder = $(hot.view.wt.wtTable.holder);\n\n    $holder.scrollTop(100);\n    $holder.scrollLeft(100);\n\n    hot.render();\n\n    // corner\n    selectCell(1, 1);\n    var currentCell = hot.getCell(1, 1, true);\n    var left = $(currentCell).offset().left;\n    var top = $(currentCell).offset().top;\n\n    var $inputHolder = $('.handsontableInputHolder');\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect(left).toEqual($inputHolder.offset().left + 1);\n    expect(top).toEqual($inputHolder.offset().top + 1);\n  });\n\n  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (top)', (done) => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    var $holder = $(hot.view.wt.wtTable.holder);\n\n    $holder[0].scrollTop = 500;\n\n    setTimeout(() => {\n      $holder[0].scrollLeft = 500;\n    }, 100);\n\n    setTimeout(() => {\n      // top\n      selectCell(1, 6);\n    }, 200);\n\n    setTimeout(() => {\n      var currentCell = hot.getCell(1, 6, true);\n      var left = $(currentCell).offset().left;\n      var top = $(currentCell).offset().top;\n\n      var $inputHolder = $('.handsontableInputHolder');\n      keyDown(Handsontable.helper.KEY_CODES.ENTER);\n      expect(left).toEqual($inputHolder.offset().left + 1);\n      expect(top).toEqual($inputHolder.offset().top + 1);\n      done();\n    }, 300);\n  });\n\n  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (left)', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    var $holder = $(hot.view.wt.wtTable.holder);\n\n    $holder.scrollTop(500);\n    $holder.scrollLeft(500);\n\n    hot.render();\n\n    // left\n    selectCell(6, 1);\n    var currentCell = hot.getCell(6, 1, true);\n    var left = $(currentCell).offset().left;\n    var top = $(currentCell).offset().top;\n\n    var $inputHolder = $('.handsontableInputHolder');\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect(left).toEqual($inputHolder.offset().left + 1);\n    expect(top).toEqual($inputHolder.offset().top + 1);\n  });\n\n  it('should open editor at the same coordinates as the edited cell after the table had been scrolled (non-fixed)', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(50, 50),\n      fixedColumnsLeft: 2,\n      fixedRowsTop: 2\n    });\n\n    var $holder = $(hot.view.wt.wtTable.holder);\n\n    $holder.scrollTop(500);\n    $holder.scrollLeft(500);\n\n    hot.render();\n\n    // non-fixed\n    selectCell(7, 7);\n    var currentCell = hot.getCell(7, 7, true);\n    var left = $(currentCell).offset().left;\n    var top = $(currentCell).offset().top;\n\n    var $inputHolder = $('.handsontableInputHolder');\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    expect(left).toEqual($inputHolder.offset().left + 1);\n    expect(top).toEqual($inputHolder.offset().top + 1);\n  });\n\n  it('should display editor with the proper size, when the edited column is beyond the tables container', function() {\n    this.$container.css('overflow', '');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 9)\n    });\n\n    selectCell(0, 7);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(Handsontable.dom.outerWidth(hot.getActiveEditor().TEXTAREA)).toBeAroundValue(Handsontable.dom.outerWidth(hot.getCell(0, 7)));\n  });\n\n  it('should display editor with the proper size, when editing a last row after the table is scrolled to the bottom', () => {\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 8),\n      minSpareRows: 1,\n      height: 100\n    });\n\n    selectCell(0, 2);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    var regularHeight = Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA);\n\n    selectCell(3, 2);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    // lame check, needs investigating why sometimes it leaves 2px error\n    if (Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA) == regularHeight) {\n      expect(Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA)).toEqual(regularHeight);\n    } else {\n      expect(Handsontable.dom.outerHeight(hot.getActiveEditor().TEXTAREA)).toEqual(regularHeight - 2);\n    }\n\n  });\n\n  it('should render the text without trimming out the whitespace, if trimWhitespace is set to false', function() {\n    this.$container.css('overflow', '');\n    var hot = handsontable({\n      data: Handsontable.helper.createSpreadsheetData(3, 9),\n      trimWhitespace: false\n    });\n\n    selectCell(0, 2);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n    hot.getActiveEditor().TEXTAREA.value = '       test    of    whitespace      ';\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    expect(getDataAtCell(0, 2).length).toEqual(37);\n  });\n\n  it('should insert new line on caret position when pressing ALT + ENTER', () => {\n    var data = [\n      ['Maserati', 'Mazda'],\n      ['Honda', 'Mini']\n    ];\n\n    var hot = handsontable({\n      data\n    });\n\n    selectCell(0, 0);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    var $editorInput = $('.handsontableInput');\n\n    Handsontable.dom.setCaretPosition($editorInput[0], 2);\n\n    $editorInput.simulate('keydown', {\n      altKey: true,\n      keyCode: Handsontable.helper.KEY_CODES.ENTER\n    });\n\n    expect(hot.getActiveEditor().TEXTAREA.value).toEqual('Ma\\nserati');\n  });\n\n  it('should be displayed and resized properly, so it doesn\\'t exceed the viewport dimensions', () => {\n    var data = [\n      ['', '', '', '', ''],\n      ['', 'The Dude abides. I don\\'t know about you but I take comfort in that. It\\'s good knowin\\' he\\'s out there. The ' +\n           'Dude. Takin\\' \\'er easy for all us sinners. Shoosh. I sure hope he makes the finals.', '', '', ''],\n      ['', '', '', '', '']\n    ];\n\n    var hot = handsontable({\n      data,\n      colWidths: 40,\n      width: 300,\n      height: 200,\n      minSpareRows: 20,\n      minSpareCols: 20\n    });\n\n    selectCell(1, 1);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    var $editorInput = $('.handsontableInput');\n    var $editedCell = $(hot.getCell(1, 1));\n\n    expect($editorInput.outerWidth()).toEqual(hot.view.wt.wtTable.holder.clientWidth - $editedCell.position().left + 1);\n\n    hot.view.wt.scrollHorizontal(3);\n    hot.render();\n\n    expect($editorInput.width() + $editorInput.offset().left).toBeLessThan(hot.view.wt.wtTable.holder.clientWidth);\n  });\n\n  it('should resize editor to properly size after focus', (done) => {\n    var data = [\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', 'sadiasdoadoajdoasjdoij doi ajdoiasjdasoidasoid'],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n      ['', '', '', '', '', '', '', '', '', '', ''],\n    ];\n    var hot = handsontable({\n      data,\n      colWidths: 40,\n      rowHeights: 25,\n      width: 500,\n      height: 220\n    });\n\n    selectCell(4, 10);\n    keyDown(Handsontable.helper.KEY_CODES.ENTER);\n\n    var $editorInput = $('.handsontableInput');\n\n    setTimeout(() => {\n      expect([105, 119]).toEqual(jasmine.arrayContaining([$editorInput.height()]));\n      done();\n    }, 150);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/editors/textEditor.spec.js","require('babel-polyfill');\nrequire('jasmine-co').install();\n\nconst regExp = new RegExp(typeof __ENV_ARGS__ === 'object' ? __ENV_ARGS__.testPathPattern : '.*', 'i');\n\n[\n  require.context('.', true, /\\.spec\\.js$/),\n  require.context('./../../src/plugins', true, /\\.e2e\\.js$/),\n].forEach((req) => {\n  req.keys().forEach((key) => {\n    if (regExp.test(key)) {\n      req(key);\n    }\n  });\n});\n\nrequire('./MemoryLeakTest');\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/index.js","describe('Public API', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('Plugins', () => {\n    it('should expose static method for registering external plugins', () => {\n      expect(Handsontable.plugins.registerPlugin).toBeFunction();\n    });\n\n    it('should expose BasePlugin class', () => {\n      expect(Handsontable.plugins.BasePlugin).toBeFunction();\n    });\n\n    it('should expose all registered plugin classes', () => {\n      expect(Handsontable.plugins.AutoColumnSize).toBeFunction();\n      expect(Handsontable.plugins.AutoRowSize).toBeFunction();\n      expect(Handsontable.plugins.ColumnSorting).toBeFunction();\n      expect(Handsontable.plugins.Comments).toBeFunction();\n      expect(Handsontable.plugins.ContextMenu).toBeFunction();\n      expect(Handsontable.plugins.CopyPaste).toBeFunction();\n      expect(Handsontable.plugins.DragToScroll).toBeFunction();\n      expect(Handsontable.plugins.ManualColumnFreeze).toBeFunction();\n      expect(Handsontable.plugins.ManualColumnResize).toBeFunction();\n      expect(Handsontable.plugins.ManualRowResize).toBeFunction();\n      expect(Handsontable.plugins.MultipleSelectionHandles).toBeFunction();\n      expect(Handsontable.plugins.TouchScroll).toBeFunction();\n    });\n  });\n\n  describe('Editors', () => {\n    it('should expose static method for registering external editors', () => {\n      expect(Handsontable.editors.registerEditor).toBeFunction();\n    });\n\n    it('should expose static method for retrieving registered editors', () => {\n      expect(Handsontable.editors.getEditor).toBeFunction();\n    });\n\n    it('should expose BaseEditor class', () => {\n      expect(Handsontable.editors.BaseEditor).toBeFunction();\n    });\n\n    it('should expose all registered editor classes', () => {\n      expect(Handsontable.editors.AutocompleteEditor).toBeFunction();\n      expect(Handsontable.editors.CheckboxEditor).toBeFunction();\n      expect(Handsontable.editors.DateEditor).toBeFunction();\n      expect(Handsontable.editors.DropdownEditor).toBeFunction();\n      expect(Handsontable.editors.HandsontableEditor).toBeFunction();\n      expect(Handsontable.editors.MobileEditor).toBeFunction();\n      expect(Handsontable.editors.NumericEditor).toBeFunction();\n      expect(Handsontable.editors.PasswordEditor).toBeFunction();\n      expect(Handsontable.editors.SelectEditor).toBeFunction();\n      expect(Handsontable.editors.TextEditor).toBeFunction();\n    });\n  });\n\n  describe('Renderers', () => {\n    it('should expose static method for registering external renderers', () => {\n      expect(Handsontable.renderers.registerRenderer).toBeFunction();\n    });\n\n    it('should expose static method for retrieving registered renderers', () => {\n      expect(Handsontable.renderers.getRenderer).toBeFunction();\n    });\n\n    it('should expose BaseRenderer class', () => {\n      expect(Handsontable.renderers.BaseRenderer).toBeFunction();\n    });\n\n    it('should expose all registered renderer functions', () => {\n      expect(Handsontable.renderers.AutocompleteRenderer).toBeFunction();\n      expect(Handsontable.renderers.CheckboxRenderer).toBeFunction();\n      expect(Handsontable.renderers.HtmlRenderer).toBeFunction();\n      expect(Handsontable.renderers.NumericRenderer).toBeFunction();\n      expect(Handsontable.renderers.PasswordRenderer).toBeFunction();\n      expect(Handsontable.renderers.TextRenderer).toBeFunction();\n    });\n  });\n\n  describe('Validators', () => {\n    it('should expose static method for registering external validators', () => {\n      expect(Handsontable.validators.registerValidator).toBeFunction();\n    });\n\n    it('should expose static method for retrieving registered validators', () => {\n      expect(Handsontable.validators.getValidator).toBeFunction();\n    });\n\n    it('should expose all registered validator functions', () => {\n      expect(Handsontable.validators.AutocompleteValidator).toBeFunction();\n      expect(Handsontable.validators.DateValidator).toBeFunction();\n      expect(Handsontable.validators.NumericValidator).toBeFunction();\n      expect(Handsontable.validators.TimeValidator).toBeFunction();\n    });\n  });\n\n  describe('CellTypes', () => {\n    it('should expose static method for registering external cell types', () => {\n      expect(Handsontable.cellTypes.registerCellType).toBeFunction();\n    });\n\n    it('should expose static method for retrieving registered cell types', () => {\n      expect(Handsontable.cellTypes.getCellType).toBeFunction();\n    });\n\n    it('should expose all registered cell type objects', () => {\n      expect(Handsontable.cellTypes.autocomplete.editor).toBe(Handsontable.editors.AutocompleteEditor);\n      expect(Handsontable.cellTypes.autocomplete.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);\n      expect(Handsontable.cellTypes.autocomplete.validator).toBe(Handsontable.validators.AutocompleteValidator);\n\n      expect(Handsontable.cellTypes.checkbox.editor).toBe(Handsontable.editors.CheckboxEditor);\n      expect(Handsontable.cellTypes.checkbox.renderer).toBe(Handsontable.renderers.CheckboxRenderer);\n      expect(Handsontable.cellTypes.checkbox.validator).not.toBeDefined();\n\n      expect(Handsontable.cellTypes.date.editor).toBe(Handsontable.editors.DateEditor);\n      expect(Handsontable.cellTypes.date.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);\n      expect(Handsontable.cellTypes.date.validator).toBe(Handsontable.validators.DateValidator);\n\n      expect(Handsontable.cellTypes.dropdown.editor).toBe(Handsontable.editors.DropdownEditor);\n      expect(Handsontable.cellTypes.dropdown.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);\n      expect(Handsontable.cellTypes.dropdown.validator).toBe(Handsontable.validators.AutocompleteValidator);\n\n      expect(Handsontable.cellTypes.handsontable.editor).toBe(Handsontable.editors.HandsontableEditor);\n      expect(Handsontable.cellTypes.handsontable.renderer).toBe(Handsontable.renderers.AutocompleteRenderer);\n      expect(Handsontable.cellTypes.handsontable.validator).not.toBeDefined();\n\n      expect(Handsontable.cellTypes.numeric.editor).toBe(Handsontable.editors.NumericEditor);\n      expect(Handsontable.cellTypes.numeric.renderer).toBe(Handsontable.renderers.NumericRenderer);\n      expect(Handsontable.cellTypes.numeric.validator).toBe(Handsontable.validators.NumericValidator);\n\n      expect(Handsontable.cellTypes.password.editor).toBe(Handsontable.editors.PasswordEditor);\n      expect(Handsontable.cellTypes.password.renderer).toBe(Handsontable.renderers.PasswordRenderer);\n      expect(Handsontable.cellTypes.password.validator).not.toBeDefined();\n\n      expect(Handsontable.cellTypes.text.editor).toBe(Handsontable.editors.TextEditor);\n      expect(Handsontable.cellTypes.text.renderer).toBe(Handsontable.renderers.TextRenderer);\n      expect(Handsontable.cellTypes.text.validator).not.toBeDefined();\n\n      expect(Handsontable.cellTypes.time.editor).toBe(Handsontable.editors.TextEditor);\n      expect(Handsontable.cellTypes.time.renderer).toBe(Handsontable.renderers.TextRenderer);\n      expect(Handsontable.cellTypes.time.validator).toBe(Handsontable.validators.TimeValidator);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/publicAPI.spec.js","describe('AutocompleteRenderer', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should contain down arrow glyph', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      type: 'autocomplete',\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 2, 'string');\n\n    setTimeout(() => {\n      var html = getCell(2, 2).innerHTML;\n\n      expect(html).toContain('string');\n      expect(html).toContain('\\u25BC');\n      done();\n    }, 100);\n  });\n\n  it('should open cell editor after clicking on arrow glyph', () => {\n    var hot = handsontable({\n      type: 'autocomplete'\n    });\n\n    selectCell(0, 0);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n  });\n\n  it('should open cell editor after clicking on arrow glyph, after the table has been destroyed and reinitialized (#1367)', () => {\n    var hot = handsontable({\n      type: 'autocomplete'\n    });\n\n    destroy();\n\n    hot = handsontable({\n      type: 'autocomplete'\n    });\n\n    selectCell(0, 0);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    $(getCell(0, 0)).find('.htAutocompleteArrow').simulate('mousedown');\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/renderers/autocompleteRenderer.spec.js","describe('CellDecorator', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfObjects = function() {\n    return [\n      {id: 1, name: 'Ted', lastName: 'Right'},\n      {id: 2, name: 'Frank', lastName: 'Honest'},\n      {id: 3, name: 'Joan', lastName: 'Well'}\n    ];\n  };\n\n  it('should add an appropriate class name to every cell, if wordWrap=false is set to the whole table', () => {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      wordWrap: false\n    });\n\n    var cols = countCols(),\n      rows = countRows();\n\n    for (let i = 0; i < cols; i++) {\n      for (let j = 0; j < rows; j++) {\n        expect($(getCell(i, j)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);\n      }\n    }\n  });\n\n  it('should add an appropriate class name to every cell in a column, if wordWrap=false is set to the column settings', () => {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id'},\n        {data: 'name', wordWrap: false},\n        {data: 'lastName'}\n      ]\n    });\n\n    var rows = countRows();\n\n    for (let i = 0; i < rows; i++) {\n      expect($(getCell(i, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);\n    }\n\n    for (let i = 0; i < rows; i++) {\n      expect($(getCell(i, 0)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false); // no class added to other columns\n      expect($(getCell(i, 2)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false);\n    }\n  });\n\n  it('should add an appropriate class to a cell, if wordWrap=false is set to a single cell', () => {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ]\n    });\n\n    expect($(getCell(1, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(false);\n\n    getCellMeta(1, 1).wordWrap = false;\n    render();\n\n    expect($(getCell(1, 1)).hasClass(hot.getSettings().noWordWrapClassName)).toBe(true);\n\n  });\n\n  it('should set \"white-space\" css parameter to \"nowrap\" if htNoWrap class is added to a cell', () => {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ]\n    });\n\n    expect(window.getComputedStyle(getCell(1, 1)).whiteSpace).not.toEqual('nowrap');\n\n    getCellMeta(1, 1).wordWrap = false;\n    render();\n\n    expect(window.getComputedStyle(getCell(1, 1)).whiteSpace).toEqual('nowrap');\n  });\n\n  it('should not add cell `htInvalid` class when trying to add not proper value', (done) => {\n    var hot = handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id'},\n        {data: 'name'},\n        {data: 'salary', type: 'numeric', allowInvalid: false}\n      ]\n    });\n\n    setDataAtCell(0, 2, 'non-numeric value');\n\n    setTimeout(() => {\n      expect($(getCell(0, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);\n      done();\n    }, 200);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/renderers/cellDecorator.spec.js","describe('CheckboxRenderer', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px;\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should render values as checkboxes', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    expect($(getRenderedValue(0, 0)).is(':checkbox')).toBe(true);\n    expect($(getRenderedValue(1, 0)).is(':checkbox')).toBe(true);\n    expect($(getRenderedValue(2, 0)).is(':checkbox')).toBe(true);\n  });\n\n  it('should render check checkboxes for cell which value is true', () => {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        {type: 'checkbox' }\n      ]\n    });\n\n    expect($(getRenderedContent(0, 0)).prop('checked')).toBe(true);\n    expect($(getRenderedContent(1, 0)).prop('checked')).toBe(false);\n    expect($(getRenderedContent(2, 0)).prop('checked')).toBe(true);\n  });\n\n  it('should use templates to check appropriate checkboxes', () => {\n    handsontable({\n      data: [['yes'], ['no'], ['yes']],\n      columns: [\n        {\n          type: 'checkbox',\n          checkedTemplate: 'yes',\n          uncheckedTemplate: 'no'\n        }\n      ]\n    });\n\n    expect($(getRenderedContent(0, 0)).prop('checked')).toBe(true);\n    expect($(getRenderedContent(1, 0)).prop('checked')).toBe(false);\n    expect($(getRenderedContent(2, 0)).prop('checked')).toBe(true);\n  });\n\n  it('should select cell after checkbox click', function() {\n    var hot = handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    hot.selectCell(0, 0);\n\n    this.$container.find(':checkbox').eq(2).simulate('mousedown');\n\n    expect(hot.getSelected()).toEqual([2, 0, 2, 0]);\n  });\n\n  it('should select cell after label click', function() {\n    var hot = handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        {type: 'checkbox', label: {position: 'before', value: 'Sure? '}}\n      ]\n    });\n\n    hot.selectCell(0, 0);\n\n    this.$container.find('td label').eq(2).simulate('mousedown');\n\n    expect(hot.getSelected()).toEqual([2, 0, 2, 0]);\n  });\n\n  it('should reverse selection in checkboxes', function() {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        {type: 'checkbox' }\n      ]\n    });\n\n    this.$container.find(':checkbox').eq(0).simulate('click');\n    this.$container.find(':checkbox').eq(1).simulate('click');\n    this.$container.find(':checkbox').eq(2).simulate('click');\n\n    expect(getData()).toEqual([[false], [true], [false]]);\n  });\n\n  it('shouldn\\'t uncheck checkboxes', function() {\n    handsontable({\n      data: [[true], [true], [true]],\n      columns: [\n        {type: 'checkbox', readOnly: true}\n      ]\n    });\n\n    this.$container.find(':checkbox').trigger('click');\n\n    expect(getData()).toEqual([[true], [true], [true]]);\n  });\n\n  it('should check single box after hitting space', function() {\n    handsontable({\n      data: [[true], [true], [true]],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [true], [true]]);\n\n    selectCell(0, 0);\n\n    //  this.$container.find(':checkbox').eq(0).simulate('click');\n    //  this.$container.simulate('keydown',{\n    //    keyCode: 32\n    //  });\n    keyDown('space');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [true], [true]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should not check single box after hitting space, if cell is readOnly', function() {\n    handsontable({\n      data: [[true], [true], [true]],\n      columns: [\n        {type: 'checkbox', readOnly: true}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [true], [true]]);\n\n    selectCell(0, 0);\n\n    keyDown('space');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [true], [true]]);\n    expect(afterChangeCallback).not.toHaveBeenCalled();\n  });\n\n  it('should not check single box after hitting space, if last column is readOnly (#3562)', function() {\n    handsontable({\n      data: [[true, true], [false, false], [true, true]],\n      columns: [\n        {type: 'checkbox'},\n        {type: 'checkbox', readOnly: true}\n      ]\n    });\n\n    selectCell(0, 0);\n    keyDown('space');\n    selectCell(0, 1);\n    keyDown('space');\n    selectCell(1, 0);\n    keyDown('space');\n    selectCell(1, 1);\n    keyDown('space');\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    // column 0\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(checkboxes.eq(4).prop('checked')).toBe(true);\n\n    // column 1\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(3).prop('checked')).toBe(false);\n    expect(checkboxes.eq(5).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false, true], [true, false], [true, true]]);\n  });\n\n  it('should change checkboxes values properly when data contains null or/and undefined', () => {\n    handsontable({\n      data: [[null], [undefined]],\n      colHeaders: true,\n      columns: [\n        {\n          type: 'checkbox'\n        }\n      ]\n    });\n\n    selectCell(0, 0, 1, 0);\n    keyDown('space');\n\n    expect(getDataAtCol(0)).toEqual([true, true]);\n\n    selectCell(0, 0, 1, 0);\n    keyDown('space');\n\n    expect(getDataAtCol(0)).toEqual([false, false]);\n  });\n\n  it('should change checkboxes values for cells below the viewport (hot initialized by startRows) #4037', () => {\n    handsontable({\n      startRows: 200,\n      colHeaders: true,\n      columns: [\n        {\n          type: 'checkbox'\n        }\n      ]\n    });\n\n    selectCell(0, 0, 199, 0);\n    keyDown('space');\n\n    expect(getDataAtCell(199, 0)).toEqual(true);\n  });\n\n  it('should reverse checkboxes state after hitting space, when multiple cells are selected', function() {\n    var hot = handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(0, 0, 2, 0);\n\n    keyDown('space');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([[false], [true], [false]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false], [1, 0, false, true], [2, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should reverse checkboxes state after hitting space, when multiple cells are selected and selStart > selEnd', function() {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(2, 0, 0, 0); // selStart = [2,0], selEnd = [0,0]\n\n    keyDown('space');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([[false], [true], [false]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false], [1, 0, false, true], [2, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should open cell editors of cell that does not have checkboxRenderer (#1199)', () => {\n    var hot = handsontable({\n      data: [[true, 'B0'], [true, 'B1'], [true, 'B2']],\n      columns: [\n        {type: 'checkbox'},\n        {type: 'text'}\n      ]\n    });\n\n    selectCell(0, 1);\n\n    expect(hot.getActiveEditor().isOpened()).toBe(false);\n\n    keyDown('space');\n\n    expect(hot.getActiveEditor().isOpened()).toBe(true);\n  });\n\n  it('double click on checkbox cell should invert the value', () => {\n    handsontable({\n      data: [\n        [true],\n        [false],\n        [true]\n      ],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    selectCell(0, 0);\n\n    mouseDoubleClick(getCell(0, 0));\n    expect(getDataAtCell(0, 0)).toBe(false);\n\n    mouseDoubleClick(getCell(0, 0));\n    expect(getDataAtCell(0, 0)).toBe(true);\n\n    mouseDoubleClick(getCell(0, 0));\n    expect(getDataAtCell(0, 0)).toBe(false);\n  });\n\n  it('should change checkbox state from checked to unchecked after hitting ENTER', function() {\n    handsontable({\n      data: [[true], [true], [true]],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [true], [true]]);\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [true], [true]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox state from checked to unchecked after hitting ENTER using custom check/uncheck templates', function() {\n    handsontable({\n      data: [['yes'], ['yes'], ['no']],\n      columns: [\n        {\n          type: 'checkbox',\n          checkedTemplate: 'yes',\n          uncheckedTemplate: 'no'\n        }\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([['yes'], ['yes'], ['no']]);\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([['no'], ['yes'], ['no']]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'yes', 'no']], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox state from checked to unchecked after hitting ENTER using custom check/uncheck templates in numeric format', function() {\n    handsontable({\n      data: [[1], [1], [0]],\n      columns: [\n        {\n          type: 'checkbox',\n          checkedTemplate: 1,\n          uncheckedTemplate: 0\n        }\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([[1], [1], [0]]);\n\n    selectCell(0, 0);\n\n    keyDown('enter');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(true);\n    expect(checkboxes.eq(2).prop('checked')).toBe(false);\n    expect(getData()).toEqual([[0], [1], [0]]);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 1, 0]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox state to unchecked after hitting DELETE', function() {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(0, 0);\n    keyDown('delete');\n    selectCell(0, 1);\n    keyDown('delete');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [false], [true]]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(2);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox notte to unchecked after hitting BACKSPACE', function() {\n    handsontable({\n      data: [[true], [false], [true]],\n      columns: [\n        { type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    var checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(true);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[true], [false], [true]]);\n\n    selectCell(0, 0);\n    keyDown('backspace');\n    selectCell(0, 1);\n    keyDown('backspace');\n\n    checkboxes = this.$container.find(':checkbox');\n\n    expect(checkboxes.eq(0).prop('checked')).toBe(false);\n    expect(checkboxes.eq(1).prop('checked')).toBe(false);\n    expect(checkboxes.eq(2).prop('checked')).toBe(true);\n    expect(getData()).toEqual([[false], [false], [true]]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(2);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, true, false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change  notkbox state to unchecked after hitting DELETE (from #bad-value# state)', () => {\n    handsontable({\n      data: [['foo'], ['bar']],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    expect(getDataAtCell(0, 0)).toBe('foo');\n    expect(getDataAtCell(1, 0)).toBe('bar');\n\n    selectCell(0, 0);\n    keyDown('delete');\n    selectCell(1, 0);\n    keyDown('delete');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n    expect(getDataAtCell(1, 0)).toBe(false);\n    expect(getData()).toEqual([[false], [false]]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(2);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'foo', false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('should change checkbox  note to unchecked after hitting BACKSPACE (from #bad-value# state)', () => {\n    handsontable({\n      data: [['foo'], ['bar']],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    expect(getDataAtCell(0, 0)).toBe('foo');\n    expect(getDataAtCell(1, 0)).toBe('bar');\n\n    selectCell(0, 0);\n    keyDown('backspace');\n    selectCell(1, 0);\n    keyDown('backspace');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n    expect(getDataAtCell(1, 0)).toBe(false);\n    expect(getData()).toEqual([[false], [false]]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(2);\n    expect(afterChangeCallback).toHaveBeenCalledWith([[0, 0, 'foo', false]], 'edit', undefined, undefined, undefined, undefined);\n  });\n\n  it('shouldn\\'t change checkbo notate after hitting other keys then DELETE or BACKSPACE (from #bad-value# state)', () => {\n    handsontable({\n      data: [['foo'], ['bar']],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    expect(getDataAtCell(0, 0)).toBe('foo');\n\n    selectCell(0, 0);\n    keyDown('space');\n    selectCell(0, 0);\n    keyDown('c');\n\n    expect(getDataAtCell(0, 0)).toBe('foo');\n    expect(getData()).toEqual([['foo'], ['bar']]);\n\n    expect(afterChangeCallback.calls.count()).toEqual(0);\n  });\n\n  it('should not change checkbox state after hitting other keys then SPACE, ENTER, DELETE or BACKSPACE', () => {\n    handsontable({\n      data: [[false], [true], [true]],\n      columns: [\n        {type: 'checkbox'}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    selectCell(0, 0);\n    keyDown('space');\n\n    expect(getDataAtCell(0, 0)).toBe(true);\n\n    selectCell(0, 0);\n    keyDown('c');\n\n    expect(getDataAtCell(0, 0)).toBe(true);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n  });\n\n  it('should add label on the beginning of a checkbox element', () => {\n    handsontable({\n      data: [{checked: true, label: 'myLabel'}, {checked: false, label: 'myLabel'}],\n      columns: [\n        {type: 'checkbox', data: 'checked', label: {position: 'before', property: 'label'}}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    selectCell(0, 0);\n    keyDown('space');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n    expect(getDataAtCell(1, 0)).toBe(false);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(getCell(0, 0).querySelector('label').firstChild.textContent).toEqual('myLabel');\n  });\n\n  it('should add label on the end of a checkbox element', () => {\n    handsontable({\n      data: [{checked: true, label: 'myLabel'}, {checked: false, label: 'myLabel'}],\n      columns: [\n        {type: 'checkbox', data: 'checked', label: {position: 'after', property: 'label'}}\n      ]\n    });\n\n    var afterChangeCallback = jasmine.createSpy('afterChangeCallback');\n    addHook('afterChange', afterChangeCallback);\n\n    selectCell(0, 0);\n    keyDown('space');\n\n    expect(getDataAtCell(0, 0)).toBe(false);\n    expect(getDataAtCell(1, 0)).toBe(false);\n    expect(afterChangeCallback.calls.count()).toEqual(1);\n    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');\n  });\n\n  it('should not add label when value is incorrect (#bad-value)', () => {\n    handsontable({\n      data: [{checked: 1, label: 'myLabel'}, {checked: 0, label: 'myLabel'}],\n      columns: [\n        {type: 'checkbox', data: 'checked', label: {position: 'after', property: 'label'}}\n      ]\n    });\n\n    expect(getCell(0, 0).querySelector('label')).toBe(null);\n  });\n\n  it('by default should add label on the end of a checkbox element', () => {\n    handsontable({\n      data: [{checked: true, label: {test: 'Baz'}}, {checked: false, label: {test: 'Baz'}}],\n      columns: [\n        {type: 'checkbox', data: 'checked', label: {property: 'label.test'}}\n      ]\n    });\n\n    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('Baz');\n  });\n\n  it('should add label with text filled from `value` label setting (passed as string)', () => {\n    handsontable({\n      data: [{checked: true}, {checked: false}],\n      columns: [\n        {type: 'checkbox', data: 'checked', label: {value: 'myLabel'}}\n      ]\n    });\n\n    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');\n  });\n\n  it('should add label with text filled from `value` label setting (passed as function)', () => {\n    var labelFunction = jasmine.createSpy();\n\n    labelFunction.and.returnValue('myLabel');\n    handsontable({\n      autoRowSize: false,\n      autoColumnSize: false,\n      data: [{checked: true}, {checked: false}],\n      columns: [\n        {type: 'checkbox', data: 'checked', label: {value: labelFunction}}\n      ]\n    });\n\n    expect(labelFunction.calls.count()).toBe(2);\n    expect(labelFunction.calls.argsFor(0)).toEqual([0, 0, 'checked', true]);\n    expect(labelFunction.calls.argsFor(1)).toEqual([1, 0, 'checked', false]);\n    expect(getCell(0, 0).querySelector('label').lastChild.textContent).toEqual('myLabel');\n  });\n\n  describe('CheckboxRenderer with ContextMenu', () => {\n    it('should add class name `htRight` after set align in contextMenu', (done) => {\n      handsontable({\n        startRows: 1,\n        startCols: 1,\n        contextMenu: ['alignment'],\n        cells() {\n          return {\n            type: 'checkbox'\n          };\n        },\n        height: 100\n      });\n\n      selectCell(0, 0);\n\n      contextMenu();\n\n      var menu = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator');\n\n      menu.simulate('mouseover');\n\n      setTimeout(() => {\n        var contextSubMenu = $(`.htContextMenuSub_${menu.text()}`).find('tbody td').eq(2);\n        contextSubMenu.simulate('mousedown');\n        contextSubMenu.simulate('mouseup');\n\n        expect($('.handsontable.ht_master .htRight').length).toBe(1);\n        done();\n      }, 500);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/renderers/checkboxRenderer.spec.js","describe('HTMLRenderer', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\" style=\"width: 300px; height: 200px;\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should not fill empty rows with null values', () => {\n    handsontable({\n      data: [['a', 'b', 'c', 'd', 'e', 'f']],\n      colHeaders: true,\n      rowHeaders: true,\n      minSpareRows: 5,\n      renderer: 'html'\n    });\n\n    expect($('.handsontable table tr:last-child td:eq(0)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(1)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(2)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(3)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(4)').html()).toEqual('');\n    expect($('.handsontable table tr:last-child td:eq(5)').html()).toEqual('');\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/renderers/htmlRenderer.spec.js","describe('renderers', () => {\n  const id = 'testContainer';\n  const {\n    registerRenderer,\n    getRenderer,\n  } = Handsontable.renderers;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should register custom renderer', () => {\n    registerRenderer('myRenderer', (hot, td, row, col, prop, value, cellProperties) => {\n      td.innerHTML = `--${value}--`;\n    });\n\n    const hot = handsontable({\n      data: [\n        [1, 6, 10],\n      ],\n      columns: [{\n        renderer: 'myRenderer',\n      }],\n    });\n\n    expect(getCell(0, 0).innerHTML).toBe('--1--');\n  });\n\n  it('should retrieve predefined renderers by its names', () => {\n    expect(getRenderer('autocomplete')).toBeFunction();\n    expect(getRenderer('base')).toBeFunction();\n    expect(getRenderer('checkbox')).toBeFunction();\n    expect(getRenderer('html')).toBeFunction();\n    expect(getRenderer('numeric')).toBeFunction();\n    expect(getRenderer('password')).toBeFunction();\n    expect(getRenderer('text')).toBeFunction();\n  });\n\n  it('should retrieve custom renderer by its names', () => {\n    const spy = jasmine.createSpy();\n\n    registerRenderer('myRenderer', spy);\n    getRenderer('myRenderer')(1, 2, 3, 4, 5, 6);\n\n    expect(spy).toHaveBeenCalledWith(1, 2, 3, 4, 5, 6);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/renderers/index.spec.js","describe('NumericRenderer', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should render formatted number', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      cells() {\n        return {\n          type: 'numeric',\n          format: '$0,0.00'\n        };\n      },\n      afterValidate: onAfterValidate\n    });\n    setDataAtCell(2, 2, '1000.234');\n\n    setTimeout(() => {\n      expect(getCell(2, 2).innerHTML).toEqual('$1,000.23');\n      done();\n    }, 200);\n  });\n\n  it('should render signed number', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      cells() {\n        return {\n          type: 'numeric',\n          format: '$0,0.00'\n        };\n      },\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 2, '-1000.234');\n\n    setTimeout(() => {\n      expect(getCell(2, 2).innerHTML).toEqual('-$1,000.23');\n      done();\n    }, 200);\n  });\n\n  it('should try to render string as numeral', (done) => {\n    handsontable({\n      cells() {\n        return {\n          type: 'numeric',\n          format: '$0,0.00'\n        };\n      },\n    });\n\n    setDataAtCell(2, 2, '123 simple test');\n\n    setTimeout(() => {\n      expect(getCell(2, 2).innerHTML).toEqual('$123.00');\n      done();\n    }, 100);\n  });\n\n  it('should add class names `htNumeric` and `htRight` to the cell if it renders a number', () => {\n    var DIV = document.createElement('DIV');\n    var instance = new Handsontable(DIV, {});\n    var TD = document.createElement('TD');\n    TD.className = 'someClass';\n    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 123, {});\n    expect(TD.className).toEqual('someClass htRight htNumeric');\n    instance.destroy();\n  });\n\n  it('should add class names `htNumeric` and `htRight` to the cell if it renders a numeric string', () => {\n    var DIV = document.createElement('DIV');\n    var instance = new Handsontable(DIV, {});\n    var TD = document.createElement('TD');\n    TD.className = 'someClass';\n    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, '123', {});\n    expect(TD.className).toEqual('someClass htRight htNumeric');\n    instance.destroy();\n  });\n\n  it('should not add class name `htNumeric` to the cell if it renders a text', () => {\n    var DIV = document.createElement('DIV');\n    var instance = new Handsontable(DIV, {});\n    var TD = document.createElement('TD');\n    TD.className = 'someClass';\n    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 'abc', {});\n    expect(TD.className).toEqual('someClass');\n    instance.destroy();\n  });\n\n  it('should add class name `htDimmed` to a read only cell', () => {\n    var DIV = document.createElement('DIV');\n    var instance = new Handsontable(DIV, {});\n    var TD = document.createElement('TD');\n    Handsontable.renderers.NumericRenderer(instance, TD, 0, 0, 0, 123, {readOnly: true, readOnlyCellClassName: 'htDimmed'});\n    expect(TD.className).toContain('htDimmed');\n    instance.destroy();\n  });\n\n  describe('NumericRenderer with ContextMenu', () => {\n    it('should change class name from default `htRight` to `htLeft` after set align in contextMenu', (done) => {\n      handsontable({\n        startRows: 1,\n        startCols: 1,\n        contextMenu: ['alignment'],\n        cells() {\n          return {\n            type: 'numeric',\n            format: '$0,0.00'\n          };\n        },\n        height: 100\n      });\n\n      setDataAtCell(0, 0, '1000');\n      selectCell(0, 0);\n\n      contextMenu();\n\n      var menu = $('.htContextMenu .ht_master .htCore').find('tbody td').not('.htSeparator');\n\n      menu.simulate('mouseover');\n\n      setTimeout(() => {\n        var contextSubMenu = $(`.htContextMenuSub_${menu.text()}`).find('tbody td').eq(0);\n\n        contextSubMenu.simulate('mousedown');\n        contextSubMenu.simulate('mouseup');\n\n        expect($('.handsontable.ht_master .htLeft:not(.htRight)').length).toBe(1);\n        done();\n      }, 500);\n    });\n  });\n\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/renderers/numericRenderer.spec.js","describe('passwordRenderer', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should render strings as a sequence of asterisks', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);\n  });\n\n  it('should render numbers as a sequence of asterisks ', () => {\n    handsontable({\n      data: [\n        [1],\n        [1234],\n        [9090],\n        [0]\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);\n  });\n\n  it('should be possible to set passwordRenderer with column \\'type\\' parameter', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          type: 'password'\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);\n  });\n\n  it('should be possible to set passwordRenderer using alias \\'password\\'', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          renderer: 'password'\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[*]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[*]+$/ig);\n  });\n\n  it('should render strings as a sequence of asterisks, of width matching the original value width', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0).length).toEqual(getDataAtCell(0, 0).length);\n    expect(getRenderedValue(1, 0).length).toEqual(getDataAtCell(1, 0).length);\n    expect(getRenderedValue(2, 0).length).toEqual(getDataAtCell(2, 0).length);\n    expect(getRenderedValue(3, 0).length).toEqual(getDataAtCell(3, 0).length);\n  });\n\n  it('should render strings as a sequence of asterisks, of fixed width', () => {\n    handsontable({\n      data: [\n        ['Joe'],\n        ['Timothy'],\n        ['Margaret'],\n        ['Jerry']\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer,\n          hashLength: 10\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0).length).toEqual(10);\n    expect(getRenderedValue(1, 0).length).toEqual(10);\n    expect(getRenderedValue(2, 0).length).toEqual(10);\n    expect(getRenderedValue(3, 0).length).toEqual(10);\n  });\n\n  it('should render strings as a sequence of custom symbols', () => {\n    handsontable({\n      data: [\n        [1, 'Joe'],\n        [2, 'Timothy'],\n        [3, 'Margaret'],\n        [4, 'Jerry']\n      ],\n      columns: [\n        {\n          renderer: Handsontable.renderers.PasswordRenderer,\n          hashSymbol: '#'\n        },\n        {\n          renderer: Handsontable.renderers.PasswordRenderer,\n          hashSymbol: 'x'\n        }\n      ]\n    });\n\n    expect(getRenderedValue(0, 0)).toMatch(/^[#]+$/ig);\n    expect(getRenderedValue(1, 0)).toMatch(/^[#]+$/ig);\n    expect(getRenderedValue(2, 0)).toMatch(/^[#]+$/ig);\n    expect(getRenderedValue(3, 0)).toMatch(/^[#]+$/ig);\n\n    expect(getRenderedValue(0, 1)).toMatch(/^[x]+$/ig);\n    expect(getRenderedValue(1, 1)).toMatch(/^[x]+$/ig);\n    expect(getRenderedValue(2, 1)).toMatch(/^[x]+$/ig);\n    expect(getRenderedValue(3, 1)).toMatch(/^[x]+$/ig);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/renderers/passwordRenderer.spec.js","describe('TextRenderer', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should render string', () => {\n    handsontable();\n    setDataAtCell(2, 2, 'string');\n\n    expect(getCell(2, 2).innerHTML).toEqual('string');\n  });\n\n  it('should render number', () => {\n    handsontable();\n    setDataAtCell(2, 2, 13);\n\n    expect(getCell(2, 2).innerHTML).toEqual('13');\n  });\n\n  it('should render boolean true', () => {\n    handsontable();\n    setDataAtCell(2, 2, true);\n\n    expect(getCell(2, 2).innerHTML).toEqual('true');\n  });\n\n  it('should render boolean false', () => {\n    handsontable();\n    setDataAtCell(2, 2, false);\n\n    expect(getCell(2, 2).innerHTML).toEqual('false');\n  });\n\n  it('should render null', () => {\n    handsontable();\n    setDataAtCell(2, 2, null);\n\n    expect(getCell(2, 2).innerHTML).toEqual('');\n  });\n\n  it('should render undefined', () => {\n    handsontable();\n    /* eslint-disable wrap-iife */\n    setDataAtCell(2, 2, (function() {})());\n\n    expect(getCell(2, 2).innerHTML).toEqual('');\n  });\n\n  it('should add class name `htDimmed` to a read only cell', () => {\n    var DIV = document.createElement('DIV');\n    var instance = new Handsontable.Core(DIV, {});\n\n    var TD = document.createElement('TD');\n    TD.className = 'someClass';\n    Handsontable.renderers.TextRenderer(instance, TD, 0, 0, 0, '', {readOnly: true, readOnlyCellClassName: 'htDimmed'});\n    expect(TD.className).toEqual('someClass htDimmed');\n\n    instance.destroy();\n  });\n\n  it('should render a multiline string', () => {\n    handsontable();\n    setDataAtCell(1, 2, 'a b');\n    setDataAtCell(2, 2, 'a\\nb');\n\n    expect($(getCell(2, 2)).height()).toBeGreaterThan($(getCell(1, 2)).height());\n  });\n\n  it('should wrap text when column width is limited', () => {\n    handsontable({\n      colWidths: [100]\n    });\n    setDataAtCell(0, 0, 'short text');\n    setDataAtCell(1, 0, 'long long long long long long long text');\n\n    expect($(getCell(1, 0)).height()).toBeGreaterThan($(getCell(0, 0)).height());\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/renderers/textRenderer.spec.js","describe('settings', () => {\n  describe('colWidths', () => {\n    var id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should consider colWidths provided as number', function() {\n        handsontable({\n          colWidths: 123\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as string', function() {\n        handsontable({\n          colWidths: '123'\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as array of numbers', function() {\n        handsontable({\n          colWidths: [123]\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as array of strings', function() {\n        handsontable({\n          colWidths: ['123']\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidth provided as function that returns number', function() {\n        handsontable({\n          colWidths(index) {\n            if (index === 0) {\n              return 123;\n            }\n            return 50;\n          }\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidth provided as function that returns string', function() {\n        handsontable({\n          colWidths(index) {\n            if (index === 0) {\n              return '123';\n            }\n            return '50';\n          }\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n    });\n\n    describe('defined in updateSettings', () => {\n      it('should consider colWidths provided as number', function() {\n        handsontable();\n        updateSettings({\n          colWidths: 123\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as string', function() {\n        handsontable();\n        updateSettings({\n          colWidths: '123'\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as array of numbers', function() {\n        handsontable();\n        updateSettings({\n          colWidths: [123]\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidths provided as array of strings', function() {\n        handsontable();\n        updateSettings({\n          colWidths: ['123']\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidth provided as function that returns number', function() {\n        handsontable();\n        updateSettings({\n          colWidths(index) {\n            if (index === 0) {\n              return 123;\n            }\n            return 50;\n          }\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider colWidth provided as function that returns string', function() {\n        handsontable();\n        updateSettings({\n          colWidths(index) {\n            if (index === 0) {\n              return '123';\n            }\n            return '50';\n          }\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n    });\n\n    describe('defined in columns', () => {\n      it('should consider width provided as number', function() {\n        handsontable({\n          columns: [\n            {\n              width: 123\n            }\n          ]\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as string', function() {\n        handsontable({\n          columns: [\n            {\n              width: '123'\n            }\n          ]\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as array of numbers', function() {\n        handsontable({\n          columns: [\n            {\n              width: [123]\n            }\n          ]\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as array of strings', function() {\n        handsontable({\n          columns: [\n            {\n              width: ['123']\n            }\n          ]\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as function that returns number', function() {\n        handsontable({\n          columns: [\n            {\n              width(index) {\n                if (index === 0) {\n                  return 123;\n                }\n                return 50;\n              }\n            }\n          ]\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as function that returns string', function() {\n        handsontable({\n          columns: [\n            {\n              width(index) {\n                if (index === 0) {\n                  return '123';\n                }\n                return '50';\n              }\n            }\n          ]\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n    });\n\n    describe('defined in cells', () => {\n      it('should consider width provided as number', function() {\n        handsontable({\n          cells(row, col) {\n            if (col === 0) {\n              this.width = 123;\n            }\n          }\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n\n      it('should consider width provided as string', function() {\n        handsontable({\n          cells(row, col) {\n            if (col === 0) {\n              this.width = '123';\n            }\n          }\n        });\n\n        expect(colWidth(this.$container, 0)).toBe(123);\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/colWidths.spec.js","describe('settings', () => {\n  describe('columns', () => {\n    var id = 'testContainer';\n    var arrayOfArrays = function() {\n      return [\n        ['', 'Kia', 'Nissan', 'Toyota', 'Honda'],\n        ['2008', 10, 11, 12, 13],\n        ['2009', 20, 11, 14, 13],\n        ['2010', 30, 15, 12, 13]\n      ];\n    };\n    var arrayOfObjects = function() {\n      return [\n        {id: 1, name: 'Ted', lastName: 'Right', date: '01/01/2015'},\n        {id: 2, name: 'Frank', lastName: 'Honest', date: '01/01/15'},\n        {id: 3, name: 'Joan', lastName: 'Well', date: '41/01/2015'},\n        {id: 4, name: 'Sid', lastName: 'Strong', date: '01/51/2015'},\n        {id: 5, name: 'Jane', lastName: 'Neat', date: '01/01/2015'},\n        {id: 6, name: 'Chuck', lastName: 'Jackson', date: '01/01/15'},\n        {id: 7, name: 'Meg', lastName: 'Jansen', date: '41/01/2015'},\n        {id: 8, name: 'Rob', lastName: 'Norris', date: '01/51/2015'},\n        {id: 9, name: 'Sean', lastName: 'O\\'Hara', date: '01/01/2015'},\n        {id: 10, name: 'Eve', lastName: 'Branson', date: '01/01/15'}\n      ];\n    };\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('as an array of objects', () => {\n      it('should not throw exception when passed columns array is empty (data source as array of arrays)', () => {\n        var hot = handsontable({\n          data: arrayOfArrays(),\n          columns: [\n            {data: 0},\n            {data: 1},\n            {data: 2}\n          ]\n        });\n\n        expect(() => {\n          hot.updateSettings({columns: []});\n        }).not.toThrow();\n      });\n\n      it('should not throw exception when passed columns array is empty (data source as array of objects)', () => {\n        var hot = handsontable({\n          data: arrayOfObjects(),\n          columns: [\n            {data: 'id'},\n            {data: 'name'},\n            {data: 'lastName'}\n          ],\n        });\n\n        expect(() => {\n          hot.updateSettings({columns: []});\n        }).not.toThrow();\n      });\n    });\n\n    describe('as a function', () => {\n      describe('init', () => {\n        it('should render only these columns which are not `null`', () => {\n          var hot = handsontable({\n            data: arrayOfArrays(),\n            columns(column) {\n              return [1, 2].indexOf(column) > -1 ? {} : null;\n            }\n          });\n\n          expect(hot.getData()[0].length).toEqual(2);\n        });\n\n        it('should properly bind default data when is not defined (data source as array of arrays)', () => {\n          var hot = handsontable({\n            data: arrayOfArrays(),\n            columns(column) {\n              return [1, 2].indexOf(column) > -1 ? {} : null;\n            }\n          });\n\n          expect(hot.getDataAtCell(0, 0)).toEqual('');\n          expect(hot.getDataAtCell(0, 1)).toEqual('Kia');\n        });\n\n        it('should properly bind default data when is not defined (data source as array of objects)', () => {\n          var hot = handsontable({\n            data: arrayOfObjects(),\n            columns(column) {\n              return [1, 2].indexOf(column) > -1 ? {} : null;\n            }\n          });\n\n          expect(hot.getDataAtCell(0, 0)).toEqual(null);\n          expect(hot.getDataAtCell(0, 1)).toEqual(null);\n        });\n\n        it('should properly bind defined data (data source as array of arrays)', () => {\n          var hot = handsontable({\n            data: arrayOfArrays(),\n            columns(column) {\n              return [1, 2].indexOf(column) > -1 ? {data: column + 1} : null;\n            }\n          });\n\n          expect(hot.getDataAtCell(0, 0)).toEqual('Nissan');\n          expect(hot.getDataAtCell(0, 1)).toEqual('Toyota');\n        });\n\n        it('should properly bind defined data (data source as array of objects)', () => {\n          var hot = handsontable({\n            data: arrayOfObjects(),\n            columns(column) {\n              var keys = ['id', 'name', 'lastName'];\n\n              return [1, 2].indexOf(column) > -1 ? {data: keys[column - 1]} : null;\n            }\n          });\n\n          expect(hot.getDataAtCell(0, 0)).toEqual(1);\n          expect(hot.getDataAtCell(0, 1)).toEqual('Ted');\n        });\n      });\n\n      describe('updateSettings', () => {\n        it('should not throw exception when passed columns function without return anything (data source as array of arrays) when columns is a function', () => {\n          var hot = handsontable({\n            data: arrayOfArrays(),\n            columns(column) {\n              return [0, 1, 2].indexOf(column) > -1 ? {data: column} : null;\n            }\n          });\n\n          expect(() => {\n            hot.updateSettings({columns() {}});\n          }).not.toThrow();\n        });\n\n        it('should not throw exception when passed columns function without return anything (data source as array of objects) when columns is a function', () => {\n          var hot = handsontable({\n            data: arrayOfObjects(),\n            columns(column) {\n              var keys = ['id', 'name', 'lasName'];\n\n              return [0, 1, 2].indexOf(column) > -1 ? {data: keys[column]} : null;\n            }\n          });\n\n          expect(() => {\n            hot.updateSettings({columns() {}});\n          }).not.toThrow();\n        });\n      });\n\n      describe('editors', () => {\n        it('should properly bind defined editors', () => {\n          handsontable({\n            data: [\n              ['Joe'],\n              ['Timothy'],\n              ['Margaret'],\n              ['Jerry']\n            ],\n            columns(column) {\n              return column === 0 ? { editor: Handsontable.editors.PasswordEditor } : null;\n            }\n          });\n\n          selectCell(0, 0);\n          keyDown('enter');\n\n          var editor = $('.handsontableInput');\n\n          expect(editor.is(':visible')).toBe(true);\n          expect(editor.is(':password')).toBe(true);\n        });\n      });\n\n      describe('renderers', () => {\n        it('should properly bind defined renderer', () => {\n          handsontable({\n            data: [[true], [false], [true]],\n            columns(column) {\n              return column === 0 ? { type: 'checkbox' } : null;\n            }\n          });\n\n          expect($(getRenderedValue(0, 0)).is(':checkbox')).toBe(true);\n          expect($(getRenderedValue(1, 0)).is(':checkbox')).toBe(true);\n          expect($(getRenderedValue(2, 0)).is(':checkbox')).toBe(true);\n        });\n      });\n\n      describe('validators', () => {\n        it('should properly bind defined validator', (done) => {\n          var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n          handsontable({\n            data: arrayOfObjects(),\n            columns(column) {\n              var settings = [\n                {data: 'date', type: 'date'},\n                {data: 'name'},\n                {data: 'lastName'}\n              ];\n              return [0, 1, 2].indexOf(column) > -1 ? settings[column] : null;\n            },\n            afterValidate: onAfterValidate\n          });\n\n          setDataAtCell(0, 0, '');\n\n          setTimeout(() => {\n            expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'date', undefined, undefined);\n            done();\n          }, 100);\n        });\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/columns.spec.js","describe('settings', () => {\n  describe('copyable', () => {\n    var id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    it('by default, CTRL+C should NOT copy the password value', () => {\n      handsontable({\n        data: [\n          ['Joe', 'Secret', 'Jack']\n        ],\n        columns: [\n          {},\n          {\n            type: 'password'\n          },\n          {}\n        ]\n      });\n\n      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\\t\\tJack');\n    });\n\n    it('with copyable=true, CTRL+C should copy the password value', () => {\n      handsontable({\n        data: [\n          ['Joe', 'Secret', 'Jack']\n        ],\n        columns: [\n          {},\n          {\n            type: 'password',\n            copyable: true\n          },\n          {}\n        ]\n      });\n\n      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\\tSecret\\tJack');\n    });\n\n    it('with copyable=false, CTRL+C should NOT copy the password value', () => {\n      handsontable({\n        data: [\n          ['Joe', 'Secret', 'Jack']\n        ],\n        columns: [\n          {},\n          {\n            type: 'password',\n            copyable: false\n          },\n          {}\n        ]\n      });\n\n      expect(getCopyableText(0, 0, 0, 2)).toMatch('Joe\\t\\tJack');\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/copyable.spec.js","describe('settings', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('currentHeaderClassName', () => {\n    it('should apply default currentHeaderClassName to cells in row where there is a selection', function() {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n      });\n\n      selectCell(2, 2);\n\n      expect(this.$container.find('.ht_master th.ht__highlight').length).toEqual(2);\n    });\n\n    it('should apply default currentHeaderClassName from cells after deselection', function() {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n      });\n\n      selectCell(2, 2);\n      deselectCell();\n\n      expect(this.$container.find('.ht_master th.ht__highlight').length).toEqual(0);\n    });\n    it('should apply custom currentHeaderClassName to cells in row where there is a selection', function() {\n      handsontable({\n        rowHeaders: true,\n        colHeaders: true,\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentHeaderClassName: 'currentHeaderClassName'\n      });\n\n      selectCell(2, 2);\n\n      expect(this.$container.find('.ht_master th.currentHeaderClassName').length).toEqual(2);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/currentHeaderClassName.spec.js","describe('settings', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('currentRowClassName', () => {\n    it('should apply currentRowClassName to cells in row where there is a selection', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentRowClassName: 'currentRowClassName'\n      });\n\n      selectCell(2, 2);\n\n      expect(this.$container.find('td.currentRowClassName').length).toEqual(6);\n    });\n\n    it('should apply currentRowClassName from cells after deselection', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentRowClassName: 'currentRowClassName'\n      });\n\n      selectCell(2, 2);\n      deselectCell();\n\n      expect(this.$container.find('td.currentRowClassName').length).toEqual(0);\n    });\n  });\n\n  describe('currentColClassName', () => {\n    it('should apply currentColClassName to cells in row where there is a selection', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentColClassName: 'currentColClassName'\n      });\n\n      selectCell(2, 2);\n\n      expect(this.$container.find('td.currentColClassName').length).toEqual(4);\n    });\n\n    it('should remove currentColClassName from cells after deselection', function() {\n      handsontable({\n        data: Handsontable.helper.createSpreadsheetData(5, 7),\n        currentColClassName: 'currentColClassName'\n      });\n\n      selectCell(2, 2);\n      deselectCell();\n\n      expect(this.$container.find('td.currentColClassName').length).toEqual(0);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/currentRowClassName.spec.js","describe('settings', () => {\n  describe('editor', () => {\n    var id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should use text editor by default', () => {\n        var textEditorPrototype = Handsontable.editors.TextEditor.prototype;\n\n        spyOn(textEditorPrototype, 'init').and.callThrough();\n        handsontable();\n        selectCell(0, 0);\n        expect(textEditorPrototype.init).toHaveBeenCalled();\n      });\n\n      it('should use editor from predefined string', () => {\n        var textEditorPrototype = Handsontable.editors.TextEditor.prototype;\n        var checkboxEditorPrototype = Handsontable.editors.CheckboxEditor.prototype;\n\n        spyOn(textEditorPrototype, 'init');\n        spyOn(checkboxEditorPrototype, 'init');\n        handsontable({\n          columns: [\n            {\n              editor: 'checkbox'\n            }\n          ]\n        });\n        selectCell(0, 0);\n        expect(textEditorPrototype.init).not.toHaveBeenCalled();\n        expect(checkboxEditorPrototype.init).toHaveBeenCalled();\n      });\n\n      it('should use editor from predefined string when columns is a function', () => {\n        var textEditorPrototype = Handsontable.editors.TextEditor.prototype;\n        var checkboxEditorPrototype = Handsontable.editors.CheckboxEditor.prototype;\n\n        spyOn(textEditorPrototype, 'init');\n        spyOn(checkboxEditorPrototype, 'init');\n        handsontable({\n          columns(column) {\n            return column === 0 ? {editor: 'checkbox'} : null;\n          }\n        });\n        selectCell(0, 0);\n        expect(textEditorPrototype.init).not.toHaveBeenCalled();\n        expect(checkboxEditorPrototype.init).toHaveBeenCalled();\n      });\n\n      it('should use editor class passed directly', () => {\n        var customEditor = jasmine.createSpy('customEditor');\n\n        customEditor.and.callFake(function() {\n          this.prepare = function() {};\n        });\n\n        handsontable({\n          columns: [\n            {\n              editor: customEditor\n            }\n          ]\n        });\n        selectCell(0, 0);\n\n        expect(customEditor).toHaveBeenCalled();\n      });\n\n      it('should use editor class passed directly when columns is a function', () => {\n        var customEditor = jasmine.createSpy('customEditor');\n\n        customEditor.and.callFake(function() {\n          this.prepare = function() {};\n        });\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? {editor: customEditor} : null;\n          }\n        });\n        selectCell(0, 0);\n\n        expect(customEditor).toHaveBeenCalled();\n      });\n\n      it('should use editor from custom string', () => {\n        var customEditor = jasmine.createSpy('customEditor');\n        customEditor.and.callFake(function() {\n          this.prepare = function() {};\n        });\n\n        Handsontable.editors.registerEditor('myEditor', customEditor);\n\n        handsontable({\n          columns: [\n            {\n              editor: 'myEditor'\n            }\n          ]\n        });\n        selectCell(0, 0);\n\n        expect(customEditor).toHaveBeenCalled();\n      });\n\n      it('should use editor from custom string when columns is a function', () => {\n        var customEditor = jasmine.createSpy('customEditor');\n\n        customEditor.and.callFake(function() {\n          this.prepare = function() {};\n        });\n\n        Handsontable.editors.registerEditor('myEditor', customEditor);\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? {editor: 'myEditor'} : null;\n          },\n        });\n        selectCell(0, 0);\n\n        expect(customEditor).toHaveBeenCalled();\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/editor.spec.js","describe('settings', () => {\n  describe('fixedColumnsLeft', () => {\n    var id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should show columns headers', () => {\n        handsontable({\n          fixedColumnsLeft: 3\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(3);\n      });\n\n      it('should show columns headers when headers are enabled', () => {\n        handsontable({\n          rowHeaders: true,\n          colHeaders: true,\n          fixedColumnsLeft: 2\n        });\n\n        expect(getLeftClone().find('thead tr th').length).toEqual(3);\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);\n      });\n    });\n\n    describe('defined in updateSettings', () => {\n      it('should increase fixed columns', () => {\n        handsontable({\n          fixedColumnsLeft: 2\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 4\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(4);\n      });\n\n      it('should decrease fixed columns', () => {\n        handsontable({\n          fixedColumnsLeft: 4\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 2\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);\n      });\n\n      it('should create fixed columns when they are disabled eariler', () => {\n        handsontable({\n          fixedColumnsLeft: 0\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 2\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);\n      });\n\n      it('should disable fixed columns', () => {\n        handsontable({\n          fixedColumnsLeft: 2\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 0\n        });\n\n        expect(getLeftClone().find('tbody tr:eq(0) td').length).toEqual(2);\n        expect(getLeftClone().width()).toBe(0);\n      });\n\n      it('should not throw errors while scrolling horizontally when fixed columns was set', (done) => {\n        var spy = jasmine.createSpyObj('error', ['test']);\n        var prevError = window.onerror;\n\n        window.onerror = function(messageOrEvent, source, lineno, colno, error) {\n          spy.test();\n        };\n        var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(50, 50),\n          width: 200,\n          height: 200,\n          colHeaders: true,\n        });\n\n        updateSettings({\n          fixedColumnsLeft: 2\n        });\n\n        setTimeout(() => {\n          hot.scrollViewportTo(30, 30);\n        }, 100);\n\n        setTimeout(() => {\n          expect(spy.test.calls.count()).toBe(0);\n\n          done();\n          window.onerror = prevError;\n        }, 200);\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/fixedColumnsLeft.spec.js","describe('settings', () => {\n  describe('fixedRowsTop', () => {\n    var id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should show rows headers', () => {\n        handsontable({\n          fixedRowsTop: 3\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(3);\n      });\n\n      it('should show rows headers when headers are enabled', () => {\n        handsontable({\n          rowHeaders: true,\n          colHeaders: true,\n          fixedRowsTop: 2\n        });\n\n        expect(getTopClone().find('thead tr').length).toEqual(1);\n        expect(getTopClone().find('tbody tr').length).toEqual(2);\n      });\n    });\n\n    describe('defined in updateSettings', () => {\n      it('should increase fixed rows', () => {\n        handsontable({\n          fixedRowsTop: 2\n        });\n\n        updateSettings({\n          fixedRowsTop: 4\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(4);\n      });\n\n      it('should decrease fixed rows', () => {\n        handsontable({\n          fixedRowsTop: 4\n        });\n\n        updateSettings({\n          fixedRowsTop: 2\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(2);\n      });\n\n      it('should create fixed rows when they are disabled eariler', () => {\n        handsontable({\n          fixedRowsTop: 0\n        });\n\n        updateSettings({\n          fixedRowsTop: 2\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(2);\n      });\n\n      it('should disable fixed rows', () => {\n        handsontable({\n          fixedRowsTop: 2\n        });\n\n        updateSettings({\n          fixedRowsTop: 0\n        });\n\n        expect(getTopClone().find('tbody tr').length).toEqual(2);\n        expect(getLeftClone().height()).toBe(0);\n      });\n\n      it('should not throw errors while scrolling vertically when fixed rows was set', (done) => {\n        var spy = jasmine.createSpyObj('error', ['test']);\n        var prevError = window.onerror;\n\n        window.onerror = function(messageOrEvent, source, lineno, colno, error) {\n          spy.test();\n        };\n        var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(50, 50),\n          width: 200,\n          height: 200,\n          rowHeaders: true,\n        });\n\n        updateSettings({\n          fixedRowsTop: 2\n        });\n\n        setTimeout(() => {\n          hot.scrollViewportTo(30, 30);\n        }, 100);\n\n        setTimeout(() => {\n          expect(spy.test.calls.count()).toBe(0);\n\n          done();\n          window.onerror = prevError;\n        }, 200);\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/fixedRowsTop.spec.js","describe('settings', () => {\n  describe('fragmentSelection', () => {\n    var id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    /**\n     * Returns current text selection or false if there is no text selection\n     * @returns {*}\n     */\n    function getSelected() {\n      /* eslint-disable no-else-return */\n      var text = '';\n\n      // IE8\n      if (window.getSelection && window.getSelection().toString() && $(window.getSelection()).attr('type') != 'Caret') {\n        text = window.getSelection();\n\n        return text.toString();\n\n      } else { // standards\n        var selection = document.selection && document.selection.createRange();\n\n        if (!(typeof selection === 'undefined') && selection.text && selection.text.toString()) {\n          text = selection.text;\n\n          return text.toString();\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Selects a <fromEl> node at as many siblings as given in the <cells> value\n     * Note: IE8 fallback assumes that a node contains exactly one word\n     * @param fromEl\n     * @param siblings\n     */\n    function selectElementText(fromEl, siblings) {\n      var doc = window.document;\n      var sel;\n      var range;\n\n      if (window.getSelection && doc.createRange) { // standards\n        sel = window.getSelection();\n        range = doc.createRange();\n        range.setStartBefore(fromEl, 0);\n        while (siblings > 1) {\n          fromEl = fromEl.nextSibling;\n          siblings--;\n        }\n        range.setEndAfter(fromEl, 0);\n        sel.removeAllRanges();\n        sel.addRange(range);\n      } else if (doc.body.createTextRange) { // IE8\n        range = doc.body.createTextRange();\n        range.moveToElementText(fromEl);\n        range.moveEnd('word', siblings + 1);\n        range.select();\n      }\n    }\n\n    describe('constructor', () => {\n      it('should disallow fragmentSelection when set to false', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: false\n        });\n        selectElementText(this.$container.find('tr:eq(0) td:eq(1)')[0], 3);\n\n        mouseDown(this.$container.find('tr:eq(0) td:eq(3)'));\n        mouseUp(this.$container.find('tr:eq(0) td:eq(3)'));\n\n        var sel = getSelected();\n        expect(sel).toEqual(false);\n      });\n\n      it('should allow fragmentSelection when set to true', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: true\n        });\n        selectElementText(this.$container.find('td')[1], 3);\n\n        mouseDown(this.$container.find('tr:eq(0) td:eq(3)'));\n        mouseUp(this.$container.find('tr:eq(0) td:eq(3)'));\n\n        var sel = getSelected();\n        sel = sel.replace(/\\s/g, ''); // tabs and spaces between <td>s are inconsistent in browsers, so let's ignore them\n        expect(sel).toEqual('B1C1D1');\n      });\n\n      it('should allow fragmentSelection from one cell when set to `cell`', function() {\n        var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: 'cell'\n        });\n        selectElementText(this.$container.find('td')[1], 1);\n\n        mouseDown(this.$container.find('tr:eq(0) td:eq(1)'));\n        mouseOver(this.$container.find('tr:eq(0) td:eq(1)'));\n        mouseMove(this.$container.find('tr:eq(0) td:eq(1)'));\n        mouseUp(this.$container.find('tr:eq(0) td:eq(1)'));\n\n        expect(getSelected().replace(/\\s/g, '')).toEqual('B1');\n      });\n\n      it('should disallow fragmentSelection from one cell when set to `cell` and when user selects adjacent cell', function() {\n        var hot = handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: 'cell'\n        });\n        selectElementText(this.$container.find('td')[1], 1);\n\n        mouseDown(this.$container.find('tr:eq(0) td:eq(1)'));\n        mouseOver(this.$container.find('tr:eq(0) td:eq(2)'));\n        mouseMove(this.$container.find('tr:eq(0) td:eq(2)'));\n        mouseUp(this.$container.find('tr:eq(0) td:eq(2)'));\n\n        expect(getSelected()).toEqual(false);\n      });\n\n      it('should disallow fragmentSelection of Handsontable chrome (anything that is not table) when set to false', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: false\n        });\n        var $div = $('<div style=\"position: absolute; top: 0; left: 0\">Text</div>');\n        this.$container.append($div);\n        selectElementText($div[0], 1);\n\n        mouseDown($div);\n\n        var sel = getSelected();\n        expect(sel).toEqual(false);\n      });\n\n      it('should disallow fragmentSelection of Handsontable chrome (anything that is not table) when set to true', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: true\n        });\n        var $div = $('<div style=\"position: absolute; top: 0; left: 0\">Text</div>');\n        this.$container.append($div);\n        selectElementText($div[0], 1);\n\n        mouseDown($div);\n\n        var sel = getSelected();\n        expect(sel).toEqual(false);\n      });\n    });\n\n    describe('dynamic', () => {\n      it('should disallow fragmentSelection when set to false', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: true\n        });\n        updateSettings({fragmentSelection: false});\n        selectElementText(this.$container.find('tr:eq(0) td:eq(1)')[0], 3);\n\n        mouseDown(this.$container.find('tr:eq(0) td:eq(3)'));\n        mouseUp(this.$container.find('tr:eq(0) td:eq(3)'));\n\n        var sel = getSelected();\n        expect(sel).toEqual(false);\n      });\n\n      it('should allow fragmentSelection when set to true', function() {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(4, 4),\n          fragmentSelection: false\n        });\n        updateSettings({fragmentSelection: true});\n        selectElementText(this.$container.find('td')[1], 3);\n\n        mouseDown(this.$container.find('tr:eq(0) td:eq(3)'));\n        mouseUp(this.$container.find('tr:eq(0) td:eq(3)'));\n\n        var sel = getSelected();\n        sel = sel.replace(/\\s/g, ''); // tabs and spaces between <td>s are inconsistent in browsers, so let's ignore them\n        expect(sel).toEqual('B1C1D1');\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/fragmentSelection.spec.js","describe('settings', () => {\n  describe('maxCols', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('works on init', () => {\n      it('should show data properly when `maxCols` is set to 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 0\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData().length).toEqual(0);\n        expect(getDataAtRow(0)).toEqual([]);\n        expect(countCols()).toEqual(0);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual([]);\n        expect(getDataAtCol(1)).toEqual([]);\n      });\n\n      it('should show data properly when `maxCols` is set to value > 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 5\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(5);\n        expect(getDataAtRow(0).length).toEqual(5);\n        expect(countCols()).toEqual(5);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(6)).toEqual([]);\n      });\n\n      it('should show data properly when `maxCols` is set to infinity value', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: Infinity\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(10);\n        expect(getDataAtRow(0).length).toEqual(10);\n        expect(countCols()).toEqual(10);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);\n      });\n\n      describe('when `columns` property was set', () => {\n        it('should show data properly when `maxCols` is set to value > 0', () => {\n          handsontable({\n            columns: [\n              {type: 'text'},\n              {type: 'text'},\n              {type: 'text'},\n              {type: 'text'},\n              {type: 'text'},\n            ],\n            minRows: 10,\n            maxCols: 2\n          });\n\n          expect(getSourceDataAtRow(0).length).toEqual(5);\n          expect(countSourceCols()).toEqual(5);\n          expect(getData()[0].length).toEqual(2);\n          expect(getDataAtRow(0).length).toEqual(2);\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCol(3)).toEqual([]);\n        });\n      });\n    });\n\n    describe('update settings works', () => {\n      it('should show data properly after maxCols is updated to 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxCols: 0\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData().length).toEqual(0);\n        expect(getDataAtRow(0)).toEqual([]);\n        expect(countCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual([]);\n        expect(getDataAtCol(1)).toEqual([]);\n      });\n\n      it('should show data properly after maxCols is updated to value > 0 -> test no. 1', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxCols: 2\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(2);\n        expect(getDataAtRow(0).length).toEqual(2);\n        expect(countCols()).toEqual(2);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(3)).toEqual([]);\n      });\n\n      it('should show data properly after maxCols is updated to value > 0 -> test no. 2', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 5\n        });\n\n        updateSettings({\n          maxCols: 2\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(2);\n        expect(getDataAtRow(0).length).toEqual(2);\n        expect(countCols()).toEqual(2);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(3)).toEqual([]);\n      });\n\n      it('should show data properly after maxCols is updated to value > 0 -> test no. 3', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 2\n        });\n\n        updateSettings({\n          maxCols: 5\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(5);\n        expect(getDataAtRow(0).length).toEqual(5);\n        expect(countCols()).toEqual(5);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(6)).toEqual([]);\n      });\n\n      it('should show data properly after maxCols is updated to infinity value -> test no. 1', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxCols: Infinity\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(10);\n        expect(getDataAtRow(0).length).toEqual(10);\n        expect(countCols()).toEqual(10);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);\n      });\n\n      it('should show data properly after maxCols is updated to infinity value -> test no. 2', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxCols: 2\n        });\n\n        updateSettings({\n          maxCols: Infinity\n        });\n\n        expect(getSourceDataAtRow(0).length).toEqual(10);\n        expect(countSourceCols()).toEqual(10);\n        expect(getData()[0].length).toEqual(10);\n        expect(getDataAtRow(0).length).toEqual(10);\n        expect(countCols()).toEqual(10);\n        expect(countEmptyCols()).toEqual(0);\n        expect(getDataAtCol(0)).toEqual(['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10']);\n      });\n\n      describe('works when `columns` property was set', () => {\n        it('should show data properly when `maxCols` is updated to value > 0', () => {\n          handsontable({\n            columns: [\n              {type: 'text'},\n              {type: 'text'},\n              {type: 'text'},\n              {type: 'text'},\n              {type: 'text'},\n            ],\n            minRows: 10\n          });\n\n          updateSettings({\n            maxCols: 2\n          });\n\n          expect(getSourceDataAtRow(0).length).toEqual(5);\n          expect(countSourceCols()).toEqual(5);\n          expect(getData()[0].length).toEqual(2);\n          expect(getDataAtRow(0).length).toEqual(2);\n          expect(countCols()).toEqual(2);\n          expect(getDataAtCol(0).length).toEqual(10);\n        });\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/maxCols.spec.js","describe('settings', () => {\n  describe('maxRows', () => {\n    const id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('works on init', () => {\n      it('should show data properly when `maxRows` is set to 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 0\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(0);\n        expect(getDataAtCol(0)).toEqual([]);\n        expect(countRows()).toEqual(0);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual([]);\n        expect(getDataAtRow(1)).toEqual([]);\n      });\n\n      it('should show data properly when `maxRows` is set to value > 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 5\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(5);\n        expect(getDataAtCol(0).length).toEqual(5);\n        expect(countRows()).toEqual(5);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(6)).toEqual([]);\n      });\n\n      it('should show data properly when `maxRows` is set to infinity value', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: Infinity\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(10);\n        expect(getDataAtCol(0).length).toEqual(10);\n        expect(countRows()).toEqual(10);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);\n      });\n    });\n\n    describe('update settings works', () => {\n      it('should show data properly after maxRows is updated to 0', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxRows: 0\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(0);\n        expect(getDataAtCol(0)).toEqual([]);\n        expect(countRows()).toEqual(0);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual([]);\n        expect(getDataAtRow(1)).toEqual([]);\n      });\n\n      it('should show data properly after maxRows is updated to value > 0 -> test no. 1', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxRows: 2\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(2);\n        expect(getDataAtCol(0).length).toEqual(2);\n        expect(countRows()).toEqual(2);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(3)).toEqual([]);\n      });\n\n      it('should show data properly after maxRows is updated to value > 0 -> test no. 2', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 5\n        });\n\n        updateSettings({\n          maxRows: 2\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(2);\n        expect(getDataAtCol(0).length).toEqual(2);\n        expect(countRows()).toEqual(2);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(3)).toEqual([]);\n      });\n\n      it('should show data properly after maxRows is updated to value > 0 -> test no. 3', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 2\n        });\n\n        updateSettings({\n          maxRows: 5\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(5);\n        expect(getDataAtCol(0).length).toEqual(5);\n        expect(countRows()).toEqual(5);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(6)).toEqual([]);\n      });\n\n      it('should show data properly after maxRows is updated to infinity value -> test no. 1', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10)\n        });\n\n        updateSettings({\n          maxRows: Infinity\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(10);\n        expect(getDataAtCol(0).length).toEqual(10);\n        expect(countRows()).toEqual(10);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);\n      });\n\n      it('should show data properly after maxRows is updated to infinity value -> test no. 2', () => {\n        handsontable({\n          data: Handsontable.helper.createSpreadsheetData(10, 10),\n          maxRows: 2\n        });\n\n        updateSettings({\n          maxRows: Infinity\n        });\n\n        expect(getSourceDataAtCol(0).length).toEqual(10);\n        expect(countSourceRows()).toEqual(10);\n        expect(getData().length).toEqual(10);\n        expect(getDataAtCol(0).length).toEqual(10);\n        expect(countRows()).toEqual(10);\n        expect(countEmptyRows()).toEqual(0);\n        expect(getDataAtRow(0)).toEqual(['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1']);\n      });\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/maxRows.spec.js","describe('settings', () => {\n  describe('renderer', () => {\n    var id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    describe('defined in constructor', () => {\n      it('should use text renderer by default', () => {\n        var originalTextRenderer = Handsontable.cellTypes.text.renderer;\n\n        spyOn(Handsontable.cellTypes.text, 'renderer');\n        Handsontable.renderers.registerRenderer('text', Handsontable.cellTypes.text.renderer);\n\n        handsontable();\n        expect(Handsontable.cellTypes.text.renderer).toHaveBeenCalled();\n\n        Handsontable.renderers.registerRenderer('text', originalTextRenderer);\n      });\n\n      it('should use renderer from predefined string', () => {\n        var originalTextRenderer = Handsontable.renderers.TextRenderer;\n        spyOn(Handsontable.renderers, 'TextRenderer');\n        Handsontable.renderers.registerRenderer('text', Handsontable.renderers.TextRenderer);\n\n        var originalCheckboxRenderer = Handsontable.renderers.CheckboxRenderer;\n        spyOn(Handsontable.renderers, 'CheckboxRenderer');\n        Handsontable.renderers.registerRenderer('checkbox', Handsontable.renderers.CheckboxRenderer);\n\n        handsontable({\n          columns: [\n            {\n              renderer: 'checkbox'\n            }\n          ]\n        });\n        expect(Handsontable.renderers.TextRenderer).not.toHaveBeenCalled();\n        expect(Handsontable.renderers.CheckboxRenderer).toHaveBeenCalled();\n\n        Handsontable.renderers.registerRenderer('text', originalTextRenderer);\n        Handsontable.renderers.registerRenderer('checkbox', originalCheckboxRenderer);\n      });\n\n      it('should use renderer from predefined string when columns is a function', () => {\n        var originalTextRenderer = Handsontable.renderers.TextRenderer;\n\n        spyOn(Handsontable.renderers, 'TextRenderer');\n        Handsontable.renderers.registerRenderer('text', Handsontable.renderers.TextRenderer);\n\n        var originalCheckboxRenderer = Handsontable.renderers.CheckboxRenderer;\n        spyOn(Handsontable.renderers, 'CheckboxRenderer');\n        Handsontable.renderers.registerRenderer('checkbox', Handsontable.renderers.CheckboxRenderer);\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? {renderer: 'checkbox'} : null;\n          }\n        });\n        expect(Handsontable.renderers.TextRenderer).not.toHaveBeenCalled();\n        expect(Handsontable.renderers.CheckboxRenderer).toHaveBeenCalled();\n\n        Handsontable.renderers.registerRenderer('text', originalTextRenderer);\n        Handsontable.renderers.registerRenderer('checkbox', originalCheckboxRenderer);\n      });\n\n      it('should use renderer from custom function', () => {\n        var called = false;\n\n        function myRenderer() {\n          called = true;\n        }\n\n        handsontable({\n          columns: [\n            {\n              renderer: myRenderer\n            }\n          ]\n        });\n\n        expect(called).toBe(true);\n      });\n\n      it('should use renderer from custom function when columns is a function', () => {\n        var called = false;\n\n        function myRenderer() {\n          called = true;\n        }\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? {renderer: myRenderer} : null;\n          }\n        });\n\n        expect(called).toBe(true);\n      });\n\n      it('should use renderer from custom string', () => {\n        var myRenderer = jasmine.createSpy('myRenderer');\n\n        Handsontable.renderers.registerRenderer('myRenderer', myRenderer);\n\n        handsontable({\n          columns: [\n            {\n              renderer: 'myRenderer'\n            }\n          ]\n        });\n\n        expect(myRenderer).toHaveBeenCalled();\n      });\n\n      it('should use renderer from custom string when columns is a function', () => {\n        var myRenderer = jasmine.createSpy('myRenderer');\n\n        Handsontable.renderers.registerRenderer('myRenderer', myRenderer);\n\n        handsontable({\n          columns(column) {\n            return column === 0 ? {renderer: 'myRenderer'} : null;\n          }\n        });\n\n        expect(myRenderer).toHaveBeenCalled();\n      });\n    });\n\n    it('should call renderer with cellProperties.row, cellProperties.col matching row and col arguments', () => {\n      var rendererSpy = jasmine.createSpy('rendererSpy').and.callThrough();\n      var cellPropertiesCache = [];\n\n      rendererSpy.and.callFake((instance, TD, row, col, prop, value, cellProperties) => {\n        cellPropertiesCache.push({\n          row: cellProperties.row,\n          col: cellProperties.col\n        });\n      });\n\n      handsontable({\n        renderer: rendererSpy\n      });\n\n      for (var i = 0, len = rendererSpy.calls.count(); i < len; i++) {\n        var args = rendererSpy.calls.argsFor(i);\n        var row = args[2];\n        var col = args[3];\n        var cellProperties = cellPropertiesCache[i];\n\n        expect(row).toEqual(cellProperties.row);\n        expect(col).toEqual(cellProperties.col);\n      }\n    });\n\n    it('should call cells function before passing cellProperties to renderer', () => {\n      var rendererSpy = jasmine.createSpy('rendererSpy').and.callThrough();\n      var cellPropertiesCache = [];\n\n      rendererSpy.and.callFake((instance, TD, row, col, prop, value, cellProperties) => {\n        cellPropertiesCache.push({\n          cellsRow: cellProperties.cellsRow,\n          cellsCol: cellProperties.cellsCol\n        });\n      });\n\n      handsontable({\n        renderer: rendererSpy,\n        cells(row, col) {\n          return {\n            cellsRow: row,\n            cellsCol: col\n          };\n        }\n      });\n\n      for (var i = 0, len = rendererSpy.calls.count(); i < len; i++) {\n        var args = rendererSpy.calls.argsFor(i);\n        var row = args[2];\n        var col = args[3];\n        var cellProperties = cellPropertiesCache[i];\n\n        expect(row).toEqual(cellProperties.cellsRow);\n        expect(col).toEqual(cellProperties.cellsCol);\n      }\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/renderer.spec.js","describe('settings', () => {\n  describe('tableClassName', () => {\n    var id = 'testContainer';\n\n    beforeEach(function() {\n      this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n    });\n\n    afterEach(function() {\n      if (this.$container) {\n        destroy();\n        this.$container.remove();\n      }\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as string, without overlays)', () => {\n      var hot = handsontable({\n        colHeaders: false,\n        rowHeaders: false,\n        tableClassName: 'foo'\n      });\n\n      var possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)\n\n      // all overlays is created anyway but without left-top corner\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as string, with overlays)', () => {\n      var hot = handsontable({\n        colHeaders: true,\n        rowHeaders: true,\n        tableClassName: 'foo'\n      });\n\n      var possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)\n\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as string with spaces, without overlays)', () => {\n      var hot = handsontable({\n        colHeaders: false,\n        rowHeaders: false,\n        tableClassName: 'foo bar'\n      });\n\n      var possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)\n\n      // all overlays is created anyway but without left-top corner\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as string with spaces, with overlays)', () => {\n      var hot = handsontable({\n        colHeaders: true,\n        rowHeaders: true,\n        tableClassName: 'foo bar'\n      });\n\n      var possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)\n\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as array, without overlays)', () => {\n      var hot = handsontable({\n        colHeaders: false,\n        rowHeaders: false,\n        tableClassName: ['foo', 'bar', 'baz']\n      });\n\n      var possibleCounts = [3, 4]; // 3 for non-pro, 4 for pro (bottom overlay)\n\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.baz').length)).toBeGreaterThan(-1);\n    });\n\n    it('should add class name every table element inside handsontable wrapper element (as array, with overlays)', () => {\n      var hot = handsontable({\n        colHeaders: true,\n        rowHeaders: true,\n        tableClassName: ['foo', 'bar', 'baz']\n      });\n\n      var possibleCounts = [4, 5]; // 4 for non-pro, 5 for pro (bottom overlay)\n\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.foo').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.bar').length)).toBeGreaterThan(-1);\n      expect(possibleCounts.indexOf(hot.rootElement.querySelectorAll('table.baz').length)).toBeGreaterThan(-1);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/settings/tableClassName.spec.js","describe('GhostTable', () => {\n\n  var hotSettings = {\n    data: [['A', '1', 'A\\nB\\nC'], ['B', '2', 'A-----B-------C'], ['C', '3', 'A---\\n--B-------C']]\n  };\n  var gt;\n\n  beforeEach(function() {\n    this.$container = $('<div id=\"testContainer\"></div>').appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n    if (gt) {\n      gt.clean();\n      gt = null;\n    }\n  });\n\n  describe('row', () => {\n    it('should throw exception if we try to add column after added row', () => {\n      var hot = handsontable(hotSettings);\n      var exception = false;\n      var samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      gt.addRow(0, samples);\n\n      try {\n        gt.addColumn(0, samples);\n      } catch (ex) {\n        exception = true;\n      }\n\n      expect(exception).toBe(true);\n    });\n\n    it('should create container element only for first row', () => {\n      var hot = handsontable(hotSettings);\n      var samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      spyOn(gt, 'createContainer').and.callThrough();\n\n      gt.addRow(0, samples);\n      gt.addRow(0, samples);\n      gt.addRow(0, samples);\n      gt.addRow(1, samples);\n      gt.addRow(2, samples);\n\n      expect(gt.createContainer.calls.count()).toBe(1);\n      expect(gt.createContainer.calls.mostRecent().args).toEqual(['handsontable']);\n    });\n\n    it('should add row to rows collection after call `addRow` method', () => {\n      var hot = handsontable(hotSettings);\n      var samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      expect(gt.rows.length).toBe(0);\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Foo', row: 0}, {value: 'Foo Bar', row: 0}]});\n\n      gt.addRow(0, samples);\n\n      expect(gt.rows.length).toBe(1);\n      expect(gt.rows[0].row).toBe(0);\n      expect(gt.rows[0].table.className).toBe('htCore');\n      expect(gt.rows[0].table.nodeName).toBe('TABLE');\n      expect(gt.rows[0].table.querySelectorAll('colgroup > col').length).toBe(2);\n      expect(gt.rows[0].table.querySelector('tbody > tr > td').innerHTML).toBe('Foo');\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Bar', row: 1}, {value: 'Baz1234', row: 1}]});\n\n      gt.addRow(1, samples);\n\n      expect(gt.rows.length).toBe(2);\n      expect(gt.rows[1].row).toBe(1);\n      expect(gt.rows[1].table.className).toBe('htCore');\n      expect(gt.rows[1].table.nodeName).toBe('TABLE');\n      expect(gt.rows[1].table.querySelectorAll('colgroup > col').length).toBe(2);\n      expect(gt.rows[1].table.querySelector('tbody > tr > td').innerHTML).toBe('Bar');\n    });\n\n    it('should get valid heights', () => {\n      var hot = handsontable(hotSettings);\n      var heightSpy = jasmine.createSpy();\n      var samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Foo', row: 0}, {value: 'Foo.....Bar', row: 0}]});\n\n      gt.addRow(0, samples);\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Foo\\nBar\\nsqw', row: 1}]});\n\n      gt.addRow(1, samples);\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Foo', row: 0}, {value: 'Foo Bar', row: 0}]});\n\n      gt.addRow(2, samples);\n      gt.getHeights(heightSpy);\n\n      expect(heightSpy.calls.count()).toBe(3);\n      expect(heightSpy.calls.argsFor(0)[0]).toBe(0);\n      expect(heightSpy.calls.argsFor(0)[1]).toBe(23);\n      expect(heightSpy.calls.argsFor(1)[0]).toBe(1);\n      expect(heightSpy.calls.argsFor(1)[1]).toBe(64);\n      expect(heightSpy.calls.argsFor(2)[0]).toBe(2);\n      expect(heightSpy.calls.argsFor(2)[1]).toBe(43);\n    });\n  });\n\n  describe('column', () => {\n    it('should throw exception if we try to add row after added column', () => {\n      var hot = handsontable(hotSettings);\n      var exception = false;\n      var samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      gt.addColumn(0, samples);\n\n      try {\n        gt.addRow(0, samples);\n      } catch (ex) {\n        exception = true;\n      }\n\n      expect(exception).toBe(true);\n    });\n\n    it('should create container element only for first column', () => {\n      var hot = handsontable(hotSettings);\n      var samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      spyOn(gt, 'createContainer').and.callThrough();\n\n      gt.addColumn(0, samples);\n      gt.addColumn(0, samples);\n      gt.addColumn(0, samples);\n      gt.addColumn(1, samples);\n      gt.addColumn(2, samples);\n\n      expect(gt.createContainer.calls.count()).toBe(1);\n      expect(gt.createContainer.calls.mostRecent().args).toEqual(['handsontable']);\n    });\n\n    it('should add column to columns collection after call `addColumn` method', () => {\n      var hot = handsontable(hotSettings);\n      var samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      expect(gt.columns.length).toBe(0);\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Foo', col: 0}, {value: 'Foo Bar', col: 0}]});\n\n      gt.addColumn(0, samples);\n\n      expect(gt.columns.length).toBe(1);\n      expect(gt.columns[0].col).toBe(0);\n      expect(gt.columns[0].table.className).toBe('htCore');\n      expect(gt.columns[0].table.style.width).toBe('auto');\n      expect(gt.columns[0].table.style.tableLayout).toBe('auto');\n      expect(gt.columns[0].table.nodeName).toBe('TABLE');\n      expect(gt.columns[0].table.querySelectorAll('thead > tr > th').length).toBe(1);\n      expect(gt.columns[0].table.querySelector('tbody > tr > td').innerHTML).toBe('Foo');\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Bar', row: 1}, {value: 'Baz1234', row: 1}]});\n\n      gt.addColumn(1, samples);\n\n      expect(gt.columns.length).toBe(2);\n      expect(gt.columns[1].col).toBe(1);\n      expect(gt.columns[1].table.className).toBe('htCore');\n      expect(gt.columns[1].table.nodeName).toBe('TABLE');\n      expect(gt.columns[1].table.querySelectorAll('thead > tr > th').length).toBe(1);\n      expect(gt.columns[1].table.querySelector('tbody > tr > td').innerHTML).toBe('Bar');\n    });\n\n    it('should get valid widths', () => {\n      var hot = handsontable(hotSettings);\n      var widthSpy = jasmine.createSpy();\n      var samples = new Map();\n      gt = new Handsontable.__GhostTable(hot);\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Foo', col: 0}, {value: 'Foo.....Bar', col: 0}]});\n\n      gt.addColumn(0, samples);\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Foo\\nBar\\nsqw', col: 1}]});\n\n      gt.addColumn(1, samples);\n\n      samples.clear();\n      samples.set(0, {strings: [{value: 'Foo', col: 0}, {value: 'Foo Bar', col: 0}]});\n\n      gt.addColumn(2, samples);\n      gt.getWidths(widthSpy);\n\n      expect(widthSpy.calls.count()).toBe(3);\n      expect(widthSpy.calls.argsFor(0)[0]).toBe(0);\n      expect(widthSpy.calls.argsFor(0)[1]).toBeAroundValue(87, 4);\n      expect(widthSpy.calls.argsFor(1)[0]).toBe(1);\n      expect(widthSpy.calls.argsFor(1)[1]).toBeAroundValue(41, 4);\n      expect(widthSpy.calls.argsFor(2)[0]).toBe(2);\n      expect(widthSpy.calls.argsFor(2)[1]).toBeAroundValue(68, 4);\n    });\n  });\n\n  it('should reset internal state after call `clean` method', () => {\n    var hot = handsontable(hotSettings);\n    var samples = new Map();\n    gt = new Handsontable.__GhostTable(hot);\n\n    gt.addColumn(0, samples);\n    gt.rows.push({});\n    gt.getWidths(() => {});\n\n    expect(gt.columns.length).toBe(1);\n    expect(gt.samples).toBeDefined();\n    expect(gt.injected).toBe(true);\n    expect(gt.container).toBeDefined();\n    expect(document.querySelector('.htGhostTable')).toBeDefined();\n\n    gt.clean();\n\n    expect(gt.columns.length).toBe(0);\n    expect(gt.samples).toBe(null);\n    expect(gt.injected).toBe(false);\n    expect(gt.container).toBe(null);\n    expect(document.querySelector('.htGhostTable')).toBe(null);\n  });\n\n  it('should be detected as vertical if at least one row is added', () => {\n    var hot = handsontable(hotSettings);\n    var samples = new Map();\n    var gt = new Handsontable.__GhostTable(hot);\n\n    gt.addRow(0, samples);\n\n    expect(gt.isVertical()).toBe(true);\n    expect(gt.isHorizontal()).toBe(false);\n  });\n\n  it('should be detected as horizontal if at least one column is added', () => {\n    var hot = handsontable(hotSettings);\n    var samples = new Map();\n    var gt = new Handsontable.__GhostTable(hot);\n\n    gt.addColumn(0, samples);\n\n    expect(gt.isVertical()).toBe(false);\n    expect(gt.isHorizontal()).toBe(true);\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/utils/ghostTable.spec.js","describe('autocompleteValidator', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  describe('allowEmpty', () => {\n    it('should validate empty cells positively (by default)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var hot = handsontable({\n        data: [\n          ['some', 'sample', 'data'],\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 0, undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should validate empty cells positively when allowEmpty is set to true', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var hot = handsontable({\n        data: [\n          ['some', 'sample', 'data'],\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        allowEmpty: true,\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 0, undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should validate empty cells negatively when allowEmpty is set to false', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var hot = handsontable({\n        data: [\n          ['some', 'sample', 'data'],\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        allowEmpty: false,\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 0, 0, undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should respect the allowEmpty property for a single column', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var hot = handsontable({\n        data: [\n          ['some', 'sample', 'data']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true,\n            allowEmpty: false\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, '');\n      setDataAtCell(0, 1, '');\n      setDataAtCell(0, 2, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate.calls.argsFor(0)).toEqual([true, '', 0, 0, undefined, undefined]);\n        expect(onAfterValidate.calls.argsFor(1)).toEqual([false, '', 0, 1, undefined, undefined]);\n        expect(onAfterValidate.calls.argsFor(2)).toEqual([true, '', 0, 2, undefined, undefined]);\n        done();\n      }, 100);\n    });\n\n    it('should work for null and undefined values in cells', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var hot = handsontable({\n        data: [\n          ['some', 'sample', 'data']\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true,\n          },\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        allowEmpty: false,\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, null);\n      setDataAtCell(0, 1, void 0);\n      setDataAtCell(0, 2, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate.calls.argsFor(0)).toEqual([false, null, 0, 0, undefined, undefined]);\n        expect(onAfterValidate.calls.argsFor(1)).toEqual([false, void 0, 0, 1, undefined, undefined]);\n        expect(onAfterValidate.calls.argsFor(2)).toEqual([false, '', 0, 2, undefined, undefined]);\n        done();\n      }, 100);\n    });\n  });\n  describe('strict mode', () => {\n    it('sshould validate negatively when chars have different size', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n      var hot = handsontable({\n        data: [\n          ['some', 'sample', 'data'],\n        ],\n        columns: [\n          {\n            type: 'autocomplete',\n            source: ['some', 'sample', 'data'],\n            strict: true\n          }\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(0, 0, 'Some');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, 'Some', 0, 0, undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/validators/autocompleteValidator.spec.js","describe('dateValidator', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfObjects = function() {\n    return [\n      {date: '01/01/2015', name: 'Ted', lastName: 'Right'},\n      {date: '01/01/15', name: 'Frank', lastName: 'Honest'},\n      {date: '41/01/2015', name: 'Joan', lastName: 'Well'},\n      {date: '01/51/2015', name: 'Sid', lastName: 'Strong'}\n    ];\n  };\n\n  it('should validate an empty string (default behavior)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'date', type: 'date'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should rewrite an ISO 8601 string to the correct format if a date-string in different format is provided', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'date', type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '2016-03-18');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '2016-03-18', 1, 'date', undefined, undefined);\n    }, 100);\n\n    setTimeout(() => {\n      expect(getDataAtCell(1, 0)).toEqual('03/18/2016');\n      done();\n    }, 130);\n  });\n\n  it('should not positively validate a non-date string', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'date', type: 'date'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'wat');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'wat', 0, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a incorrect date string', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'date', type: 'date'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '33/01/2014');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '33/01/2014', 0, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a date string in wrong format', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'date', type: 'date'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '01/01/15');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '01/01/15', 1, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a date string in wrong format (if custom format is provided)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'date', type: 'date', dateFormat: 'DD/MM/YY'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '01/01/2015');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '01/01/2015', 1, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should positively validate a date string in correct format', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'date', type: 'date'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '01/01/2015');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '01/01/2015', 1, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should positively validate a date string in correct format (if custom format is provided)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'date', type: 'date', dateFormat: 'DD/MM/YY'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '23/03/15');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '23/03/15', 1, 'date', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  describe('allowEmpty', () => {\n    it('should not validate an empty string when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'date', type: 'date', dateFormat: 'DD/MM/YY', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `null` when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'date', type: 'date', dateFormat: 'DD/MM/YY', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, null);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `undefined` when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'date', type: 'date', dateFormat: 'DD/MM/YY', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, void 0);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n\n  describe('correctFormat', () => {\n    it('should not make any changes to entered string if correctFormat is not set', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'date', type: 'date', dateFormat: 'MM/DD/YY'},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '11/23/2013');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '11/23/2013', 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not make any changes to entered string if correctFormat is set to false', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'date', type: 'date', dateFormat: 'MM/DD/YY', correctFormat: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '11/23/2013');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '11/23/2013', 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should rewrite the string to the correct format if a date-string in different format is provided', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'date', type: 'date', dateFormat: 'MM/DD/YYYY', correctFormat: true},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '1/10/15');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '1/10/15', 1, 'date', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('01/10/2015');\n        done();\n      }, 130);\n    });\n\n    it('should rewrite the string to the correct format if a date-string in different format is provided (for non-default format)', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'date', type: 'date', dateFormat: 'DD.MM.YYYY', correctFormat: true},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '5.3.2016');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '5.3.2016', 1, 'date', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('05.03.2016');\n        done();\n      }, 130);\n    });\n\n    it('should not try to correct format of non-date strings', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'date', type: 'date', dateFormat: 'DD/MM/YY', correctFormat: true},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, 'test non-date string');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, 'test non-date string', 1, 'date', undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/validators/dateValidator.spec.js","describe('validators', () => {\n  const id = 'testContainer';\n  const {\n    registerValidator,\n    getValidator,\n  } = Handsontable.validators;\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  it('should register custom validator', async () => {\n    registerValidator('myValidator', (value, cb) => {\n      cb(value === 10);\n    });\n\n    const onAfterValidate = jasmine.createSpy('onAfterValidate');\n    const hot = handsontable({\n      data: [\n        [1, 6, 10],\n      ],\n      columns: [{\n        validator: 'myValidator',\n      }],\n      afterValidate: onAfterValidate\n    });\n\n    hot.setDataAtCell(1, 0, 10);\n\n    await sleep(100);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(true, 10, 1, 0, undefined, undefined);\n\n    hot.setDataAtCell(2, 0, 2);\n\n    await sleep(100);\n\n    expect(onAfterValidate).toHaveBeenCalledWith(false, 2, 2, 0, undefined, undefined);\n  });\n\n  it('should retrieve predefined validators by its names', () => {\n    expect(getValidator('autocomplete')).toBeFunction();\n    expect(getValidator('date')).toBeFunction();\n    expect(getValidator('numeric')).toBeFunction();\n    expect(getValidator('time')).toBeFunction();\n  });\n\n  it('should retrieve custom validator by its names', () => {\n    registerValidator('myValidator', (value, cb) => {\n      cb(value === 10);\n    });\n\n    getValidator('myValidator')(2, (isValid) => {\n      expect(isValid).toBe(false);\n    });\n\n    getValidator('myValidator')('10', (isValid) => {\n      expect(isValid).toBe(false);\n    });\n\n    getValidator('myValidator')(10, (isValid) => {\n      expect(isValid).toBe(true);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/validators/index.spec.js","describe('numericValidator', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfObjects = function() {\n    return [\n      {id: 1, name: 'Ted', lastName: 'Right'},\n      {id: 2, name: 'Frank', lastName: 'Honest'},\n      {id: 3, name: 'Joan', lastName: 'Well'},\n      {id: 4, name: 'Sid', lastName: 'Strong'},\n      {id: 5, name: 'Jane', lastName: 'Neat'},\n      {id: 6, name: 'Chuck', lastName: 'Jackson'},\n      {id: 7, name: 'Meg', lastName: 'Jansen'},\n      {id: 8, name: 'Rob', lastName: 'Norris'},\n      {id: 9, name: 'Sean', lastName: 'O\\'Hara'},\n      {id: 10, name: 'Eve', lastName: 'Branson'}\n    ];\n  };\n\n  it('should validate an empty string (default behavior)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, '');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not validate non numeric string', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, 'test');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'test', 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should validate numeric string', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, '123');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, 123, 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should validate signed numeric string', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'id', type: 'numeric'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(2, 0, '-123');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, -123, 2, 'id', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  describe('allowEmpty', () => {\n    it('should not validate an empty string when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'id', type: 'numeric', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(2, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 2, 'id', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `null` when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'id', type: 'numeric', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(2, 0, null);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 2, 'id', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `undefined` when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'id', type: 'numeric', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(2, 0, void 0);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 2, 'id', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should validate 0 when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'id', type: 'numeric', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(2, 0, 0);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, 0, 2, 'id', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should add / remove `htInvalid` class properly when validating non-numeric data', (done) => {\n      var hot = handsontable({\n        data: [\n          {id: 1, name: 'Ted', salary: 10000},\n          {id: 2, name: 'Frank', salary: '5300'},\n          {id: 3, name: 'Joan', salary: 'non-numeric value'}\n        ],\n        columns: [\n          {data: 'id'},\n          {data: 'name'},\n          {data: 'salary', type: 'numeric', allowInvalid: false}\n        ]\n      });\n\n      hot.validateCells();\n\n      setTimeout(() => {\n        expect($(getCell(1, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);\n        expect($(getCell(2, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(true);\n\n        setDataAtCell(2, 2, 8000);\n      }, 200);\n\n      setTimeout(() => {\n        expect($(getCell(2, 2)).hasClass(hot.getSettings().invalidCellClassName)).toBe(false);\n        done();\n      }, 400);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/validators/numericValidator.spec.js","describe('timeValidator', () => {\n  var id = 'testContainer';\n\n  beforeEach(function() {\n    this.$container = $(`<div id=\"${id}\"></div>`).appendTo('body');\n  });\n\n  afterEach(function() {\n    if (this.$container) {\n      destroy();\n      this.$container.remove();\n    }\n  });\n\n  var arrayOfObjects = function() {\n    return [\n      {time: '4:10:05 am', name: 'Ted', lastName: 'Right'},\n      {time: '17:15:25', name: 'Frank', lastName: 'Honest'},\n      {time: '14:65:45 am', name: 'Joan', lastName: 'Well'},\n      {time: '33:25:05', name: 'Sid', lastName: 'Strong'}\n    ];\n  };\n\n  it('should validate an empty string (default behavior)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'time', type: 'time'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '', 0, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a non-date format', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'time', type: 'time'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, 'nd');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, 'nd', 0, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a incorrect time string', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'time', type: 'time'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(0, 0, '30:10:25');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '30:10:25', 0, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a time string in not default format', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'time', type: 'time'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '20:20:01');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '20:20:01', 1, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should not positively validate a time string in wrong format (if custom format is provided)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'time', type: 'time', timeFormat: 'HH:mm:ss'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '5:10:15 am');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(false, '5:10:15 am', 1, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  it('should positively validate a date string in correct format (if custom format is provided)', (done) => {\n    var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n    handsontable({\n      data: arrayOfObjects(),\n      columns: [\n        {data: 'time', type: 'time', timeFormat: 'HH:mm:ss'},\n        {data: 'name'},\n        {data: 'lastName'}\n      ],\n      afterValidate: onAfterValidate\n    });\n\n    setDataAtCell(1, 0, '16:32:03');\n\n    setTimeout(() => {\n      expect(onAfterValidate).toHaveBeenCalledWith(true, '16:32:03', 1, 'time', undefined, undefined);\n      done();\n    }, 100);\n  });\n\n  describe('allowEmpty', () => {\n    it('should not validate an empty string when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', dateFormat: 'HH:mm', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '', 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `null` when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', dateFormat: 'HH:mm', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, null);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, null, 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not validate `undefined` when allowEmpty is set as `false`', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', dateFormat: 'HH:mm', allowEmpty: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, void 0);\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, void 0, 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n\n  describe('correctFormat', () => {\n    it('should not make any changes to entered string if correctFormat is not set', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', timeFormat: 'h:mm:ss a'},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '13:00:00');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '13:00:00', 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should not make any changes to entered string if correctFormat is set to false', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', timeFormat: 'h:mm:ss a', correctFormat: false},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '13:00:00');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, '13:00:00', 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n\n    it('should rewrite the string to the correct format if a time-string in different format is provided', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', timeFormat: 'h:mm:ss a', correctFormat: true},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '16:35:01');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '16:35:01', 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('4:35:01 pm');\n        done();\n      }, 130);\n    });\n\n    it('should rewrite the string to the correct format if a time in micro-timestamp format is provided', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', timeFormat: 'HH:mm:ss', correctFormat: true},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      var currentDateTime = new Date();\n\n      setDataAtCell(1, 0, currentDateTime.getTime()); // timestamp in milliseconds\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, currentDateTime.getTime(), 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        var addLeadingZero = function(number) {\n          return number < 10 ? `0${number}` : number;\n        };\n        expect(getDataAtCell(1, 0)).toEqual(`${addLeadingZero(currentDateTime.getHours())}:${addLeadingZero(currentDateTime.getMinutes())}:${\n          addLeadingZero(currentDateTime.getSeconds())}`);\n        done();\n      }, 130);\n    });\n\n    it('should rewrite the string to the correct format if a time in ISO8601 format is provided', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', timeFormat: 'HH:mm:ss', correctFormat: true},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      var currentDateTime = new Date();\n\n      setDataAtCell(1, 0, currentDateTime.toISOString()); // ISO-formatted datetime, sth like '2016-02-19T12:40:04.983Z'\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, currentDateTime.toISOString(), 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        var addLeadingZero = function(number) {\n          return number < 10 ? `0${number}` : number;\n        };\n\n        expect(getDataAtCell(1, 0)).toEqual(`${addLeadingZero(currentDateTime.getHours())}:${addLeadingZero(currentDateTime.getMinutes())}:${\n          addLeadingZero(currentDateTime.getSeconds())}`);\n        done();\n      }, 130);\n    });\n\n    it('should rewrite one and two-digit number to the correct format at hours', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', timeFormat: 'hh:mm:ss a', correctFormat: true},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '19');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '19', 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('07:00:00 pm');\n        done();\n      }, 130);\n    });\n\n    it('should rewrite one and two-digit number to the correct format at minutes', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', timeFormat: 'mm:ss', correctFormat: true},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, '57');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(true, '57', 1, 'time', undefined, undefined);\n      }, 100);\n\n      setTimeout(() => {\n        expect(getDataAtCell(1, 0)).toEqual('57:00');\n        done();\n      }, 130);\n    });\n\n    it('should not try to correct format of non-date strings', (done) => {\n      var onAfterValidate = jasmine.createSpy('onAfterValidate');\n\n      handsontable({\n        data: arrayOfObjects(),\n        columns: [\n          {data: 'time', type: 'time', timeFormat: 'HH:mm:ss', correctFormat: true},\n          {data: 'name'},\n          {data: 'lastName'}\n        ],\n        afterValidate: onAfterValidate\n      });\n\n      setDataAtCell(1, 0, 'test non-time string');\n\n      setTimeout(() => {\n        expect(onAfterValidate).toHaveBeenCalledWith(false, 'test non-time string', 1, 'time', undefined, undefined);\n        done();\n      }, 100);\n    });\n  });\n});\n\n\n\n// WEBPACK FOOTER //\n// test/e2e/validators/timeValidator.spec.js","\n/**\n * slice() reference.\n */\n\nvar slice = Array.prototype.slice;\n\n/**\n * Expose `co`.\n */\n\nmodule.exports = co['default'] = co.co = co;\n\n/**\n * Wrap the given generator `fn` into a\n * function that returns a promise.\n * This is a separate function so that\n * every `co()` call doesn't create a new,\n * unnecessary closure.\n *\n * @param {GeneratorFunction} fn\n * @return {Function}\n * @api public\n */\n\nco.wrap = function (fn) {\n  createPromise.__generatorFunction__ = fn;\n  return createPromise;\n  function createPromise() {\n    return co.call(this, fn.apply(this, arguments));\n  }\n};\n\n/**\n * Execute the generator function or a generator\n * and return a promise.\n *\n * @param {Function} fn\n * @return {Promise}\n * @api public\n */\n\nfunction co(gen) {\n  var ctx = this;\n  var args = slice.call(arguments, 1)\n\n  // we wrap everything in a promise to avoid promise chaining,\n  // which leads to memory leak errors.\n  // see https://github.com/tj/co/issues/180\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.apply(ctx, args);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n\n    onFulfilled();\n\n    /**\n     * @param {Mixed} res\n     * @return {Promise}\n     * @api private\n     */\n\n    function onFulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    /**\n     * @param {Error} err\n     * @return {Promise}\n     * @api private\n     */\n\n    function onRejected(err) {\n      var ret;\n      try {\n        ret = gen.throw(err);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    /**\n     * Get the next value in the generator,\n     * return a promise.\n     *\n     * @param {Object} ret\n     * @return {Promise}\n     * @api private\n     */\n\n    function next(ret) {\n      if (ret.done) return resolve(ret.value);\n      var value = toPromise.call(ctx, ret.value);\n      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n    }\n  });\n}\n\n/**\n * Convert a `yield`ed value into a promise.\n *\n * @param {Mixed} obj\n * @return {Promise}\n * @api private\n */\n\nfunction toPromise(obj) {\n  if (!obj) return obj;\n  if (isPromise(obj)) return obj;\n  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);\n  if ('function' == typeof obj) return thunkToPromise.call(this, obj);\n  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);\n  if (isObject(obj)) return objectToPromise.call(this, obj);\n  return obj;\n}\n\n/**\n * Convert a thunk to a promise.\n *\n * @param {Function}\n * @return {Promise}\n * @api private\n */\n\nfunction thunkToPromise(fn) {\n  var ctx = this;\n  return new Promise(function (resolve, reject) {\n    fn.call(ctx, function (err, res) {\n      if (err) return reject(err);\n      if (arguments.length > 2) res = slice.call(arguments, 1);\n      resolve(res);\n    });\n  });\n}\n\n/**\n * Convert an array of \"yieldables\" to a promise.\n * Uses `Promise.all()` internally.\n *\n * @param {Array} obj\n * @return {Promise}\n * @api private\n */\n\nfunction arrayToPromise(obj) {\n  return Promise.all(obj.map(toPromise, this));\n}\n\n/**\n * Convert an object of \"yieldables\" to a promise.\n * Uses `Promise.all()` internally.\n *\n * @param {Object} obj\n * @return {Promise}\n * @api private\n */\n\nfunction objectToPromise(obj){\n  var results = new obj.constructor();\n  var keys = Object.keys(obj);\n  var promises = [];\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var promise = toPromise.call(this, obj[key]);\n    if (promise && isPromise(promise)) defer(promise, key);\n    else results[key] = obj[key];\n  }\n  return Promise.all(promises).then(function () {\n    return results;\n  });\n\n  function defer(promise, key) {\n    // predefine the key in the result\n    results[key] = undefined;\n    promises.push(promise.then(function (res) {\n      results[key] = res;\n    }));\n  }\n}\n\n/**\n * Check if `obj` is a promise.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isPromise(obj) {\n  return 'function' == typeof obj.then;\n}\n\n/**\n * Check if `obj` is a generator.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isGenerator(obj) {\n  return 'function' == typeof obj.next && 'function' == typeof obj.throw;\n}\n\n/**\n * Check if `obj` is a generator function.\n *\n * @param {Mixed} obj\n * @return {Boolean}\n * @api private\n */\nfunction isGeneratorFunction(obj) {\n  var constructor = obj.constructor;\n  if (!constructor) return false;\n  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;\n  return isGenerator(constructor.prototype);\n}\n\n/**\n * Check for plain object.\n *\n * @param {Mixed} val\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(val) {\n  return Object == val.constructor;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/co/index.js\n// module id = 243\n// module chunks = 0","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object')\n  , toIndex  = require('./_to-index')\n  , toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){\n  var O     = toObject(this)\n    , len   = toLength(O.length)\n    , to    = toIndex(target, len)\n    , from  = toIndex(start, len)\n    , end   = arguments.length > 2 ? arguments[2] : undefined\n    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)\n    , inc   = 1;\n  if(from < to && to < from + count){\n    inc  = -1;\n    from += count - 1;\n    to   += count - 1;\n  }\n  while(count-- > 0){\n    if(from in O)O[to] = O[from];\n    else delete O[to];\n    to   += inc;\n    from += inc;\n  } return O;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_array-copy-within.js\n// module id = 244\n// module chunks = 0","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object')\n  , toIndex  = require('./_to-index')\n  , toLength = require('./_to-length');\nmodule.exports = function fill(value /*, start = 0, end = @length */){\n  var O      = toObject(this)\n    , length = toLength(O.length)\n    , aLen   = arguments.length\n    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)\n    , end    = aLen > 2 ? arguments[2] : undefined\n    , endPos = end === undefined ? length : toIndex(end, length);\n  while(endPos > index)O[index++] = value;\n  return O;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_array-fill.js\n// module id = 245\n// module chunks = 0","var isObject = require('./_is-object')\n  , isArray  = require('./_is-array')\n  , SPECIES  = require('./_wks')('species');\n\nmodule.exports = function(original){\n  var C;\n  if(isArray(original)){\n    C = original.constructor;\n    // cross-realm fallback\n    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;\n    if(isObject(C)){\n      C = C[SPECIES];\n      if(C === null)C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_array-species-constructor.js\n// module id = 246\n// module chunks = 0","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function(original, length){\n  return new (speciesConstructor(original))(length);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_array-species-create.js\n// module id = 247\n// module chunks = 0","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys')\n  , gOPS    = require('./_object-gops')\n  , pIE     = require('./_object-pie');\nmodule.exports = function(it){\n  var result     = getKeys(it)\n    , getSymbols = gOPS.f;\n  if(getSymbols){\n    var symbols = getSymbols(it)\n      , isEnum  = pIE.f\n      , i       = 0\n      , key;\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n  } return result;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_enum-keys.js\n// module id = 248\n// module chunks = 0","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function(){\n  var that   = anObject(this)\n    , result = '';\n  if(that.global)     result += 'g';\n  if(that.ignoreCase) result += 'i';\n  if(that.multiline)  result += 'm';\n  if(that.unicode)    result += 'u';\n  if(that.sticky)     result += 'y';\n  return result;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_flags.js\n// module id = 249\n// module chunks = 0","var isObject       = require('./_is-object')\n  , setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function(that, target, C){\n  var P, S = target.constructor;\n  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){\n    setPrototypeOf(that, P);\n  } return that;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_inherit-if-required.js\n// module id = 250\n// module chunks = 0","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_invoke.js\n// module id = 251\n// module chunks = 0","'use strict';\nvar create         = require('./_object-create')\n  , descriptor     = require('./_property-desc')\n  , setToStringTag = require('./_set-to-string-tag')\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_iter-create.js\n// module id = 252\n// module chunks = 0","var getKeys   = require('./_object-keys')\n  , toIObject = require('./_to-iobject');\nmodule.exports = function(object, el){\n  var O      = toIObject(object)\n    , keys   = getKeys(O)\n    , length = keys.length\n    , index  = 0\n    , key;\n  while(length > index)if(O[key = keys[index++]] === el)return key;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_keyof.js\n// module id = 253\n// module chunks = 0","var global    = require('./_global')\n  , macrotask = require('./_task').set\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\n  , process   = global.process\n  , Promise   = global.Promise\n  , isNode    = require('./_cof')(process) == 'process';\n\nmodule.exports = function(){\n  var head, last, notify;\n\n  var flush = function(){\n    var parent, fn;\n    if(isNode && (parent = process.domain))parent.exit();\n    while(head){\n      fn   = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch(e){\n        if(head)notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if(parent)parent.enter();\n  };\n\n  // Node.js\n  if(isNode){\n    notify = function(){\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if(Observer){\n    var toggle = true\n      , node   = document.createTextNode('');\n    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n    notify = function(){\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if(Promise && Promise.resolve){\n    var promise = Promise.resolve();\n    notify = function(){\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function(){\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function(fn){\n    var task = {fn: fn, next: undefined};\n    if(last)last.next = task;\n    if(!head){\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_microtask.js\n// module id = 254\n// module chunks = 0","var dP       = require('./_object-dp')\n  , anObject = require('./_an-object')\n  , getKeys  = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-dps.js\n// module id = 255\n// module chunks = 0","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject')\n  , gOPN      = require('./_object-gopn').f\n  , toString  = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function(it){\n  try {\n    return gOPN(it);\n  } catch(e){\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it){\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-gopn-ext.js\n// module id = 256\n// module chunks = 0","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = require('./_has')\n  , toObject    = require('./_to-object')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_object-gpo.js\n// module id = 257\n// module chunks = 0","// all object keys, includes non-enumerable and symbols\nvar gOPN     = require('./_object-gopn')\n  , gOPS     = require('./_object-gops')\n  , anObject = require('./_an-object')\n  , Reflect  = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it){\n  var keys       = gOPN.f(anObject(it))\n    , getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_own-keys.js\n// module id = 258\n// module chunks = 0","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y){\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_same-value.js\n// module id = 259\n// module chunks = 0","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject  = require('./_an-object')\n  , aFunction = require('./_a-function')\n  , SPECIES   = require('./_wks')('species');\nmodule.exports = function(O, D){\n  var C = anObject(O).constructor, S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_species-constructor.js\n// module id = 260\n// module chunks = 0","var toInteger = require('./_to-integer')\n  , defined   = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_string-at.js\n// module id = 261\n// module chunks = 0","var global         = require('./_global')\n  , core           = require('./_core')\n  , LIBRARY        = require('./_library')\n  , wksExt         = require('./_wks-ext')\n  , defineProperty = require('./_object-dp').f;\nmodule.exports = function(name){\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/modules/_wks-define.js\n// module id = 262\n// module chunks = 0","/**\n * Export generator function checks.\n */\nmodule.exports = isGenerator\nmodule.exports.fn = isGeneratorFunction\n\n/**\n * Check whether an object is a generator.\n *\n * @param  {Object}  obj\n * @return {Boolean}\n */\nfunction isGenerator (obj) {\n  return obj &&\n    typeof obj.next === 'function' &&\n    typeof obj.throw === 'function'\n}\n\n/**\n * Check whether a function is generator.\n *\n * @param  {Function} fn\n * @return {Boolean}\n */\nfunction isGeneratorFunction (fn) {\n  return typeof fn === 'function' &&\n    fn.constructor &&\n    fn.constructor.name === 'GeneratorFunction'\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/is-generator/is-generator.js\n// module id = 263\n// module chunks = 0"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACVA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;;;;;;ACFA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACfA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACnBA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;;;;;;ACDA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACpDA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACxBA;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACNA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtlFA;;;;;;ACAA;AACA;AACA;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACrEA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACXA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AChBA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;;;;;;ACFA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC1SA;AACA;AACA;AACA;AACA;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACtdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AAHA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AANA;AACA;AAQA;AACA;AACA;;;;;;;;;AC9bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgaA;AACA;AACA;;;;;;;;;;;ACleA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAMA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AA1BA;AACA;AA4BA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAdA;AACA;AAgBA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAYA;AACA;AADA;AAbA;AACA;AAiBA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAbA;AACA;AAmBA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAbA;AACA;AAmBA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAYA;AAEA;AADA;AAKA;AACA;AACA;AACA;AAHA;AAnBA;AACA;AAyBA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAbA;AACA;AAmBA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AArBA;AACA;AA2BA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AArBA;AACA;AA2BA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAFA;AAhBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAKA;AADA;AAIA;AACA;AAnBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAIA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AACA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAFA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAFA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAFA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAHA;AAXA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AASA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AASA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAFA;AARA;AACA;AAaA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAFA;AARA;AACA;AAaA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAPA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAPA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAXA;AACA;AAabA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AALA;AACA;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AAKA;AACA;;;;;;;;;ACz1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAZA;AACA;AAcA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AADA;AAKA;AAdA;AACA;AAgbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACviaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAJA;AACA;AAaiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AADA;AAYA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AADA;AADA;AAgBA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAFA;AAWA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AADA;AAUA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAtHA;AADA;AAFA;AAAA;AACA;AAgIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AATA;AADA;AAeA;AAhBA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AADA;AAgBA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AARA;AADA;AAeA;AAhBA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AADA;AAgBA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AADA;AAaA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AARA;AADA;AAcA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AADA;AARA;AADA;AAcA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AADA;AAaA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AADA;AAcA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AADA;AAaA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AARA;AADA;AAcA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AADA;AARA;AADA;AAcA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AADA;AAaA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AARA;AADA;AAcA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AALA;AADA;AASA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AADA;AARA;AADA;AAFA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACj2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACraA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AACA;AADA;AACA;AAYA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AACA;AADA;AACA;AAcA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AANA;AACA;AAQA;AACA;AACA;AAZA;AAAA;AACA;AADA;AAeA;AACA;AAAA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAOA;AACA;AACA;AAXA;AAAA;AACA;AADA;AACA;AAaA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAOA;AACA;AACA;AAXA;AAAA;AACA;AADA;AACA;AAaA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAOA;AACA;AACA;AAXA;AAAA;AACA;AADA;AACA;AAaA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AArBA;AAAA;AACA;AADA;AACA;AAuBA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AACA;AADA;AACA;AAuBA;AACA;AACA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAbA;AAAA;AACA;AADA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AAdA;AAAA;AACA;AADA;AACA;AAgBA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AAXA;AAAA;AACA;AADA;AACA;AAaA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;;;;;;;;;AC7sBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAPA;AALA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAvBA;AALA;AACA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAFA;AAAA;AAKA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAFA;AAAA;AAKA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAFA;AAAA;AAKA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAFA;AAAA;AAKA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAPA;AAJA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAWA;AACA;;;;;;;;;AC5TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;ACvOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AARA;AACA;AAktjjbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtnYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAWA;AACA;AACA;;;;;;;;;ACtqulhaz7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AANA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAGA;AAVA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAGA;AAVA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC19BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AAbA;AAeA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAKA;AAZA;AACA;AAcA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAzBA;AACA;AA2BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA3BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAMA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AApCA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAEA;AADA;AAIA;AADA;AApBA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA9BA;AACA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC/fA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC9KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAPA;AASA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAlBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;ACjzBA;AACA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;;;;;;;;;AC1WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;ACxnxTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AAOA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AAOA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAOA;AACA;AAGA;AAJA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AADA;AAMA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AAfA;AACA;AAiBA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;AAZA;AACA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AACA;AAIA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AADA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAPA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3mBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAOA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAUA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAhBA;AAkcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAlBA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAOA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AALA;AAUA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAxBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACplDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAfA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA3BA;AACA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpvdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAPA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAPA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAPA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAPA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAPA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAPA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAPA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACv1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;;;;;;;;;AC9OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnrBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1MA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AAnBA;AACA;AADA;AAAA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AAGA;AACA;AADA;AAGA;AAPA;AACA;AACA;AAQA;AACA;AA3CA;AAAA;AACA;AADA;AACA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAAA;AACA;AADA;AACA;AAuDA;AACA;AACA;AA1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA2DA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;AChMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AATA;AACA;AAeA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AAFA;AAVA;AAgaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AARA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAFA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAHA;AANA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AALA;AAFA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AALA;AAFA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AALA;AAFA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAFA;AAMA;AAVA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AADA;AAIA;AADA;AAIA;AACA;AAnCA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AANA;AACA;AAgBA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AANA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAHA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACx4FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAdA;AAFA;AAHA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAJA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAFA;AANA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAFA;AANA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AADA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAFA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAFA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAFA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACxSA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AAnBA;AACA;AADA;AAAA;AACA;AAoBA;AACA;AACA;AACA;AAGA;AACA;AADA;AAJA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAUA;AAdA;AAgnBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AADA;AANA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAJA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAGA;AAJA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;;;;;ACtgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AAEA;AACA;AAFA;AAPA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AACA;AACA;AADA;AAHA;AADA;AASA;AACA;AADA;AAGA;AADA;AAlBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AACA;AACA;AADA;AAHA;AADA;AASA;AACA;AADA;AAGA;AADA;AAGA;AArBA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AACA;AACA;AADA;AAHA;AADA;AASA;AACA;AADA;AAGA;AADA;AAGA;AArBA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AADA;AAGA;AADA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7kCA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AANA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAHA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AADA;AAJA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;ACpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AADA;AARA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAFA;AARA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAZA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;AC3PA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AADA;AANA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAFA;AANA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAFA;AANA;AACA;AAaA;AACA;AACA;AACA;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/FA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AArBA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAMA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAMA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnXA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AADA;AAGA;AAPA;AACA;AACA;AAQA;AACA;AAjBA;AAAA;AACA;AADA;AACA;AAmBA;AACA;AACA;AACA;AAvBA;AAAA;AACA;AADA;AACA;AAyBA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AANA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AACA;AACA;AACA;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}